pub const STATEMENTS: &[crate::LoggingStatement] = &[

	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Db/LoginFlowV2Mapper.php" , line : 96usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DoesNotExistException") , regex : "^Token expired$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Db/ProfileConfig.php" , line : 154usize , placeholders : & ["$paramId"] , has_meaningful_message : false , exception : Some ("ParameterDoesNotExistException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Middleware/TwoFactorMiddleware.php" , line : 106usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("TwoFactorAuthRequiredException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Middleware/TwoFactorMiddleware.php" , line : 133usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("UserAlreadyLoggedInException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Middleware/TwoFactorMiddleware.php" , line : 147usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("TwoFactorAuthRequiredException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Middleware/TwoFactorMiddleware.php" , line : 153usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("UserAlreadyLoggedInException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Notification/CoreNotifier.php" , line : 74usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Notification/CoreNotifier.php" , line : 100usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid subject$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/core/BackgroundJobs/BackgroundCleanupUpdaterBackupsJob.php" , line : 60usize , placeholders : & ["$backupFolderPath"] , has_meaningful_message : true , exception : None , regex : "^(.*) exists \\- start to clean it up$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/core/BackgroundJobs/BackgroundCleanupUpdaterBackupsJob.php" , line : 83usize , placeholders : & ["json_encode($dirList)"] , has_meaningful_message : true , exception : None , regex : "^List of all directories that will be deleted: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/core/BackgroundJobs/BackgroundCleanupUpdaterBackupsJob.php" , line : 86usize , placeholders : & ["$dir"] , has_meaningful_message : true , exception : None , regex : "^Removing (.*) \\.\\.\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/core/BackgroundJobs/BackgroundCleanupUpdaterBackupsJob.php" , line : 89usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Cleanup finished$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/core/BackgroundJobs/BackgroundCleanupUpdaterBackupsJob.php" , line : 91usize , placeholders : & ["$backupFolderPath"] , has_meaningful_message : true , exception : None , regex : "^Could not find updater directory (.*) \\- cleanup step not needed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/Db/Migrations/GenerateCommand.php" , line : 213usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^Failed to generate new migration step\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/Db/Migrations/GenerateCommand.php" , line : 225usize , placeholders : & ["$directory"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Could not create folder \"(.*)\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/Db/Migrations/GenerateCommand.php" , line : 231usize , placeholders : & ["$directory"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Could not create folder \"(.*)\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/Db/ConvertType.php" , line : 143usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Converting to SQLite \\(sqlite3\\) is currently not supported\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/Db/ConvertType.php" , line : 148usize , placeholders : & ["sprintf(\n\t\t\t\t'Can not convert from %1$s to %1$s.',\n\t\t\t\t$type\n\t\t\t)"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/Db/ConvertType.php" , line : 158usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The \\-\\-clear\\-schema option is not supported when converting to Oracle \\(oci\\)\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/Log/Manage.php" , line : 125usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid backend$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/Log/Manage.php" , line : 158usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid log level string$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/Log/Manage.php" , line : 179usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid log level number$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/Log/File.php" , line : 125usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Error parsing log rotation file size$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/Log/File.php" , line : 129usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Log rotation file size must be non\\-negative$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/Maintenance/Install.php" , line : 127usize , placeholders : & ["$db"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Database <(.*)> is not supported\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/Maintenance/Install.php" , line : 154usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Database user not provided\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/Maintenance/Install.php" , line : 157usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Database name not provided\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/Maintenance/Install.php" , line : 179usize , placeholders : & ["$adminEmail" , "$adminLogin"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Invalid e\\-mail\\-address <(.*)> for <(.*)>\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/Config/Import.php" , line : 129usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^The file must contain a valid json array$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/Config/Import.php" , line : 147usize , placeholders : & ["implode(', ', $additionalKeys)"] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^Found invalid entries in root: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/Config/Import.php" , line : 150usize , placeholders : & ["implode(', ', $this->validRootKeys)"] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^At least one key of the following is expected: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/Config/Import.php" , line : 159usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^The system config array is not an array$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/Config/Import.php" , line : 167usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^The apps config array is not an array$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/Config/Import.php" , line : 178usize , placeholders : & ["$configName"] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^Invalid system config value for \"(.*)\"\\. Only arrays, bools, integers, strings and null \\(delete\\) are allowed\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/Config/Import.php" , line : 196usize , placeholders : & ["$app" , "$name"] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^Invalid app config value for \"(.*)\":\"(.*)\"\\. Only integers, strings and null \\(delete\\) are allowed\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/Config/System/SetConfig.php" , line : 95usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^Config parameter does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/Config/System/SetConfig.php" , line : 116usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Non\\-numeric value specified$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/Config/System/SetConfig.php" , line : 126usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Non\\-numeric value specified$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/Config/System/SetConfig.php" , line : 150usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Unable to parse value as boolean$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/Config/System/SetConfig.php" , line : 168usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid type$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/Config/System/SetConfig.php" , line : 194usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^Config parameter does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/Config/System/DeleteConfig.php" , line : 109usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^Config parameter does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/Config/System/DeleteConfig.php" , line : 112usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^Config parameter does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/L10n/CreateJs.php" , line : 135usize , placeholders : & ["$phpFile"] , has_meaningful_message : true , exception : Some ("UnexpectedValueException") , regex : "^PHP translation file <(.*)> does not exist\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/Base.php" , line : 146usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InterruptedException") , regex : "^Command interrupted by user$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/Encryption/EncryptAll.php" , line : 119usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Server side encryption is not enabled$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/Encryption/ChangeKeyStorageRoot.php" , line : 144usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^New root folder doesn't exist\\. Please create the folder or check the permissions and try again\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/Encryption/ChangeKeyStorageRoot.php" , line : 153usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Can't access the new root folder\\. Please check the permissions and make sure that the folder is in your data folder$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/Encryption/ChangeKeyStorageRoot.php" , line : 264usize , placeholders : & ["$path"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^new folder '(.*)' already exists$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/User/Setting.php" , line : 125usize , placeholders : & ["$uid"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The user \"(.*)\" does not exist\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/User/Setting.php" , line : 129usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The \"default\\-value\" option can only be used when specifying a key\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/User/Setting.php" , line : 133usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The value argument can only be used when specifying a key\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/User/Setting.php" , line : 136usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The value argument can not be used together with \"default\\-value\"\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/User/Setting.php" , line : 139usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The \"update\\-only\" option can only be used together with \"value\"\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/User/Setting.php" , line : 143usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The \"delete\" option can only be used when specifying a key\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/User/Setting.php" , line : 146usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The \"delete\" option can not be used together with \"default\\-value\"\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/User/Setting.php" , line : 149usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The \"delete\" option can not be used together with \"value\"\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Command/User/Setting.php" , line : 152usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The \"error\\-if\\-not\\-exists\" option can only be used together with \"delete\"\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Controller/CollaborationResourcesController.php" , line : 75usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("CollectionException") , regex : "^Not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Controller/CollaborationResourcesController.php" , line : 265usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("CollectionException") , regex : "^Can not access collection$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Controller/CollaborationResourcesController.php" , line : 292usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ResourceException") , regex : "^Can not access resource$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/core/Controller/AvatarController.php" , line : 119usize , placeholders : & ["$size"] , has_meaningful_message : true , exception : None , regex : "^Avatar requested in deprecated size (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/core/Controller/AvatarController.php" , line : 124usize , placeholders : & ["$size"] , has_meaningful_message : true , exception : None , regex : "^Avatar requested in deprecated size (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/core/Controller/AvatarController.php" , line : 212usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Controller/ProfileApiController.php" , line : 79usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSNotFoundException") , regex : "^User does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Controller/ProfileApiController.php" , line : 83usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSForbiddenException") , regex : "^Users can only edit their own visibility settings$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Controller/ProfileApiController.php" , line : 91usize , placeholders : & ["$paramId"] , has_meaningful_message : true , exception : Some ("OCSBadRequestException") , regex : "^User does not have a profile parameter with ID: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Controller/AppPasswordController.php" , line : 86usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSForbiddenException") , regex : "^You cannot request an new apppassword with an apppassword$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Controller/AppPasswordController.php" , line : 92usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSForbiddenException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Controller/AppPasswordController.php" , line : 131usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSForbiddenException") , regex : "^no app password in use$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Controller/AppPasswordController.php" , line : 139usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSForbiddenException") , regex : "^could not remove apptoken$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Controller/AppPasswordController.php" , line : 151usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSForbiddenException") , regex : "^no app password in use$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Controller/AppPasswordController.php" , line : 159usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSForbiddenException") , regex : "^could not rotate apptoken$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/core/Controller/WebAuthnController.php" , line : 72usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Starting WebAuthn login$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/core/Controller/WebAuthnController.php" , line : 74usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Converting login name to UID$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/core/Controller/WebAuthnController.php" , line : 81usize , placeholders : & ["$uid"] , has_meaningful_message : true , exception : None , regex : "^Got UID: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/core/Controller/WebAuthnController.php" , line : 96usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Validating WebAuthn login$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/core/Controller/WebAuthnController.php" , line : 99usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Trying to finish WebAuthn login without session data$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/core/Controller/SearchController.php" , line : 63usize , placeholders : & ["$result->type" , "$result->id"] , has_meaningful_message : true , exception : None , regex : "^Skipping search result due to invalid encoding: \\{type: (.*), id: (.*)\\}$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Controller/ClientFlowLoginV2Controller.php" , line : 219usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidTokenException") , regex : "^login name does not match$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Controller/ClientFlowLoginV2Controller.php" , line : 351usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LoginFlowV2NotFoundException") , regex : "^Login token not set in session$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Controller/LostController.php" , line : 193usize , placeholders : & ["$error"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/core/Controller/LostController.php" , line : 224usize , placeholders : & ["$this->l10n->t('Password reset is disabled')"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/core/Controller/LostController.php" , line : 238usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Could not send password reset email: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/core/Controller/LostController.php" , line : 264usize , placeholders : & [] , has_meaningful_message : false , exception : None , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Controller/LostController.php" , line : 276usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/core/Controller/LostController.php" , line : 286usize , placeholders : & ["$e->getHint()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/core/Controller/LostController.php" , line : 288usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Controller/LostController.php" , line : 304usize , placeholders : & ["$input"] , has_meaningful_message : true , exception : Some ("ResetPasswordException") , regex : "^Could not send reset e\\-mail since there is no email for username (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Controller/LostController.php" , line : 310usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ResetPasswordException") , regex : "^Could not send reset e\\-mail, 5 of them were already sent in the last 30 minutes$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Controller/LostController.php" , line : 362usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ResetPasswordException") , regex : "^User is disabled$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Controller/LostController.php" , line : 376usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ResetPasswordException") , regex : "^Could not find user$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/core/Controller/GuestAvatarController.php" , line : 81usize , placeholders : & ["$size"] , has_meaningful_message : true , exception : None , regex : "^Avatar requested in deprecated size (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/core/Controller/GuestAvatarController.php" , line : 86usize , placeholders : & ["$size"] , has_meaningful_message : true , exception : None , regex : "^Avatar requested in deprecated size (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/core/Controller/GuestAvatarController.php" , line : 101usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^error while creating guest avatar$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/core/Controller/TwoFactorChallengeController.php" , line : 218usize , placeholders : & ["$uid" , "$ip"] , has_meaningful_message : true , exception : None , regex : "^Two\\-factor challenge failed: (.*) \\(Remote IP: (.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Controller/ClientFlowLoginController.php" , line : 386usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidTokenException") , regex : "^login name does not match$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Controller/WhatsNewController.php" , line : 78usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Acting user cannot be resolved$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Controller/WhatsNewController.php" , line : 118usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Acting user cannot be resolved$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Service/LoginFlowV2Service.php" , line : 87usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LoginFlowV2NotFoundException") , regex : "^Invalid token$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Service/LoginFlowV2Service.php" , line : 95usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LoginFlowV2NotFoundException") , regex : "^Token not yet ready$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Service/LoginFlowV2Service.php" , line : 106usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LoginFlowV2NotFoundException") , regex : "^Apptoken could not be decrypted$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Service/LoginFlowV2Service.php" , line : 121usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LoginFlowV2NotFoundException") , regex : "^Login token invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Service/LoginFlowV2Service.php" , line : 242usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Could not initialize keys$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/core/Service/LoginFlowV2Service.php" , line : 247usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^OpenSSL reported a problem$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Critical , path : "/core/Service/LoginFlowV2Service.php" , line : 262usize , placeholders : & ["implode(', ', $errors)"] , has_meaningful_message : true , exception : None , regex : "^Something is wrong with your openssl setup: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/deepdiver/zipstreamer/test/ZipComponents.php" , line : 136usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParseException") , regex : "^invalid magic$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/deepdiver/zipstreamer/test/ZipComponents.php" , line : 194usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParseException") , regex : "^invalid magic$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/deepdiver/zipstreamer/test/ZipComponents.php" , line : 261usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParseException") , regex : "^invalid magic$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/deepdiver/zipstreamer/test/ZipComponents.php" , line : 353usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParseException") , regex : "^invalid magic$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/deepdiver/zipstreamer/test/ZipComponents.php" , line : 432usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParseException") , regex : "^invalid magic$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/deepdiver/zipstreamer/test/ZipComponents.php" , line : 540usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParseException") , regex : "^invalid magic$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/deepdiver/zipstreamer/test/ZipComponents.php" , line : 601usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParseException") , regex : "^invalid magic$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/deepdiver/zipstreamer/src/ZipStreamer.php" , line : 310usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^unable to use compression method DEFLATE with level other than NONE \\(requires pecl_http >= 0\\.10\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/deepdiver/zipstreamer/src/ZipStreamer.php" , line : 313usize , placeholders : & ["$compress"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^invalid option (.*) \\(compression method\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/deepdiver/zipstreamer/src/ZipStreamer.php" , line : 320usize , placeholders : & ["$level"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^invalid option (.*) \\(compression level$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/deepdiver/zipstreamer/src/Lib/Count64_64.php" , line : 46usize , placeholders : & ["self::EXCEPTION_32BIT_OVERFLOW"] , has_meaningful_message : false , exception : Some ("\\OverFlowException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/deepdiver/zipstreamer/src/Lib/Count64_64.php" , line : 51usize , placeholders : & ["self::EXCEPTION_32BIT_OVERFLOW"] , has_meaningful_message : false , exception : Some ("\\OverFlowException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/deepdiver/zipstreamer/src/Lib/Count64_64.php" , line : 59usize , placeholders : & ["self::EXCEPTION_32BIT_OVERFLOW"] , has_meaningful_message : false , exception : Some ("\\OverFlowException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/deepdiver/zipstreamer/src/Lib/Count64_64.php" , line : 64usize , placeholders : & ["self::EXCEPTION_SET_INVALID_ARGUMENT"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/deepdiver/zipstreamer/src/Lib/Count64_64.php" , line : 75usize , placeholders : & ["self::EXCEPTION_ADD_INVALID_ARGUMENT"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/deepdiver/zipstreamer/src/Lib/Count64_64.php" , line : 78usize , placeholders : & ["self::EXCEPTION_32BIT_OVERFLOW"] , has_meaningful_message : false , exception : Some ("\\OverFlowException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/deepdiver/zipstreamer/src/Lib/Count64_32.php" , line : 48usize , placeholders : & ["self::EXCEPTION_32BIT_OVERFLOW"] , has_meaningful_message : false , exception : Some ("\\OverflowException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/deepdiver/zipstreamer/src/Lib/Count64_32.php" , line : 54usize , placeholders : & ["self::EXCEPTION_32BIT_OVERFLOW"] , has_meaningful_message : false , exception : Some ("\\OverflowException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/deepdiver/zipstreamer/src/Lib/Count64_32.php" , line : 59usize , placeholders : & ["self::EXCEPTION_SET_INVALID_ARGUMENT"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/deepdiver/zipstreamer/src/Lib/Count64_32.php" , line : 71usize , placeholders : & ["self::EXCEPTION_32BIT_OVERFLOW"] , has_meaningful_message : false , exception : Some ("\\OverflowException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/deepdiver/zipstreamer/src/Lib/Count64_32.php" , line : 82usize , placeholders : & ["self::EXCEPTION_32BIT_OVERFLOW"] , has_meaningful_message : false , exception : Some ("\\OverflowException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/deepdiver/zipstreamer/src/Lib/Count64_32.php" , line : 88usize , placeholders : & ["self::EXCEPTION_32BIT_OVERFLOW"] , has_meaningful_message : false , exception : Some ("\\OverflowException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/deepdiver/zipstreamer/src/Lib/Count64_32.php" , line : 92usize , placeholders : & ["self::EXCEPTION_ADD_INVALID_ARGUMENT"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/InfiniteMapObject.php" , line : 47usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Unable to convert the data$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/InfiniteListObject.php" , line : 46usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Unable to convert the data$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/SignedIntegerObject.php" , line : 81usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^The value must be a negative integer\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/SignedIntegerObject.php" , line : 105usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Out of range\\. Please use NegativeBigIntegerTag tag with ByteStringObject object instead\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/SignedIntegerObject.php" , line : 115usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Unable to convert the data$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/Utils.php" , line : 59usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Invalid data provided$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/Utils.php" , line : 68usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/LengthCalculator.php" , line : 59usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Unable to convert the data$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/Tag/BigFloatTag.php" , line : 31usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^The extension \"bcmath\" is required to use this tag$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/Tag/BigFloatTag.php" , line : 49usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^This tag only accepts a ListObject object that contains an exponent and a mantissa\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/Tag/BigFloatTag.php" , line : 53usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^The exponent must be a Signed Integer or an Unsigned Integer object\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/Tag/BigFloatTag.php" , line : 57usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^The mantissa must be a Positive or Negative Signed Integer or an Unsigned Integer object\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/Tag/Base64EncodingTag.php" , line : 39usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^This tag only accepts Byte String, Infinite Byte String, Text String or Infinite Text String objects\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/Tag/Base64EncodingTag.php" , line : 57usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Unable to decode the data$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/Tag/NegativeBigIntegerTag.php" , line : 37usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^This tag only accepts a Byte String object\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/Tag/Base64UrlEncodingTag.php" , line : 40usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^This tag only accepts Byte String, Infinite Byte String, Text String or Infinite Text String objects\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/Tag/PositiveBigIntegerTag.php" , line : 37usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^This tag only accepts a Byte String object\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/Tag/Base16EncodingTag.php" , line : 39usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^This tag only accepts Byte String, Infinite Byte String, Text String or Infinite Text String objects\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/Tag/TagObjectManager.php" , line : 32usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Invalid tag ID\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/Tag/DecimalFractionTag.php" , line : 31usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^The extension \"bcmath\" is required to use this tag$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/Tag/DecimalFractionTag.php" , line : 34usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^This tag only accepts a ListObject object that contains an exponent and a mantissa\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/Tag/DecimalFractionTag.php" , line : 38usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^The exponent must be a Signed Integer or an Unsigned Integer object\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/Tag/DecimalFractionTag.php" , line : 42usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^The mantissa must be a Positive or Negative Signed Integer or an Unsigned Integer object\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/Tag/TimestampTag.php" , line : 41usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^This tag only accepts a Byte String object\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/OtherObject/OtherObjectManager.php" , line : 31usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Invalid additional information\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/OtherObject/DoublePrecisionFloatObject.php" , line : 39usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^The value is not a valid double precision floating point$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/OtherObject/HalfPrecisionFloatObject.php" , line : 39usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^The value is not a valid half precision floating point$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/OtherObject/SimpleObject.php" , line : 53usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^The value is not a valid simple value$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/OtherObject/SinglePrecisionFloatObject.php" , line : 39usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^The value is not a valid single precision floating point$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/ByteStringWithChunkObject.php" , line : 41usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Unable to convert the data$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/MapObject.php" , line : 45usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^The list must contain only MapItem objects\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/StringStream.php" , line : 30usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^Unable to open the memory$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/StringStream.php" , line : 34usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^Unable to write the memory$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/StringStream.php" , line : 38usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^Unable to rewind the memory$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/StringStream.php" , line : 50usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^Unable to read the memory$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/StringStream.php" , line : 53usize , placeholders : & ["sprintf('Out of range. Expected: %d, read: %d.', $length, mb_strlen($data, '8bit'))"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/Decoder.php" , line : 62usize , placeholders : & ["sprintf('Cannot parse the data. Found invalid Additional Information \"%s\" (%d).', str_pad(decbin($ai), 5, '0', STR_PAD_LEFT), $ai)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/Decoder.php" , line : 106usize , placeholders : & ["sprintf('Unsupported major type \"%s\" (%d).', str_pad(decbin($mt), 5, '0', STR_PAD_LEFT), $mt)"] , has_meaningful_message : false , exception : Some ("RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/Decoder.php" , line : 117usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^Unable to parse the data\\. Infinite Byte String object can only get Byte String objects\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/Decoder.php" , line : 127usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^Unable to parse the data\\. Infinite Text String object can only get Text String objects\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/Decoder.php" , line : 149usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Cannot parse the data\\. No enclosing indefinite\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/Decoder.php" , line : 157usize , placeholders : & ["sprintf('Cannot parse the data. Found infinite length for Major Type \"%s\" (%d).', str_pad(decbin($mt), 5, '0', STR_PAD_LEFT), $mt)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/ListObject.php" , line : 46usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^The list must contain only CBORObject objects\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/ListObject.php" , line : 77usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Index not found\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/TextStringWithChunkObject.php" , line : 41usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Unable to convert the data$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/UnsignedIntegerObject.php" , line : 97usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^The value must be a positive integer\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/UnsignedIntegerObject.php" , line : 118usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Out of range\\. Please use PositiveBigIntegerTag tag with ByteStringObject object instead\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/cbor-php/src/UnsignedIntegerObject.php" , line : 128usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Unable to convert the data$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/spomky-labs/base64url/src/Base64Url.php" , line : 51usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Invalid data provided$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/ClientSideMonitoring/ApiCallAttemptMonitoringMiddleware.php" , line : 122usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Parameter must be an instance of ResultInterface, AwsException or Exception\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/ClientSideMonitoring/ApiCallMonitoringMiddleware.php" , line : 85usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Parameter must be an instance of ResultInterface or Exception\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/ClientSideMonitoring/Configuration.php" , line : 24usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^CSM 'port' value must be an integer!$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/ClientSideMonitoring/ConfigurationProvider.php" , line : 233usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Not a valid CSM configuration argument\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Credentials/CredentialProvider.php" , line : 176usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^No providers in chain$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Credentials/CredentialProvider.php" , line : 850usize , placeholders : & ["$credentialSource"] , has_meaningful_message : true , exception : Some ("CredentialsException") , regex : "^Invalid credential_source found in config file: (.*)\\. Valid inputs include Environment, Ec2InstanceMetadata, and EcsContainer\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Credentials/InstanceProfileProvider.php" , line : 195usize , placeholders : & ["$this->createErrorMessage('EC2 metadata service access disabled')"] , has_meaningful_message : false , exception : Some ("CredentialsException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Credentials/InstanceProfileProvider.php" , line : 221usize , placeholders : & ["$this->createErrorMessage($msg)"] , has_meaningful_message : false , exception : Some ("CredentialsException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Credentials/InstanceProfileProvider.php" , line : 242usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("CredentialsException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Credentials/InstanceProfileProvider.php" , line : 267usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidJsonException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Credentials/InstanceProfileProvider.php" , line : 271usize , placeholders : & ["$result['Code']"] , has_meaningful_message : true , exception : Some ("CredentialsException") , regex : "^Unexpected instance profile response code: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Credentials/EcsCredentialProvider.php" , line : 74usize , placeholders : & ["$msg"] , has_meaningful_message : true , exception : Some ("CredentialsException") , regex : "^Error retrieving credential from ECS \\((.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Credentials/EcsCredentialProvider.php" , line : 101usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("CredentialsException") , regex : "^Unexpected ECS credential value$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Credentials/AssumeRoleWithWebIdentityCredentialProvider.php" , line : 53usize , placeholders : & ["self::ERROR_MSG"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)'RoleArn'\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Credentials/AssumeRoleWithWebIdentityCredentialProvider.php" , line : 58usize , placeholders : & ["self::ERROR_MSG"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)'WebIdentityTokenFile'\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Credentials/AssumeRoleWithWebIdentityCredentialProvider.php" , line : 63usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^'WebIdentityTokenFile' must be an absolute path\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Credentials/AssumeRoleWithWebIdentityCredentialProvider.php" , line : 109usize , placeholders : & ["$this->tokenFile"] , has_meaningful_message : true , exception : Some ("CredentialsException") , regex : "^Unreadable tokenfile at location (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Credentials/AssumeRoleWithWebIdentityCredentialProvider.php" , line : 121usize , placeholders : & ["$this->tokenFile"] , has_meaningful_message : true , exception : Some ("CredentialsException") , regex : "^InvalidIdentityToken from file: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Credentials/AssumeRoleWithWebIdentityCredentialProvider.php" , line : 124usize , placeholders : & ["$this->tokenFile"] , has_meaningful_message : true , exception : Some ("CredentialsException") , regex : "^Error reading WebIdentityTokenFile from (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Credentials/AssumeRoleWithWebIdentityCredentialProvider.php" , line : 144usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("CredentialsException") , regex : "^InvalidIdentityToken, retries exhausted$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Credentials/AssumeRoleWithWebIdentityCredentialProvider.php" , line : 149usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("CredentialsException") , regex : "^Error assuming role from web identity credentials$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Credentials/AssumeRoleWithWebIdentityCredentialProvider.php" , line : 156usize , placeholders : & ["$e->getMessage()" , "$e->getCode()"] , has_meaningful_message : true , exception : Some ("CredentialsException") , regex : "^Error retrieving web identity credentials: (.*) \\((.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Credentials/AssumeRoleCredentialProvider.php" , line : 34usize , placeholders : & ["self::ERROR_MSG"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)'assume_role_params'\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Credentials/AssumeRoleCredentialProvider.php" , line : 38usize , placeholders : & ["self::ERROR_MSG"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)'client'\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Credentials/AssumeRoleCredentialProvider.php" , line : 57usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("CredentialsException") , regex : "^Error in retrieving assume role credentials\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/AwsClientTrait.php" , line : 24usize , placeholders : & ["sprintf(\n                'There are no resources to iterate for the %s operation of %s',\n                $name, $this->getApi()['serviceFullName']\n            )"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Multipart/AbstractUploadManager.php" , line : 100usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^This multipart upload has already been completed or aborted\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Multipart/AbstractUploadManager.php" , line : 237usize , placeholders : & ["$key" , "$this->client->getApi()->getServiceFullName()"] , has_meaningful_message : true , exception : Some ("IAE") , regex : "^You must provide a value for \"(.*)\" in your config for the MultipartUploader for (.*)\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Multipart/AbstractUploader.php" , line : 137usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("IAE") , regex : "^Source stream must be readable\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/CloudTrail/LogFileIterator.php" , line : 83usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The bucket name could not be determined from the trail\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/CloudTrail/LogFileIterator.php" , line : 224usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Date values must be a string, an int, or a DateTime object\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/functions.php" , line : 160usize , placeholders : & ["sprintf(\"File not found: %s\", $path)"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/functions.php" , line : 192usize , placeholders : & ["$path"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^File not found: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/functions.php" , line : 287usize , placeholders : & ["$version"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Unknown Guzzle version: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/functions.php" , line : 308usize , placeholders : & ["$version"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Unknown Guzzle version: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/functions.php" , line : 337usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Unable to determine what Guzzle version is installed\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/functions.php" , line : 365usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Calling handler did not serialize request$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/functions.php" , line : 415usize , placeholders : & ["$service"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The service \"(.*)\" is not provided by the AWS SDK for PHP\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/EndpointRegionHelperTrait.php" , line : 90usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidRegionException") , regex : "^Fips is currently not supported with S3 Outposts access points\\. Please provide a non\\-fips region or do not supply an access point ARN\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/EndpointRegionHelperTrait.php" , line : 99usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidRegionException") , regex : "^Fips is currently not supported with cross region requests\\. Please provide a non\\-fips region or supply a matching access point ARN region and client region\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/EndpointRegionHelperTrait.php" , line : 117usize , placeholders : & ["$arn->getRegion()" , "$this->region"] , has_meaningful_message : true , exception : Some ("InvalidRegionException") , regex : "^The region specified in the ARN \\((.*)\\) does not match the client region \\((.*)\\)\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/Crypto/S3EncryptionClientV2.php" , line : 334usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("CryptoException") , regex : "^@SecurityProfile is required and must be set to 'V2' or 'V2_AND_LEGACY'$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/Crypto/CryptoParamsTrait.php" , line : 16usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^An instance of MaterialsProvider must be passed in the \"MaterialsProvider\" field\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/Crypto/CryptoParamsTrait.php" , line : 58usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Could not match the specified string in \"MetadataStrategy\" to a predefined strategy\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/Crypto/CryptoParamsTrait.php" , line : 63usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The metadata strategy that was passed to \"MetadataStrategy\" was unrecognized\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/Crypto/CryptoParamsTraitV2.php" , line : 16usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^An instance of MaterialsProviderInterfaceV2 must be passed in the \"MaterialsProvider\" field\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/Transfer.php" , line : 89usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^You must provide the source argument as a string or provide the \"base_dir\" option\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/Transfer.php" , line : 96usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^source must be the path to a directory or an iterator that yields file names\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/Transfer.php" , line : 102usize , placeholders : & ["$this->sourceMetadata['scheme']" , "$this->destination['scheme']"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^You cannot copy from (.*) to (.*)\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/Transfer.php" , line : 116usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^mup_threshold must be >= 5MB$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/Transfer.php" , line : 123usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^before must be a callable\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/Transfer.php" , line : 170usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Scheme must be \"s3\" or \"file\"\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/Transfer.php" , line : 266usize , placeholders : & ["$objectKey"] , has_meaningful_message : true , exception : Some ("AwsException") , regex : "^Cannot download key (.*), its relative path resolves outside the parent directory$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/Transfer.php" , line : 275usize , placeholders : & ["$dir"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Could not create dir: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/Transfer.php" , line : 419usize , placeholders : & ["$operation"] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^Transfer encountered an unexpected operation: (.*)\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/RegionalEndpoint/Configuration.php" , line : 12usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Configuration parameter must either be 'legacy' or 'regional'\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/RegionalEndpoint/ConfigurationProvider.php" , line : 192usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Not a valid S3 regional endpoint configuration argument\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/BatchDelete.php" , line : 154usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^before must be callable$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/BatchDelete.php" , line : 161usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^batch_size is not > 0$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/BatchDelete.php" , line : 200usize , placeholders : & ["$result['Deleted'] ?: []"] , has_meaningful_message : false , exception : Some ("DeleteMultipleObjectsException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/S3MultiRegionClient.php" , line : 307usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The S3\\\\MultiRegionClient cannot create presigned requests for commands without a specified bucket\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/S3UriParser.php" , line : 62usize , placeholders : & ["$uri"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^No hostname found in URI: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/MultipartUploadingTrait.php" , line : 89usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The part size must be no less than 5 MB and no greater than 5 GB\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/StreamWrapper.php" , line : 305usize , placeholders : & ["$path"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^File or directory not found: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/StreamWrapper.php" , line : 655usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^No client in stream context$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/BucketEndpointArnMiddleware.php" , line : 88usize , placeholders : & ["$cmd->getName()"] , has_meaningful_message : true , exception : Some ("S3Exception") , regex : "^ARN values cannot be used in the bucket field for the (.*) operation\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/BucketEndpointArnMiddleware.php" , line : 138usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : Some ("S3Exception") , regex : "^Bucket parameter parsed as ARN and failed with: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/BucketEndpointArnMiddleware.php" , line : 208usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("UnresolvedEndpointException") , regex : "^Dualstack is currently not supported with S3 Outposts access points\\. Please disable dualstack or do not supply an access point ARN\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/BucketEndpointArnMiddleware.php" , line : 216usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("UnresolvedEndpointException") , regex : "^Accelerate is currently not supported with access points\\. Please disable accelerate or do not supply an access point ARN\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/BucketEndpointArnMiddleware.php" , line : 224usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("UnresolvedEndpointException") , regex : "^Path\\-style addressing is currently not supported with access points\\. Please disable path\\-style or do not supply an access point ARN\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/BucketEndpointArnMiddleware.php" , line : 234usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("UnresolvedEndpointException") , regex : "^A custom endpoint has been supplied along with an access point ARN, and these are not compatible with each other\\. Please only use one or the other\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/BucketEndpointArnMiddleware.php" , line : 244usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("UnresolvedEndpointException") , regex : "^Dualstack is currently not supported with Object Lambda access points\\. Please disable dualstack or do not supply an access point ARN\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/BucketEndpointArnMiddleware.php" , line : 254usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("UnresolvedEndpointException") , regex : "^Global endpoints do not support cross region requests Please enable use_arn_region or do not supply a global region with a different region in the ARN\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/BucketEndpointArnMiddleware.php" , line : 280usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidRegionException") , regex : "^The supplied ARN partition does not match the client's partition\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/BucketEndpointArnMiddleware.php" , line : 284usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidRegionException") , regex : "^The corresponding partition for the supplied ARN region does not match the client's partition\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/BucketEndpointArnMiddleware.php" , line : 299usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArnException") , regex : "^Provided ARN was not a valid S3 access point ARN or S3 Outposts access point ARN\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/PermanentRedirectMiddleware.php" , line : 49usize , placeholders : & ["$result->search('\"@metadata\".effectiveUri')"] , has_meaningful_message : true , exception : Some ("PermanentRedirectException") , regex : "^Encountered a permanent redirect while requesting (.*)\\. Are you sure you are using the correct region for this bucket\\?$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/SSECMiddleware.php" , line : 44usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^You must configure your S3 client to use HTTPS in order to use the SSE\\-C features\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/UseArnRegion/Configuration.php" , line : 15usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ConfigurationException") , regex : "^'use_arn_region' config option must be a boolean value\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/ObjectCopier.php" , line : 137usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Locations provided to an Aws\\\\S3\\\\ObjectCopier must have a non\\-empty Bucket and Key$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/ObjectCopier.php" , line : 148usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Provided ARN was a not a valid S3 access point ARN \\((.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/S3EndpointMiddleware.php" , line : 298usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Outposts \\+ dualstack is not supported$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3/S3EndpointMiddleware.php" , line : 305usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Custom Endpoint \\+ Dualstack not supported$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Signature/SignatureV4.php" , line : 199usize , placeholders : & ["$request->getMethod()"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Expected a POST request but received a (.*) request\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Signature/SignatureV4.php" , line : 229usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("CouldNotCreateChecksumException") , regex : "^sha256$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Signature/SignatureV4.php" , line : 235usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("CouldNotCreateChecksumException") , regex : "^sha256$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Signature/SignatureV4.php" , line : 359usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The expiration date of a signature version 4 presigned URL must be less than one week$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Signature/SignatureProvider.php" , line : 66usize , placeholders : & ["$version" , "$service" , "$region"] , has_meaningful_message : true , exception : Some ("UnresolvedSignatureException") , regex : "^Unable to resolve a signature for (.*)/(.*)/(.*)\\.\nValid signature versions include v4 and anonymous\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/WrappedHttpHandler.php" , line : 83usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Providing a custom HTTP stats receiver to Aws\\\\WrappedHttpHandler is not supported\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/WrappedHttpHandler.php" , line : 165usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^The HTTP handler was rejected without an \"exception\" key value pair\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Rds/AuthTokenGenerator.php" , line : 49usize , placeholders : & ["$lifetime"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Lifetime must be a positive number less than or equal to 15, was (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Waiter.php" , line : 77usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The provided waiter configuration was incomplete\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Waiter.php" , line : 83usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The provided \"before\" callback is not callable\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Api/Validator.php" , line : 65usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Api/DocModel.php" , line : 22usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^The \"tidy\" PHP extension is required\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Api/Serializer/RestSerializer.php" , line : 135usize , placeholders : & ["json_last_error_msg()"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Unable to encode the provided value with 'json_encode'\\. (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Api/Service.php" , line : 97usize , placeholders : & ["$api->getProtocol()"] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^Unknown protocol: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Api/Service.php" , line : 126usize , placeholders : & ["$protocol"] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^Unknown protocol: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Api/Service.php" , line : 154usize , placeholders : & ["$api->getProtocol()"] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^Unknown protocol: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Api/Service.php" , line : 276usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Unknown operation: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Api/Service.php" , line : 400usize , placeholders : & ["$name" , "$this->serviceName"] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^There is no (.*) paginator defined for the (.*) service\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Api/Service.php" , line : 455usize , placeholders : & ["$name" , "$this->serviceName"] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^There is no (.*) waiter defined for the (.*) service\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Api/DateTimeResult.php" , line : 37usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^Invalid timestamp value passed to DateTimeResult::fromISO8601$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Api/DateTimeResult.php" , line : 57usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^Invalid timestamp value passed to DateTimeResult::fromTimestamp$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Api/DateTimeResult.php" , line : 78usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^Invalid timestamp value passed to DateTimeResult::fromTimestamp$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Api/ListShape.php" , line : 25usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^No member attribute specified$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Api/TimestampShape.php" , line : 32usize , placeholders : & ["gettype($value)"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Unable to handle the provided timestamp type: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Api/TimestampShape.php" , line : 44usize , placeholders : & ["$format"] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^Unknown timestamp format: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Api/ApiProvider.php" , line : 85usize , placeholders : & ["$msg"] , has_meaningful_message : false , exception : Some ("UnresolvedApiException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Api/ApiProvider.php" , line : 213usize , placeholders : & ["$modelsDir"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The specified models directory, (.*), was not found\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Api/MapShape.php" , line : 29usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^No value specified$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Api/ShapeMap.php" , line : 46usize , placeholders : & ["$shape"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Shape not found: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Api/Parser/EventParsingIterator.php" , line : 68usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^Failed to parse unknown message type\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Api/Parser/EventParsingIterator.php" , line : 73usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^Failed to parse without event type\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Api/Parser/EventParsingIterator.php" , line : 102usize , placeholders : & ["$event['headers'][':error-code']"] , has_meaningful_message : false , exception : Some ("EventStreamDataException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Api/Parser/Crc32ValidatingParser.php" , line : 31usize , placeholders : & ["$expected" , "$hash"] , has_meaningful_message : true , exception : Some ("AwsException") , regex : "^crc32 mismatch\\. Expected (.*), found (.*)\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Api/Parser/DecodingEventStreamIterator.php" , line : 97usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^Duplicate key in event headers\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Api/Parser/DecodingEventStreamIterator.php" , line : 124usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^Prelude checksum mismatch\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Api/Parser/DecodingEventStreamIterator.php" , line : 140usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^Message length too long\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Api/Parser/DecodingEventStreamIterator.php" , line : 145usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^Headers length too long\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Api/Parser/DecodingEventStreamIterator.php" , line : 163usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^Message checksum mismatch\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Api/Parser/DecodingEventStreamIterator.php" , line : 297usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^Undefined variable length format\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Api/Parser/DecodingEventStreamIterator.php" , line : 307usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^Undefined variable length format\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Api/Parser/XmlParser.php" , line : 152usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^Invalid timestamp value passed to XmlParser::parse_timestamp$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Api/Parser/PayloadParserTrait.php" , line : 21usize , placeholders : & ["json_last_error_msg()"] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^Error parsing JSON: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Api/Parser/PayloadParserTrait.php" , line : 46usize , placeholders : & ["$error->message"] , has_meaningful_message : false , exception : Some ("\\RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Api/Parser/PayloadParserTrait.php" , line : 49usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^Error parsing XML: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Api/StructureShape.php" , line : 64usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Unknown member (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Api/Shape.php" , line : 41usize , placeholders : & ["print_r($definition, true)"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Invalid type: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Api/AbstractModel.php" , line : 54usize , placeholders : & ["$key"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Expected shape definition at (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Sts/RegionalEndpoints/ConfigurationProvider.php" , line : 199usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Not a valid STS regional endpoints configuration argument\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Sts/RegionalEndpoints/Configuration.php" , line : 12usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Configuration parameter must either be 'legacy' or 'regional'\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Sts/StsClient.php" , line : 74usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Result contains no credentials$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/StreamRequestPayloadMiddleware.php" , line : 71usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("IncalculablePayloadException") , regex : "^Payload content length is required and can not be calculated\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Retry/ConfigurationProvider.php" , line : 219usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Not a valid retry configuration argument\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Retry/Configuration.php" , line : 20usize , placeholders : & ["$mode"] , has_meaningful_message : true , exception : Some ("ConfigurationException") , regex : "^'(.*)' is not a valid mode\\. The mode has to be 'legacy', 'standard', or 'adaptive'\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Retry/Configuration.php" , line : 27usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ConfigurationException") , regex : "^The 'maxAttempts' parameter has to be an integer >= 1\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3Control/EndpointArnMiddleware.php" , line : 191usize , placeholders : & ["$cmd['AccountId']" , "$arn->getAccountId()"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The account ID supplied in the command \\((.*)\\) does not match the account ID supplied in the ARN \\((.*)\\)\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3Control/EndpointArnMiddleware.php" , line : 272usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArnException") , regex : "^Provided ARN was not a valid S3 bucket ARN\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3Control/EndpointArnMiddleware.php" , line : 282usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArnException") , regex : "^Provided ARN was not a valid S3 access point ARN\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3Control/EndpointArnMiddleware.php" , line : 299usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("UnresolvedEndpointException") , regex : "^Dualstack is currently not supported with S3 Outposts ARNs\\. Please disable dualstack or do not supply an Outposts ARN\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3Control/EndpointArnMiddleware.php" , line : 323usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidRegionException") , regex : "^The supplied ARN partition does not match the client's partition\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/S3Control/EndpointArnMiddleware.php" , line : 327usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidRegionException") , regex : "^The corresponding partition for the supplied ARN region does not match the client's partition\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/CloudFront/UrlSigner.php" , line : 54usize , placeholders : & ["$url"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid URL: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/CloudFront/UrlSigner.php" , line : 116usize , placeholders : & ["$scheme"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid URI scheme: (.*)\\. Scheme must be one of: http, https, or rtmp$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/CloudFront/CloudFrontClient.php" , line : 208usize , placeholders : & ["$required"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^(.*) is required$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/CloudFront/CloudFrontClient.php" , line : 251usize , placeholders : & ["$required"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^(.*) is required$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/CloudFront/CookieSigner.php" , line : 62usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid or missing URI scheme$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/CloudFront/Signer.php" , line : 27usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^The openssl extension is required to sign CloudFront urls\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/CloudFront/Signer.php" , line : 36usize , placeholders : & ["$privateKey"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^PK file not found: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/CloudFront/Signer.php" , line : 40usize , placeholders : & ["openssl_error_string()"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/CloudFront/Signer.php" , line : 87usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Either a policy or a resource and an expiration time must be provided\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/History.php" , line : 43usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^No commands received$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/History.php" , line : 58usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^No requests received$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/History.php" , line : 73usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^No entries$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/History.php" , line : 86usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^No return value for last entry\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/History.php" , line : 119usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid history ticket$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/History.php" , line : 125usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^History entry is already finished$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/MockHandler.php" , line : 57usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Expected an Aws\\\\ResultInterface or Exception\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/MockHandler.php" , line : 71usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Expected an \\\\Exception or \\\\Throwable\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/MockHandler.php" , line : 84usize , placeholders : & ["$command->getName()" , "$last"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Mock queue is empty\\. Trying to send a (.*) command failed\\.(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/AwsClient.php" , line : 260usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Operation not found: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/AwsClient.php" , line : 275usize , placeholders : & ["static::class"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Instances of (.*) cannot be serialized$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/EndpointDiscovery/EndpointDiscoveryMiddleware.php" , line : 73usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("UnresolvedEndpointException") , regex : "^This operation requires the use of endpoint discovery, but this has been disabled in the configuration\\. Enable endpoint discovery or use a different operation\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/EndpointDiscovery/EndpointDiscoveryMiddleware.php" , line : 82usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("UnresolvedEndpointException") , regex : "^This operation is contradictorily marked both as using endpoint discovery and being the endpoint discovery operation\\. Please verify the accuracy of your model files\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/EndpointDiscovery/EndpointDiscoveryMiddleware.php" , line : 194usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("UnresolvedEndpointException") , regex : "^The endpoint discovery operation yielded a response that did not contain properly formatted endpoint data\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/EndpointDiscovery/EndpointDiscoveryMiddleware.php" , line : 227usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("UnresolvedEndpointException") , regex : "^This command is set to use endpoint discovery, but no endpoint discovery operation was found\\. Please verify the accuracy of your model files\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/EndpointDiscovery/EndpointDiscoveryMiddleware.php" , line : 281usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("AwsException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/EndpointDiscovery/EndpointDiscoveryMiddleware.php" , line : 403usize , placeholders : & ["$endpoint"] , has_meaningful_message : true , exception : Some ("UnresolvedEndpointException") , regex : "^The supplied endpoint '(.*)' is invalid\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/EndpointDiscovery/ConfigurationProvider.php" , line : 237usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Not a valid endpoint_discovery configuration argument\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/EndpointDiscovery/Configuration.php" , line : 13usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^'cache_limit' value must be a positive integer\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/MultiRegionClient.php" , line : 75usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^No valid partition was provided\\. Provide a concrete partition or the name of a partition \\(e\\.g\\., \"aws,\" \"aws\\-cn,\" or \"aws\\-us\\-gov\"\\)\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/AbstractConfigurationProvider.php" , line : 67usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^No providers in chain$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/CommandPool.php" , line : 57usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Each value yielded by the iterator must be an Aws\\\\CommandInterface\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/CommandPool.php" , line : 124usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^before must be callable$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Sdk.php" , line : 582usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Unknown method: (.*)\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Glacier/TreeHash.php" , line : 40usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^You may not add more data to a complete tree hash\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Glacier/TreeHash.php" , line : 70usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^You may not add more checksums to a complete tree hash\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Glacier/MultipartUploader.php" , line : 150usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The part_size must be a power of 2, in megabytes, such that 1 MB <= PART_SIZE <= 4 GB\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Glacier/GlacierClient.php" , line : 142usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("CouldNotCreateChecksumException") , regex : "^sha256$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/EndpointParameterMiddleware.php" , line : 62usize , placeholders : & ["$parameter"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The parameter '(.*)' must be set and not empty\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/EndpointParameterMiddleware.php" , line : 80usize , placeholders : & ["$host"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The supplied parameters result in an invalid hostname: '(.*)'\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Crypto/DecryptionTraitV2.php" , line : 107usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Cannot decrypt a stream of unknown size\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Crypto/DecryptionTraitV2.php" , line : 123usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Cannot decrypt a stream of unknown size\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Crypto/DecryptionTraitV2.php" , line : 157usize , placeholders : & ["$options['@CipherOptions']['Cipher']" , "implode(\", \", $allowedCiphers)"] , has_meaningful_message : true , exception : Some ("CryptoException") , regex : "^The requested object is encrypted with the cipher '(.*)', which is not supported for decryption with the selected security profile\\. This profile allows decryption with: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Crypto/DecryptionTraitV2.php" , line : 173usize , placeholders : & ["$envelope[MetadataEnvelope::KEY_WRAP_ALGORITHM_HEADER]"] , has_meaningful_message : true , exception : Some ("CryptoException") , regex : "^The requested object is encrypted with the keywrap schema '(.*)', which is not supported for decryption with the current security profile\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Crypto/DecryptionTraitV2.php" , line : 187usize , placeholders : & ["$matdesc['aws:x-amz-cek-alg']" , "$envelope[MetadataEnvelope::CONTENT_CRYPTO_SCHEME_HEADER]"] , has_meaningful_message : true , exception : Some ("CryptoException") , regex : "^There is a mismatch in specified content encryption algrithm between the materials description value and the metadata envelope value: (.*) vs\\. (.*)\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Crypto/AesEncryptingStream.php" , line : 116usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^Unrecognized whence\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Crypto/KmsMaterialsProvider.php" , line : 40usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Not able to detect the materials description\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Crypto/KmsMaterialsProvider.php" , line : 50usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Not able to detect kms_cmk_id \\(legacy implementation\\) or aws:x\\-amz\\-cek\\-alg \\(current implementation\\) from kms materials description\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Crypto/AesGcmDecryptingStream.php" , line : 96usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("CryptoException") , regex : "^The requested object could not be decrypted due to an invalid authentication tag\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Crypto/EncryptionTrait.php" , line : 65usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^An encryption cipher must be specified in the \"cipher_options\"\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Crypto/EncryptionTrait.php" , line : 70usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The cipher requested is not supported by the SDK\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Crypto/EncryptionTrait.php" , line : 78usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The cipher \"KeySize\" must be an integer\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Crypto/EncryptionTrait.php" , line : 85usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The cipher \"KeySize\" requested is not supported by AES \\(128, 192, or 256\\)\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Crypto/KmsMaterialsProviderV2.php" , line : 52usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("CryptoException") , regex : "^KMS CMK ID was not specified and the operation is not opted\\-in to attempting to use any valid CMK it discovers\\. Please specify a CMK ID, or explicitly enable attempts to use any valid KMS CMK with the @KmsAllowDecryptWithAnyCmk option\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Crypto/KmsMaterialsProviderV2.php" , line : 71usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("CryptoException") , regex : "^A KMS key id is required for encryption with KMS keywrap\\. Use a KmsMaterialsProviderV2 that has been instantiated with a KMS key id\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Crypto/KmsMaterialsProviderV2.php" , line : 79usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("CryptoException") , regex : "^'@KmsEncryptionContext' is a required argument when using KmsMaterialsProviderV2, and must be an associative array \\(or empty array\\)\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Crypto/KmsMaterialsProviderV2.php" , line : 84usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("CryptoException") , regex : "^Conflict in reserved @KmsEncryptionContext key aws:x\\-amz\\-cek\\-alg\\. This value is reserved for the S3 Encryption Client and cannot be set by the user\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Crypto/Polyfill/ByteArray.php" , line : 51usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Argument must be an integer, string, or array of integers\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Crypto/Cipher/Cbc.php" , line : 50usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Invalid initialization vector$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Crypto/Cipher/Cbc.php" , line : 79usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^CBC initialization only support being rewound, not arbitrary seeking\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Crypto/Cipher/CipherBuilderTrait.php" , line : 68usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("CryptoException") , regex : "^Unrecognized or unsupported AESName for reverse lookup\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Crypto/EncryptionTraitV2.php" , line : 69usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^An encryption cipher must be specified in @CipherOptions\\[\"Cipher\"\\]\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Crypto/EncryptionTraitV2.php" , line : 76usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The cipher requested is not supported by the SDK\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Crypto/EncryptionTraitV2.php" , line : 84usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The cipher \"KeySize\" must be an integer\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Crypto/EncryptionTraitV2.php" , line : 91usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The cipher \"KeySize\" requested is not supported by AES \\(128 or 256\\)\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Crypto/MetadataEnvelope.php" , line : 45usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^MetadataEnvelope fields must must match a predefined offset; use the header constants\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Crypto/DecryptionTrait.php" , line : 100usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Cannot decrypt a stream of unknown size\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Crypto/DecryptionTrait.php" , line : 116usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Cannot decrypt a stream of unknown size\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Crypto/AesDecryptingStream.php" , line : 109usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^AES encryption streams only support being rewound, not arbitrary seeking\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Sqs/SqsClient.php" , line : 204usize , placeholders : & ["sprintf(\n                                            'MD5 mismatch. Expected %s, found %s',\n                                            $msg['MD5OfBody'],\n                                            $bodyMd5\n                                        )"] , has_meaningful_message : false , exception : Some ("SqsException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Sqs/SqsClient.php" , line : 221usize , placeholders : & ["sprintf(\n                                                'Attribute MD5 mismatch. Expected %s, found %s',\n                                                $msg['MD5OfMessageAttributes'],\n                                                $messageAttributesMd5\n                                                    ? $messageAttributesMd5\n                                                    : 'No Attributes'\n                                            )"] , has_meaningful_message : false , exception : Some ("SqsException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Sqs/SqsClient.php" , line : 237usize , placeholders : & ["sprintf(\n                                            'No Attribute MD5 found. Expected %s',\n                                            self::calculateMessageAttributesMd5($msg)\n                                        )"] , has_meaningful_message : false , exception : Some ("SqsException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Arn/AccessPointArn.php" , line : 48usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArnException") , regex : "^The 6th component of an access point ARN represents the resource type and must be 'accesspoint'\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Arn/AccessPointArn.php" , line : 53usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArnException") , regex : "^The 7th component of an access point ARN represents the resource ID and must not be empty\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Arn/AccessPointArn.php" , line : 57usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArnException") , regex : "^The resource ID component of an access point ARN must not contain additional components \\(delimited by ':'\\)\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Arn/AccessPointArn.php" , line : 62usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArnException") , regex : "^The resource ID in an access point ARN must be a valid host label value\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Arn/S3/OutpostsAccessPointArn.php" , line : 72usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArnException") , regex : "^The 3rd component of an S3 Outposts access point ARN represents the service and must be 's3\\-outposts'\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Arn/S3/OutpostsAccessPointArn.php" , line : 81usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArnException") , regex : "^The 6th component of an S3 Outposts access point ARN represents the resource type and must be 'outpost'\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Arn/S3/OutpostsAccessPointArn.php" , line : 87usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArnException") , regex : "^The 7th component of an S3 Outposts access point ARN is required, represents the outpost ID, and must be a valid host label\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Arn/S3/OutpostsAccessPointArn.php" , line : 93usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArnException") , regex : "^The 8th component of an S3 Outposts access point ARN must be 'accesspoint'$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Arn/S3/OutpostsAccessPointArn.php" , line : 98usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArnException") , regex : "^The 9th component of an S3 Outposts access point ARN is required, represents the accesspoint name, and must be a valid host label\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Arn/S3/OutpostsAccessPointArn.php" , line : 104usize , placeholders : & ["$data['resource_extra']"] , has_meaningful_message : true , exception : Some ("InvalidArnException") , regex : "^An S3 Outposts access point ARN should only have 9 components, delimited by the characters ':' and '/'\\. '(.*)' was found after the 9th component\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Arn/S3/OutpostsBucketArn.php" , line : 70usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArnException") , regex : "^The 3rd component of an S3 Outposts bucket ARN represents the service and must be 's3\\-outposts'\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Arn/S3/OutpostsBucketArn.php" , line : 78usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArnException") , regex : "^The 6th component of an S3 Outposts bucket ARN represents the resource type and must be 'outpost'\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Arn/S3/OutpostsBucketArn.php" , line : 84usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArnException") , regex : "^The 7th component of an S3 Outposts bucket ARN is required, represents the outpost ID, and must be a valid host label\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Arn/S3/OutpostsBucketArn.php" , line : 90usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArnException") , regex : "^The 8th component of an S3 Outposts bucket ARN must be 'bucket'$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Arn/S3/OutpostsBucketArn.php" , line : 95usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArnException") , regex : "^The 9th component of an S3 Outposts bucket ARN represents the bucket name and must not be empty\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Arn/S3/AccessPointArn.php" , line : 23usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArnException") , regex : "^The 3rd component of an S3 access point ARN represents the region and must be 's3'\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Arn/Arn.php" , line : 66usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArnException") , regex : "^Constructor accepts a string or an array as an argument\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Arn/Arn.php" , line : 133usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArnException") , regex : "^The 1st component of an ARN must be 'arn'\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Arn/Arn.php" , line : 138usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArnException") , regex : "^The 2nd component of an ARN represents the partition and must not be empty\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Arn/Arn.php" , line : 143usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArnException") , regex : "^The 3rd component of an ARN represents the service and must not be empty\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Arn/Arn.php" , line : 148usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArnException") , regex : "^The 6th component of an ARN represents the resource information and must not be empty\\. Individual service ARNs may include additional delimiters to further qualify resources\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Arn/Arn.php" , line : 158usize , placeholders : & ["$arnName"] , has_meaningful_message : true , exception : Some ("InvalidArnException") , regex : "^The 5th component of a (.*) is required, represents the account ID, and must be a valid host label\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Arn/Arn.php" , line : 167usize , placeholders : & ["$arnName"] , has_meaningful_message : true , exception : Some ("InvalidArnException") , regex : "^The 4th component of a (.*) represents the region and must not be empty\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Endpoint/EndpointProvider.php" , line : 65usize , placeholders : & ["json_encode($args)"] , has_meaningful_message : true , exception : Some ("UnresolvedEndpointException") , regex : "^Unable to resolve an endpoint using the provider arguments: (.*)\\. Note: you can provide an \"endpoint\" option to a client constructor to bypass invoking an endpoint provider\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/Endpoint/Partition.php" , line : 64usize , placeholders : & ["$key"] , has_meaningful_message : true , exception : Some ("Iae") , regex : "^Partition missing required (.*) field$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/InputValidationMiddleware.php" , line : 33usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The mandatory attribute list must be an array of strings$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/InputValidationMiddleware.php" , line : 64usize , placeholders : & ["$commandName" , "$member"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The (.*) operation requires non\\-empty parameter: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/DynamoDb/WriteRequestBatch.php" , line : 70usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^\"batch_size\" must be between 2 and 25\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/DynamoDb/WriteRequestBatch.php" , line : 75usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^\"before\" must be callable\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/DynamoDb/WriteRequestBatch.php" , line : 78usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^\"error\" must be callable\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/DynamoDb/WriteRequestBatch.php" , line : 261usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^There was no table specified\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/DynamoDb/Marshaler.php" , line : 99usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The JSON document must be valid and be an object at its root\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/DynamoDb/Marshaler.php" , line : 298usize , placeholders : & ["$type"] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^Unexpected type: (.*)\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/DynamoDb/Marshaler.php" , line : 318usize , placeholders : & ["$message"] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^Marshaling error: (.*)\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/ClientResolver.php" , line : 383usize , placeholders : & ["$msg"] , has_meaningful_message : false , exception : Some ("IAE") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/ClientResolver.php" , line : 406usize , placeholders : & ["$msg"] , has_meaningful_message : false , exception : Some ("IAE") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/ClientResolver.php" , line : 464usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("IAE") , regex : "^Credentials must be an instance of Aws\\\\Credentials\\\\CredentialsInterface, an associative array that contains \"key\", \"secret\", and an optional \"token\" key\\-value pairs, a credentials provider function, or false\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/ClientResolver.php" , line : 543usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidRegionException") , regex : "^Region must be a valid RFC host label\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/HandlerList.php" , line : 294usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^No handler has been specified$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/aws/aws-sdk-php/src/HandlerList.php" , line : 328usize , placeholders : & ["$findName"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^(.*) not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/cweagans/composer-patches/src/Patches.php" , line : 262usize , placeholders : & ["$msg"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^There was an error in the supplied patches file:(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/cweagans/composer-patches/src/Patches.php" , line : 269usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^There was an error in the supplied patch file$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/cweagans/composer-patches/src/Patches.php" , line : 326usize , placeholders : & ["$description" , "$url"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Cannot apply patch (.*) \\((.*)\\)!$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/cweagans/composer-patches/src/Patches.php" , line : 354usize , placeholders : & ["get_class($operation)"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Unknown operation: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/cweagans/composer-patches/src/Patches.php" , line : 423usize , placeholders : & ["$patch_url"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Cannot apply patch (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/stecman/symfony-console-completion/src/EnvironmentCompletionContext.php" , line : 27usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("\\RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/stecman/symfony-console-completion/src/EnvironmentCompletionContext.php" , line : 41usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Failed to read word breaks from environment; Environment var CMDLINE_WORDBREAKS not set$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/stecman/symfony-console-completion/src/CompletionHandler.php" , line : 106usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^A CompletionContext must be set before requesting completion\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/stecman/symfony-console-completion/src/CompletionCommand.php" , line : 208usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Could not read SHELL environment variable\\. Please specify your shell type using the \\-\\-shell\\-type option\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/stecman/symfony-console-completion/src/HookFactory.php" , line : 139usize , placeholders : & ["sprintf(\n                \"Cannot generate hook for unknown shell type '%s'. Available hooks are: %s\",\n                $type,\n                implode(', ', self::getShellTypes())\n            )"] , has_meaningful_message : false , exception : Some ("\\RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/pear/pear_exception/PEAR/Exception.php" , line : 129usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("PEAR_Exception") , regex : "^exception cause must be Exception, array, or PEAR_Error$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/pear/pear-core-minimal/src/PEAR/ErrorStack.php" , line : 646usize , placeholders : & ["$err['message']"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/cose-lib/src/Algorithm/Signature/RSA/RSA.php" , line : 30usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Unable to sign the data$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php" , line : 56usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Invalid modulus length$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php" , line : 73usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("RuntimeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php" , line : 103usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^Unable to convert the integer$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php" , line : 133usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("RuntimeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php" , line : 156usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php" , line : 159usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php" , line : 165usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php" , line : 172usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/cose-lib/src/Algorithm/Signature/RSA/PSSRSA.php" , line : 175usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/cose-lib/src/Algorithm/Signature/EdDSA/EdDSA.php" , line : 40usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Unsupported curve$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/cose-lib/src/Algorithm/Signature/EdDSA/EdDSA.php" , line : 52usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Unsupported curve$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php" , line : 43usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Invalid signature length\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php" , line : 62usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Unable to convert into ASN\\.1$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php" , line : 74usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Invalid data\\. Should start with a sequence\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php" , line : 87usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Unable to convert from ASN\\.1$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/cose-lib/src/Algorithm/Signature/ECDSA/ECSignature.php" , line : 125usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Invalid data\\. Should contain an integer\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/cose-lib/src/Key/RsaKey.php" , line : 193usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Unable to convert to an integer$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/3rdparty/web-auth/webauthn-lib/src/AuthenticatorAttestationResponseValidator.php" , line : 123usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Checking the authenticator attestation response$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/3rdparty/web-auth/webauthn-lib/src/AuthenticatorAttestationResponseValidator.php" , line : 214usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^The attestation is valid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/3rdparty/web-auth/webauthn-lib/src/AuthenticatorAttestationResponseValidator.php" , line : 215usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Public Key Credential Source$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/web-auth/webauthn-lib/src/AuthenticatorAttestationResponseValidator.php" , line : 219usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^An error occurred$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/3rdparty/web-auth/webauthn-lib/src/AuthenticatorAttestationResponseValidator.php" , line : 262usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^No attestation is asked\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/3rdparty/web-auth/webauthn-lib/src/AuthenticatorAttestationResponseValidator.php" , line : 267usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^The Attestation Statement is anonymous\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/3rdparty/web-auth/webauthn-lib/src/AuthenticatorAttestationResponseValidator.php" , line : 272usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Anonymization required\\. AAGUID and Attestation Statement changed\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/3rdparty/web-auth/webauthn-lib/src/AuthenticatorAttestationResponseValidator.php" , line : 284usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^No attestation returned\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/3rdparty/web-auth/webauthn-lib/src/AuthenticatorAttestationResponseValidator.php" , line : 287usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Anonymization required\\. AAGUID and Attestation Statement changed\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/webauthn-lib/src/AuthenticatorAttestationResponseValidator.php" , line : 335usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^The authenticator is compromised and cannot be used$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/webauthn-lib/src/AuthenticatorAttestationResponseValidator.php" , line : 367usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Invalid attestation type$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/webauthn-lib/src/CertificateChainChecker/OpenSSLCertificateChainChecker.php" , line : 98usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Invalid certificate or certificate chain$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/webauthn-lib/src/CertificateChainChecker/OpenSSLCertificateChainChecker.php" , line : 148usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Invalid certificate or certificate chain$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/webauthn-lib/src/CertificateChainChecker/OpenSSLCertificateChainChecker.php" , line : 193usize , placeholders : & ["sprintf('Directory \"%s\" was not created', $caDir)"] , has_meaningful_message : false , exception : Some ("RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/webauthn-lib/src/PublicKeyCredentialSource.php" , line : 218usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Unable to load the data$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/web-auth/webauthn-lib/src/Counter/ThrowExceptionIfInvalid.php" , line : 39usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^The counter is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/webauthn-lib/src/TrustPath/TrustPathLoader.php" , line : 43usize , placeholders : & ["sprintf('The trust path type \"%s\" is not supported', $data['type'])"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/webauthn-lib/src/CertificateToolbox.php" , line : 64usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Invalid certificate or certificate chain$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/webauthn-lib/src/CertificateToolbox.php" , line : 98usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Invalid certificate or certificate chain$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/webauthn-lib/src/CertificateToolbox.php" , line : 199usize , placeholders : & ["sprintf('Directory \"%s\" was not created', $caDir)"] , has_meaningful_message : false , exception : Some ("RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/3rdparty/web-auth/webauthn-lib/src/AuthenticatorAssertionResponseValidator.php" , line : 97usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Checking the authenticator assertion response$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/3rdparty/web-auth/webauthn-lib/src/AuthenticatorAssertionResponseValidator.php" , line : 211usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^The assertion is valid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/3rdparty/web-auth/webauthn-lib/src/AuthenticatorAssertionResponseValidator.php" , line : 212usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Public Key Credential Source$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/web-auth/webauthn-lib/src/AuthenticatorAssertionResponseValidator.php" , line : 216usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^An error occurred$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/3rdparty/web-auth/webauthn-lib/src/PublicKeyCredentialLoader.php" , line : 82usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Trying to load data from an array$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/3rdparty/web-auth/webauthn-lib/src/PublicKeyCredentialLoader.php" , line : 102usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^The data has been loaded$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/3rdparty/web-auth/webauthn-lib/src/PublicKeyCredentialLoader.php" , line : 103usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Public Key Credential$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/web-auth/webauthn-lib/src/PublicKeyCredentialLoader.php" , line : 107usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^An error occurred$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/3rdparty/web-auth/webauthn-lib/src/PublicKeyCredentialLoader.php" , line : 116usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Trying to load data from a string$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/web-auth/webauthn-lib/src/PublicKeyCredentialLoader.php" , line : 122usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^An error occurred$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/webauthn-lib/src/PublicKeyCredentialLoader.php" , line : 178usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Unable to create the response object$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/webauthn-lib/src/AttestationStatement/AndroidSafetyNetAttestationStatementSupport.php" , line : 76usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^The algorithm RS256 is missing\\. Did you forget to install the package web\\-token/jwt\\-signature\\-algorithm\\-rsa\\?$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/webauthn-lib/src/AttestationStatement/AndroidSafetyNetAttestationStatementSupport.php" , line : 79usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^The class Jose\\\\Component\\\\KeyManagement\\\\JWKFactory is missing\\. Did you forget to install the package web\\-token/jwt\\-key\\-mgmt\\?$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/webauthn-lib/src/AttestationStatement/AndroidSafetyNetAttestationStatementSupport.php" , line : 256usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Unrecognized response$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/webauthn-lib/src/AttestationStatement/TPMAttestationStatementSupport.php" , line : 98usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Unsupported attestation statement$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/webauthn-lib/src/AttestationStatement/TPMAttestationStatementSupport.php" , line : 121usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Invalid or unsupported key type\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/webauthn-lib/src/AttestationStatement/TPMAttestationStatementSupport.php" , line : 225usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Unsupported type$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/webauthn-lib/src/AttestationStatement/TPMAttestationStatementSupport.php" , line : 246usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Unsupported hash algorithm$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/webauthn-lib/src/AttestationStatement/TPMAttestationStatementSupport.php" , line : 307usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^ECDAA not supported$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/webauthn-lib/src/AttestationStatement/PackedAttestationStatementSupport.php" , line : 90usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Unsupported attestation statement$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/webauthn-lib/src/AttestationStatement/PackedAttestationStatementSupport.php" , line : 167usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^ECDAA not supported$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/webauthn-lib/src/AttestationStatement/PackedAttestationStatementSupport.php" , line : 188usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^Invalid algorithm$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/3rdparty/web-auth/webauthn-lib/src/AttestationStatement/AttestationObjectLoader.php" , line : 76usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Trying to load the data$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/3rdparty/web-auth/webauthn-lib/src/AttestationStatement/AttestationObjectLoader.php" , line : 81usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Loading the Attestation Statement$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/3rdparty/web-auth/webauthn-lib/src/AttestationStatement/AttestationObjectLoader.php" , line : 93usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Attestation Statement loaded$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/3rdparty/web-auth/webauthn-lib/src/AttestationStatement/AttestationObjectLoader.php" , line : 94usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Attestation Statement loaded$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/3rdparty/web-auth/webauthn-lib/src/AttestationStatement/AttestationObjectLoader.php" , line : 101usize , placeholders : & ["sprintf('Signature counter: %d', $signCount)"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/3rdparty/web-auth/webauthn-lib/src/AttestationStatement/AttestationObjectLoader.php" , line : 105usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Attested Credential Data is present$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/3rdparty/web-auth/webauthn-lib/src/AttestationStatement/AttestationObjectLoader.php" , line : 113usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Attested Credential Data loaded$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/3rdparty/web-auth/webauthn-lib/src/AttestationStatement/AttestationObjectLoader.php" , line : 114usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Attested Credential Data loaded$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/3rdparty/web-auth/webauthn-lib/src/AttestationStatement/AttestationObjectLoader.php" , line : 119usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Extension Data loaded$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/3rdparty/web-auth/webauthn-lib/src/AttestationStatement/AttestationObjectLoader.php" , line : 122usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Extension Data loaded$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/3rdparty/web-auth/webauthn-lib/src/AttestationStatement/AttestationObjectLoader.php" , line : 123usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Extension Data loaded$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/3rdparty/web-auth/webauthn-lib/src/AttestationStatement/AttestationObjectLoader.php" , line : 130usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Attestation Object loaded$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/3rdparty/web-auth/webauthn-lib/src/AttestationStatement/AttestationObjectLoader.php" , line : 131usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Attestation Object$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/web-auth/webauthn-lib/src/AttestationStatement/AttestationObjectLoader.php" , line : 135usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^An error occurred$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/webauthn-lib/src/AttestationStatement/FidoU2FAttestationStatementSupport.php" , line : 109usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Invalid certificate or certificate chain$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/webauthn-lib/src/CollectedClientData.php" , line : 122usize , placeholders : & ["sprintf('The key \"%s\" is missing', $key)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/webauthn-lib/src/CollectedClientData.php" , line : 137usize , placeholders : & ["sprintf('The key \"%s\" is missing', $key)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/metadata-service/src/MetadataService.php" , line : 138usize , placeholders : & ["sprintf('The Metadata Statement with AAGUID \"%s\" is missing', $aaguid)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/3rdparty/web-auth/metadata-service/src/MetadataService.php" , line : 151usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Trying to get the metadata statement for a given entry$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/metadata-service/src/MetadataService.php" , line : 156usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^The Metadata Statement has not been published$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/3rdparty/web-auth/metadata-service/src/MetadataService.php" , line : 160usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^The metadata statement exists$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/3rdparty/web-auth/metadata-service/src/MetadataService.php" , line : 161usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Metadata Statement$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/web-auth/metadata-service/src/MetadataService.php" , line : 165usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^An error occurred$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/3rdparty/web-auth/metadata-service/src/MetadataService.php" , line : 182usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Trying to get the metadata service TOC payload$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/3rdparty/web-auth/metadata-service/src/MetadataService.php" , line : 186usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^The TOC payload has been received$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/3rdparty/web-auth/metadata-service/src/MetadataService.php" , line : 187usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^TOC payload$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/web-auth/metadata-service/src/MetadataService.php" , line : 191usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^An error occurred$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/metadata-service/src/Version.php" , line : 37usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^Invalid data\\. Must contain at least one item$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/metadata-service/src/MetadataStatement.php" , line : 445usize , placeholders : & ["sprintf('The parameter \"%s\" is missing', $key)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/metadata-service/src/MetadataTOCPayloadEntry.php" , line : 72usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^Authenticators cannot support both AAID and AAGUID$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/web-auth/metadata-service/src/MetadataTOCPayloadEntry.php" , line : 75usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^If neither AAID nor AAGUID are set, the attestation certificate identifier list shall not be empty$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/brick/math/src/BigDecimal.php" , line : 84usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The scale cannot be negative\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/brick/math/src/BigDecimal.php" , line : 266usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Scale cannot be negative\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/brick/math/src/BigDecimal.php" , line : 346usize , placeholders : & ["\\sprintf(\n                'The exponent %d is not in the range 0 to %d.',\n                $exponent,\n                Calculator::MAX_POWER\n            )"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/brick/math/src/BigDecimal.php" , line : 457usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Scale cannot be negative\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/brick/math/src/BigDecimal.php" , line : 465usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NegativeNumberException") , regex : "^Cannot calculate the square root of a negative number\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/brick/math/src/BigDecimal.php" , line : 782usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^unserialize\\(\\) is an internal function, it must not be called directly\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/brick/math/src/BigRational.php" , line : 393usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RoundingNecessaryException") , regex : "^This rational number cannot be represented as an integer value without rounding\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/brick/math/src/BigRational.php" , line : 481usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^unserialize\\(\\) is an internal function, it must not be called directly\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/brick/math/src/BigNumber.php" , line : 74usize , placeholders : & ["\\sprintf(\n                'The given value \"%s\" does not represent a valid number.',\n                $value\n            )"] , has_meaningful_message : false , exception : Some ("NumberFormatException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/brick/math/src/BigNumber.php" , line : 131usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NumberFormatException") , regex : "^Exponent too large\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/brick/math/src/BigNumber.php" , line : 223usize , placeholders : & ["__METHOD__"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)\\(\\) expects at least one value\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/brick/math/src/BigNumber.php" , line : 257usize , placeholders : & ["__METHOD__"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)\\(\\) expects at least one value\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/brick/math/src/BigNumber.php" , line : 290usize , placeholders : & ["__METHOD__"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)\\(\\) expects at least one value\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/brick/math/src/BigInteger.php" , line : 84usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NumberFormatException") , regex : "^The number cannot be empty\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/brick/math/src/BigInteger.php" , line : 88usize , placeholders : & ["\\sprintf('Base %d is not in range 2 to 36.', $base)"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/brick/math/src/BigInteger.php" , line : 102usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NumberFormatException") , regex : "^The number cannot be empty\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/brick/math/src/BigInteger.php" , line : 120usize , placeholders : & ["\\sprintf('\"%s\" is not a valid character in base %d.', $matches[0], $base)"] , has_meaningful_message : false , exception : Some ("NumberFormatException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/brick/math/src/BigInteger.php" , line : 151usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NumberFormatException") , regex : "^The number cannot be empty\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/brick/math/src/BigInteger.php" , line : 157usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The alphabet must contain at least 2 chars\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/brick/math/src/BigInteger.php" , line : 193usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NumberFormatException") , regex : "^The byte string must not be empty\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/brick/math/src/BigInteger.php" , line : 234usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The number of bits cannot be negative\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/brick/math/src/BigInteger.php" , line : 280usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("MathException") , regex : "^\\$min cannot be greater than \\$max\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/brick/math/src/BigInteger.php" , line : 486usize , placeholders : & ["\\sprintf(\n                'The exponent %d is not in the range 0 to %d.',\n                $exponent,\n                Calculator::MAX_POWER\n            )"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/brick/math/src/BigInteger.php" , line : 621usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NegativeNumberException") , regex : "^Modulus must not be negative\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/brick/math/src/BigInteger.php" , line : 631usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("MathException") , regex : "^Unable to compute the modInverse for the given modulus\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/brick/math/src/BigInteger.php" , line : 656usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NegativeNumberException") , regex : "^The operands cannot be negative\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/brick/math/src/BigInteger.php" , line : 706usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NegativeNumberException") , regex : "^Cannot calculate the square root of a negative number\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/brick/math/src/BigInteger.php" , line : 916usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The bit to test cannot be negative\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/brick/math/src/BigInteger.php" , line : 1016usize , placeholders : & ["\\sprintf('Base %d is out of range [2, 36]', $base)"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/brick/math/src/BigInteger.php" , line : 1040usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The alphabet must contain at least 2 chars\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/brick/math/src/BigInteger.php" , line : 1044usize , placeholders : & ["__FUNCTION__"] , has_meaningful_message : true , exception : Some ("NegativeNumberException") , regex : "^(.*)\\(\\) does not support negative numbers\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/brick/math/src/BigInteger.php" , line : 1073usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NegativeNumberException") , regex : "^Cannot convert a negative number to a byte string when \\$signed is false\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/brick/math/src/BigInteger.php" , line : 1146usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^unserialize\\(\\) is an internal function, it must not be called directly\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/brick/math/src/Internal/Calculator/NativeCalculator.php" , line : 47usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^The platform is not 32\\-bit or 64\\-bit as expected\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/brick/math/src/Internal/Calculator.php" , line : 558usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid rounding mode\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/brick/math/src/Internal/Calculator.php" , line : 666usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid bitwise operator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/Builder/Class_.php" , line : 101usize , placeholders : & ["sprintf('Unexpected node of type \"%s\"', $stmt->getType())"] , has_meaningful_message : false , exception : Some ("\\LogicException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/Builder/FunctionLike.php" , line : 38usize , placeholders : & ["sprintf('Expected parameter node, got \"%s\"', $param->getType())"] , has_meaningful_message : false , exception : Some ("\\LogicException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/Builder/Trait_.php" , line : 42usize , placeholders : & ["sprintf('Unexpected node of type \"%s\"', $stmt->getType())"] , has_meaningful_message : false , exception : Some ("\\LogicException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/Builder/Param.php" , line : 54usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Parameter type cannot be void$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/Builder/TraitUseAdaptation.php" , line : 53usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Cannot set alias for not alias adaptation buider$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/Builder/TraitUseAdaptation.php" , line : 100usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Precedence adaptation must have trait$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/Builder/TraitUseAdaptation.php" , line : 107usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Cannot add overwritten traits for not precedence adaptation buider$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/Builder/TraitUseAdaptation.php" , line : 123usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Cannot set access modifier for not alias adaptation buider$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/Builder/TraitUseAdaptation.php" , line : 129usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Multiple access type modifiers are not allowed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/Builder/TraitUseAdaptation.php" , line : 145usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Type of adaptation is not defined$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/Builder/TraitUse.php" , line : 49usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Adaptation must have type TraitUseAdaptation$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/Builder/Interface_.php" , line : 58usize , placeholders : & ["sprintf('Unexpected node of type \"%s\"', $stmt->getType())"] , has_meaningful_message : false , exception : Some ("\\LogicException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/Builder/Method.php" , line : 78usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Cannot make method with statements abstract$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/Builder/Method.php" , line : 107usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Cannot add statements to an abstract method$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/BuilderFactory.php" , line : 196usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Variable name must be string or Expr$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/BuilderFactory.php" , line : 335usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Expected at least two expressions$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/BuilderFactory.php" , line : 358usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Expected string or Expr$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/NodeTraverser.php" , line : 138usize , placeholders : & ["gettype($return)"] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^enterNode\\(\\) returned invalid value of type (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/NodeTraverser.php" , line : 163usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^leaveNode\\(\\) may only return an array if the parent structure is an array$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/NodeTraverser.php" , line : 168usize , placeholders : & ["gettype($return)"] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^leaveNode\\(\\) returned invalid value of type (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/NodeTraverser.php" , line : 215usize , placeholders : & ["gettype($return)"] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^enterNode\\(\\) returned invalid value of type (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/NodeTraverser.php" , line : 246usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^bool\\(false\\) return from leaveNode\\(\\) no longer supported\\. Return NodeTraverser::REMOVE_NODE instead$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/NodeTraverser.php" , line : 251usize , placeholders : & ["gettype($return)"] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^leaveNode\\(\\) returned invalid value of type (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/NodeTraverser.php" , line : 262usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Invalid node structure: Contains nested arrays$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/NodeTraverser.php" , line : 277usize , placeholders : & ["$old->getType()" , "$new->getType()"] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Trying to replace statement \\((.*)\\) with expression \\((.*)\\)\\. Are you missing a Stmt_Expression wrapper\\?$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/NodeTraverser.php" , line : 285usize , placeholders : & ["$old->getType()" , "$new->getType()"] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Trying to replace expression \\((.*)\\) with statement \\((.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/BuilderHelpers.php" , line : 34usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Expected node or builder object$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/BuilderHelpers.php" , line : 56usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Expected statement or expression node$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/BuilderHelpers.php" , line : 75usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Expected string or instance of Node\\\\Identifier$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/BuilderHelpers.php" , line : 94usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Expected string or instance of Node\\\\Identifier or Node\\\\Expr$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/BuilderHelpers.php" , line : 132usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Name cannot be empty$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/BuilderHelpers.php" , line : 148usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Name must be a string or an instance of Node\\\\Name or Node\\\\Expr$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/BuilderHelpers.php" , line : 152usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Name must be a string or an instance of Node\\\\Name$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/BuilderHelpers.php" , line : 172usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Type must be a string, or an instance of Name, Identifier, NullableType or UnionType$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/BuilderHelpers.php" , line : 197usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^void type cannot be nullable$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/BuilderHelpers.php" , line : 201usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^mixed type cannot be nullable$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/BuilderHelpers.php" , line : 252usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Invalid value$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/BuilderHelpers.php" , line : 269usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Doc comment must be a string or an instance of PhpParser\\\\Comment\\\\Doc$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/JsonDecoder.php" , line : 13usize , placeholders : & ["json_last_error_msg()"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^JSON decoding error: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/JsonDecoder.php" , line : 43usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Node type must be a string$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/JsonDecoder.php" , line : 52usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Attributes must be an array$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/JsonDecoder.php" , line : 72usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Comment must have text$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/JsonDecoder.php" , line : 101usize , placeholders : & ["$nodeType"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Unknown node type \"(.*)\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/ParserFactory.php" , line : 39usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Kind must be one of ::PREFER_PHP7, ::PREFER_PHP5, ::ONLY_PHP7 or ::ONLY_PHP5$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/ParserAbstract.php" , line : 135usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^\"throwOnError\" is no longer supported, use \"errorHandler\" instead$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/ParserAbstract.php" , line : 217usize , placeholders : & ["sprintf(\n                            'The lexer returned an invalid token (id=%d, value=%s)',\n                            $tokenId, $tokenValue\n                        )"] , has_meaningful_message : false , exception : Some ("\\RangeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/ParserAbstract.php" , line : 372usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Reached end of parser loop$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/NodeDumper.php" , line : 105usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Can only dump nodes and arrays\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/NodeDumper.php" , line : 193usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Invalid position information$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/Parser/Php7.php" , line : 1432usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Error") , regex : "^__HALT_COMPILER\\(\\) can only be used from the outermost scope$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/Parser/Php5.php" , line : 1320usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Error") , regex : "^__HALT_COMPILER\\(\\) can only be used from the outermost scope$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/Error.php" , line : 112usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Error does not have column information$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/Error.php" , line : 126usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Error does not have column information$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/Error.php" , line : 157usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Invalid position information$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/ConstExprEvaluator.php" , line : 41usize , placeholders : & ["$expr->getType()"] , has_meaningful_message : true , exception : Some ("ConstExprEvaluationException") , regex : "^Expression of type (.*) cannot be evaluated$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/ConstExprEvaluator.php" , line : 66usize , placeholders : & ["$str"] , has_meaningful_message : false , exception : Some ("\\ErrorException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/ConstExprEvaluator.php" , line : 213usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Should not happen$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php" , line : 886usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Shouldn't happen$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php" , line : 988usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Cannot happen$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/Node/Scalar/String_.php" , line : 135usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Error") , regex : "^Invalid UTF\\-8 codepoint escape sequence: Codepoint too large$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/Node/Scalar/LNumber.php" , line : 62usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Error") , regex : "^Invalid numeric literal$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/Node/Name.php" , line : 158usize , placeholders : & ["sprintf('Offset %d is out of bounds', $offset)"] , has_meaningful_message : false , exception : Some ("\\OutOfBoundsException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/Node/Name.php" , line : 166usize , placeholders : & ["sprintf('Length %d is out of bounds', $length)"] , has_meaningful_message : false , exception : Some ("\\OutOfBoundsException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/Node/Name.php" , line : 220usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Name cannot be empty$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/Node/Name.php" , line : 226usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Name cannot be empty$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/Node/Name.php" , line : 234usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Expected string, array of parts or Name instance$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/Node/Stmt/Class_.php" , line : 84usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Error") , regex : "^Multiple access type modifiers are not allowed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/Node/Stmt/Class_.php" , line : 88usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Error") , regex : "^Multiple abstract modifiers are not allowed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/Node/Stmt/Class_.php" , line : 92usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Error") , regex : "^Multiple static modifiers are not allowed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/Node/Stmt/Class_.php" , line : 96usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Error") , regex : "^Multiple final modifiers are not allowed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/Node/Stmt/Class_.php" , line : 100usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Error") , regex : "^Cannot use the final modifier on an abstract class member$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php" , line : 146usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Invalid string kind$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php" , line : 194usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Invalid number kind$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php" , line : 224usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Cannot directly print EncapsedStringPart$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php" , line : 555usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Cannot pretty\\-print AST with Error nodes$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/Internal/Differ.php" , line : 81usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Should not happen$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/Internal/TokenStream.php" , line : 116usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Encountered unexpected token$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/Internal/TokenStream.php" , line : 133usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Encountered unexpected token$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/Lexer.php" , line : 367usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Reached end of lexer loop$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/Lexer.php" , line : 397usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Error") , regex : "^__HALT_COMPILER must be followed by \"\\(\\);\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/nikic/php-parser/lib/PhpParser/Lexer.php" , line : 438usize , placeholders : & ["sprintf(\n                        'Token %s has same ID as token %s, ' .\n                        'you may be using a library with broken token emulation',\n                        $token, $clashingToken\n                    )"] , has_meaningful_message : false , exception : Some ("\\Error") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/egulias/email-validator/src/EmailLexer.php" , line : 196usize , placeholders : & ["$type"] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^(.*) not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/egulias/email-validator/src/Validation/Extra/SpoofCheckValidation.php" , line : 21usize , placeholders : & ["sprintf('The %s class requires the Intl extension.', __CLASS__)"] , has_meaningful_message : false , exception : Some ("\\LogicException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/egulias/email-validator/src/Validation/MultipleValidationWithAnd.php" , line : 51usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("EmptyValidationList") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/egulias/email-validator/src/Validation/DNSCheckValidation.php" , line : 39usize , placeholders : & ["sprintf('The %s class requires the Intl extension.', __CLASS__)"] , has_meaningful_message : false , exception : Some ("\\LogicException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/egulias/email-validator/src/Validation/DNSCheckValidation.php" , line : 127usize , placeholders : & ["$errorMessage"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Unable to get DNS record for the host: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/deepdiver1975/tarstreamer/src/TarStreamer.php" , line : 55usize , placeholders : & ["$encodedArchiveName" , "$headerFile" , "$headerLine"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Unable to send file (.*)\\. HTML Headers have already been sent from (.*) in line (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/deepdiver1975/tarstreamer/src/TarStreamer.php" , line : 59usize , placeholders : & ["$encodedArchiveName"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Unable to send file (.*)\\. Output buffer already contains text \\(typically warnings or errors\\)\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/scss.inc.php" , line : 4usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^scssphp requires PHP 5\\.6 or above$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 498usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 553usize , placeholders : & ["$this->addLocationToMessage($e->getMessage())"] , has_meaningful_message : false , exception : Some ("CompilerException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 752usize , placeholders : & ["$origin" , "$target" , "$target"] , has_meaningful_message : true , exception : None , regex : "^\"(.*)\" failed to @extend \"(.*)\"\\. The selector \"(.*)\" was not found\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 1921usize , placeholders : & ["$this->addLocationToMessage($e->getMessage())"] , has_meaningful_message : true , exception : None , regex : "^Ignoring interpolation errors in multiline comments is deprecated and will be removed in ScssPhp 2\\.0\\. (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 1924usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Ignoring interpolation errors in multiline comments is deprecated and will be removed in ScssPhp 2\\.0\\. (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 1973usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 2261usize , placeholders : & ["$msg"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 2331usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^@return may only be used within a function$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 3057usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Parent selectors aren't allowed here\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 3064usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^complex selectors may not be extended\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 3087usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 3217usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : None , regex : "^Undefined mixin (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 3274usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : None , regex : "^@mixin (.*)\\(\\) without parentEnv$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 3321usize , placeholders : & ["$fname" , "$line" , "$value"] , has_meaningful_message : true , exception : None , regex : "^(.*):(.*) DEBUG: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 3331usize , placeholders : & ["$value" , "$line" , "$fname"] , has_meaningful_message : true , exception : None , regex : "^(.*)\n         on line (.*) of (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 3341usize , placeholders : & ["$fname" , "$line" , "$value"] , has_meaningful_message : true , exception : None , regex : "^File (.*) on line (.*) ERROR: (.*)\n$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 3344usize , placeholders : & ["$child[0]"] , has_meaningful_message : true , exception : None , regex : "^unknown child type: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 4152usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^color: Can't take modulo by zero$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 4160usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^color: Can't divide by zero$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 4173usize , placeholders : & ["$op"] , has_meaningful_message : true , exception : None , regex : "^color: unknown op (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 4707usize , placeholders : & ["json_encode($value)"] , has_meaningful_message : true , exception : None , regex : "^unknown value type: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 4762usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The argument is not a sass string\\. Did you forgot to use \"assertString\"\\?$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 5255usize , placeholders : & ["$name" , "($maxDepth <= 0 ? ' (infinite recursion)' : '')"] , has_meaningful_message : true , exception : None , regex : "^Undefined variable \\$(.*)(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 5493usize , placeholders : & ["sprintf('Invalid output style \"%s\".', $style)"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 5662usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^The Sass indented syntax is not implemented\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 5801usize , placeholders : & ["$url"] , has_meaningful_message : true , exception : None , regex : "^`(.*)` file not found for @import$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 5850usize , placeholders : & ["implode(\"\\n\", $formattedPrettyPaths)"] , has_meaningful_message : true , exception : None , regex : "^It's not clear which file to import\\. Found:\n(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 6010usize , placeholders : & ["...func_get_args()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 6075usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Error: Only %d arguments allowed in %s\\(\\), but %d were passed\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 6088usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Error: %s\\(\\) argument%s %s missing\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 6152usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^An @import loop has been found: %s imports %s$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 6189usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : None , regex : "^@function (.*)\\(\\) without parentEnv$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 6406usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The argument declaration is invalid\\. The rest argument must be the last one\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 6560usize , placeholders : & ["sprintf('Argument $%s was passed both by position and by name.', $originalName)"] , has_meaningful_message : false , exception : Some ("SassScriptException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 6565usize , placeholders : & ["sprintf('Missing argument $%s', $originalName)"] , has_meaningful_message : false , exception : Some ("SassScriptException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 6583usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("SassScriptException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 6588usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 6600usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("SassScriptException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 6645usize , placeholders : & ["sprintf('Duplicate named argument $%s.', $arg[0][1])"] , has_meaningful_message : false , exception : Some ("SassScriptException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 6671usize , placeholders : & ["sprintf('Duplicate named argument $%s.', $name)"] , has_meaningful_message : false , exception : Some ("SassScriptException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 6688usize , placeholders : & ["sprintf('Duplicate named argument $%s.', $name)"] , has_meaningful_message : false , exception : Some ("SassScriptException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 6706usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("SassScriptException") , regex : "^Positional arguments must come before keyword arguments\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 7189usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Expected %s to have no units or \"%%\"\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 7322usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^expecting list, %s received$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 7343usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The argument is not a sass argument list\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 7654usize , placeholders : & ["$functionReference[0]"] , has_meaningful_message : true , exception : None , regex : "^Function reference expected, got (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 7824usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("SassScriptException") , regex : "^Only one positional argument is allowed\\. All other arguments must be passed by name\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 7850usize , placeholders : & ["$name" , "$number"] , has_meaningful_message : true , exception : None , regex : "^(.*) Passing a number `(.*)` without unit % is deprecated\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 7851usize , placeholders : & ["$warning->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 7892usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("SassScriptException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 7901usize , placeholders : & ["sprintf('RGB parameters may not be passed along with %s parameters.', $hasWB ? 'HWB' : 'HSL')"] , has_meaningful_message : false , exception : Some ("SassScriptException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 7905usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("SassScriptException") , regex : "^HSL parameters may not be passed along with HWB parameters\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 8011usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Error: argument `\\$color` of `ie\\-hex\\-str\\(\\$color\\)` must be a color$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 8025usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Error: argument `\\$color` of `red\\(\\$color\\)` must be a color$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 8037usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Error: argument `\\$color` of `green\\(\\$color\\)` must be a color$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 8049usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Error: argument `\\$color` of `blue\\(\\$color\\)` must be a color$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 8140usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("SassScriptException") , regex : "^Missing argument \\$lightness\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 8462usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("SassScriptException") , regex : "^Only one argument may be passed to the plain\\-CSS invert\\(\\) function\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 8528usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 8609usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^At least one argument must be passed\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 8632usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^At least one argument must be passed\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 8691usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Invalid argument for \"n\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 9046usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Invalid argument\\(s\\) for \"comparable\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 9275usize , placeholders : & ["$n"] , has_meaningful_message : true , exception : Some ("SassScriptException") , regex : "^\\$limit: Must be greater than 0, was (.*)\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 9463usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Invalid super selector for isSuperSelector\\(\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 9467usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Invalid sub selector for isSuperSelector\\(\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 9567usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^selector\\-append\\(\\) needs at least 1 argument$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 9592usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Invalid selector list in selector\\-append\\(\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 9599usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Invalid selector list in selector\\-append\\(\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 9642usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^selector\\-extend\\(\\) invalid arguments$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 9663usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^selector\\-replace\\(\\) invalid arguments$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 9692usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Can't extend complex selector\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 9730usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^selector\\-nest\\(\\) needs at least 1 argument$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 9775usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^selector\\-unify\\(\\) invalid arguments$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/3rdparty/scssphp/scssphp/src/Compiler.php" , line : 10070usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^The \"scssphp\\-glob\" function is deprecated an will be removed in ScssPhp 2\\.0\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/Util.php" , line : 47usize , placeholders : & ["$name" , "$val"] , has_meaningful_message : true , exception : Some ("RangeException") , regex : "^(.*) (.*) is not a number\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/Util.php" , line : 62usize , placeholders : & ["$name" , "$val" , "$range->first" , "$range->last" , "$unit"] , has_meaningful_message : true , exception : Some ("RangeException") , regex : "^(.*) (.*) must be between (.*) and (.*)(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/Util.php" , line : 124usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Either mbstring \\(recommended\\) or iconv is necessary to use Scssphp\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/Util.php" , line : 161usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Either mbstring \\(recommended\\) or iconv is necessary to use Scssphp\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/Util.php" , line : 182usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Either mbstring \\(recommended\\) or iconv is necessary to use Scssphp\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/ValueConverter.php" , line : 41usize , placeholders : & ["sprintf('Invalid value source \"%s\".', $source)"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/ValueConverter.php" , line : 93usize , placeholders : & ["sprintf('Cannot convert the value of type \"%s\" to a Sass value.', gettype($value))"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/SourceMap/SourceMapGenerator.php" , line : 156usize , placeholders : & ["sprintf('The directory \"%s\" does not exist. Cannot save the source map.', $dir)"] , has_meaningful_message : false , exception : Some ("CompilerException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/SourceMap/SourceMapGenerator.php" , line : 163usize , placeholders : & ["sprintf('Cannot save the source map to \"%s\"', $file)"] , has_meaningful_message : false , exception : Some ("CompilerException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/Warn.php" , line : 79usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^The warning Reporter may only be called within a custom function or importer callback\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/Cache.php" , line : 90usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^cacheDir not set$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/Cache.php" , line : 98usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^prefix not set$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/Cache.php" , line : 213usize , placeholders : & ["self::$cacheDir"] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Cache directory doesn't exist: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/Cache.php" , line : 217usize , placeholders : & ["self::$cacheDir"] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Cache directory isn't writable: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/3rdparty/scssphp/scssphp/src/Parser.php" , line : 532usize , placeholders : & ["$file" , "$line" , "$column"] , has_meaningful_message : true , exception : None , regex : "^The \"@scssphp\\-import\\-once\" directive is deprecated and will be removed in ScssPhp 2\\.0, in \"(.*)\", line (.*), column (.*)\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/3rdparty/scssphp/scssphp/src/Parser.php" , line : 1584usize , placeholders : & ["$file" , "$line" , "$column"] , has_meaningful_message : true , exception : None , regex : "^Unterminated interpolations in multiline comments are deprecated and will be removed in ScssPhp 2\\.0, in \"(.*)\", line (.*), column (.*)\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/Node/Number.php" , line : 208usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Number is immutable$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/Node/Number.php" , line : 217usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Number is immutable$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/Node/Number.php" , line : 317usize , placeholders : & ["sprintf(\n            'Incompatible units %s and %s.',\n            self::getUnitString($this->numeratorUnits, $this->denominatorUnits),\n            self::getUnitString($other->numeratorUnits, $other->denominatorUnits)\n        )"] , has_meaningful_message : false , exception : Some ("SassScriptException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/Node/Number.php" , line : 657usize , placeholders : & ["sprintf(\n                'Incompatible units %s and %s.',\n                self::getUnitString($this->numeratorUnits, $this->denominatorUnits),\n                self::getUnitString($numeratorUnits, $denominatorUnits)\n            )"] , has_meaningful_message : false , exception : Some ("SassScriptException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/Node/Number.php" , line : 679usize , placeholders : & ["sprintf(\n                'Incompatible units %s and %s.',\n                self::getUnitString($this->numeratorUnits, $this->denominatorUnits),\n                self::getUnitString($numeratorUnits, $denominatorUnits)\n            )"] , has_meaningful_message : false , exception : Some ("SassScriptException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/scssphp/scssphp/src/Node/Number.php" , line : 687usize , placeholders : & ["sprintf(\n                'Incompatible units %s and %s.',\n                self::getUnitString($this->numeratorUnits, $this->denominatorUnits),\n                self::getUnitString($numeratorUnits, $denominatorUnits)\n            )"] , has_meaningful_message : false , exception : Some ("SassScriptException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/giggsey/libphonenumber-for-php/src/ShortNumberInfo.php" , line : 151usize , placeholders : & ["$fileName"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^missing metadata: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/giggsey/libphonenumber-for-php/src/prefixmapper/PrefixFileReader.php" , line : 39usize , placeholders : & ["$mapPath"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid data directory: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/giggsey/libphonenumber-for-php/src/prefixmapper/PrefixFileReader.php" , line : 73usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Data does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/giggsey/libphonenumber-for-php/src/Leniency/AbstractLeniency.php" , line : 44usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^\\$level should be defined$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/giggsey/libphonenumber-for-php/src/PhoneNumberMatcher.php" , line : 201usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/giggsey/libphonenumber-for-php/src/PhoneNumberMatcher.php" , line : 277usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/giggsey/libphonenumber-for-php/src/PhoneNumberMatcher.php" , line : 864usize , placeholders : & ["$fileName"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^missing metadata: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/giggsey/libphonenumber-for-php/src/PhoneNumberToTimeZonesMapper.php" , line : 42usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Mapping file can not be found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/giggsey/libphonenumber-for-php/src/MultiFileMetadataSourceImpl.php" , line : 95usize , placeholders : & ["$fileName"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^missing metadata: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/giggsey/libphonenumber-for-php/src/PhoneNumberUtil.php" , line : 1634usize , placeholders : & ["NumberParseException::NOT_A_NUMBER"] , has_meaningful_message : false , exception : Some ("NumberParseException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/giggsey/libphonenumber-for-php/src/PhoneNumberUtil.php" , line : 1640usize , placeholders : & ["NumberParseException::TOO_LONG"] , has_meaningful_message : false , exception : Some ("NumberParseException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/giggsey/libphonenumber-for-php/src/PhoneNumberUtil.php" , line : 1650usize , placeholders : & ["NumberParseException::NOT_A_NUMBER"] , has_meaningful_message : false , exception : Some ("NumberParseException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/giggsey/libphonenumber-for-php/src/PhoneNumberUtil.php" , line : 1659usize , placeholders : & ["NumberParseException::INVALID_COUNTRY_CODE"] , has_meaningful_message : false , exception : Some ("NumberParseException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/giggsey/libphonenumber-for-php/src/PhoneNumberUtil.php" , line : 1702usize , placeholders : & ["NumberParseException::INVALID_COUNTRY_CODE"] , has_meaningful_message : false , exception : Some ("NumberParseException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/giggsey/libphonenumber-for-php/src/PhoneNumberUtil.php" , line : 1708usize , placeholders : & ["$e->getErrorType()"] , has_meaningful_message : false , exception : Some ("NumberParseException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/giggsey/libphonenumber-for-php/src/PhoneNumberUtil.php" , line : 1730usize , placeholders : & ["NumberParseException::TOO_SHORT_NSN"] , has_meaningful_message : false , exception : Some ("NumberParseException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/giggsey/libphonenumber-for-php/src/PhoneNumberUtil.php" , line : 1754usize , placeholders : & ["NumberParseException::TOO_SHORT_NSN"] , has_meaningful_message : false , exception : Some ("NumberParseException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/giggsey/libphonenumber-for-php/src/PhoneNumberUtil.php" , line : 1760usize , placeholders : & ["NumberParseException::TOO_LONG"] , has_meaningful_message : false , exception : Some ("NumberParseException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/giggsey/libphonenumber-for-php/src/PhoneNumberUtil.php" , line : 1982usize , placeholders : & ["NumberParseException::TOO_SHORT_AFTER_IDD"] , has_meaningful_message : false , exception : Some ("NumberParseException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/giggsey/libphonenumber-for-php/src/PhoneNumberUtil.php" , line : 1996usize , placeholders : & ["NumberParseException::INVALID_COUNTRY_CODE"] , has_meaningful_message : false , exception : Some ("NumberParseException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/giggsey/libphonenumber-for-php/src/PhoneNumberUtil.php" , line : 2410usize , placeholders : & ["$regionCode"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid region code: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/giggsey/libphonenumber-for-php/src/PhoneNumberMatch.php" , line : 36usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Start index must be >= 0\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/giggsey/locale/src/Locale.php" , line : 134usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Locale is not supported$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/polyfill-intl-grapheme/Grapheme.php" , line : 74usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\ValueError") , regex : "^grapheme_extract\\(\\): Argument \\#3 \\(\\$type\\) must be one of GRAPHEME_EXTR_COUNT, GRAPHEME_EXTR_MAXBYTES, or GRAPHEME_EXTR_MAXCHARS$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/polyfill-mbstring/Mbstring.php" , line : 367usize , placeholders : & ["sprintf('Argument #1 ($encoding) must be a valid encoding, \"%s\" given', $encoding)"] , has_meaningful_message : false , exception : Some ("\\ValueError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/polyfill-mbstring/Mbstring.php" , line : 388usize , placeholders : & ["sprintf('Argument #1 ($language) must be a valid language, \"%s\" given', $lang)"] , has_meaningful_message : false , exception : Some ("\\ValueError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/polyfill-mbstring/Mbstring.php" , line : 557usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\ValueError") , regex : "^Argument \\#2 \\(\\$length\\) must be greater than 0$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/polyfill-mbstring/Mbstring.php" , line : 610usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\ValueError") , regex : "^Argument \\#1 \\(\\$substitute_character\\) must be \"none\", \"long\", \"entity\" or a valid codepoint$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Router.php" , line : 161usize , placeholders : & ["sprintf('The Router does not support the following options: \"%s\".', implode('\", \"', $invalid))"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Router.php" , line : 176usize , placeholders : & ["sprintf('The Router does not support the \"%s\" option.', $key)"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Router.php" , line : 196usize , placeholders : & ["sprintf('The Router does not support the \"%s\" option.', $key)"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Route.php" , line : 523usize , placeholders : & ["sprintf('Routing requirement for \"%s\" must be a string.', $key)"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Route.php" , line : 535usize , placeholders : & ["sprintf('Routing requirement for \"%s\" cannot be empty.', $key)"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Generator/CompiledUrlGenerator.php" , line : 50usize , placeholders : & ["sprintf('Unable to generate a URL for the named route \"%s\" as such route does not exist.', $name)"] , has_meaningful_message : false , exception : Some ("RouteNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Generator/UrlGenerator.php" , line : 143usize , placeholders : & ["sprintf('Unable to generate a URL for the named route \"%s\" as such route does not exist.', $name)"] , has_meaningful_message : false , exception : Some ("RouteNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Generator/UrlGenerator.php" , line : 177usize , placeholders : & ["sprintf('Some mandatory parameters are missing (\"%s\") to generate a URL for route \"%s\".', implode('\", \"', array_keys($diff)), $name)"] , has_meaningful_message : false , exception : Some ("MissingMandatoryParametersException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Generator/UrlGenerator.php" , line : 193usize , placeholders : & ["strtr($message, ['{parameter}' => $varName, '{route}' => $name, '{expected}' => $token[2], '{given}' => $mergedParams[$varName]])"] , has_meaningful_message : false , exception : Some ("InvalidParameterException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/symfony/routing/Generator/UrlGenerator.php" , line : 197usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Generator/UrlGenerator.php" , line : 248usize , placeholders : & ["strtr($message, ['{parameter}' => $token[3], '{route}' => $name, '{expected}' => $token[2], '{given}' => $mergedParams[$token[3]]])"] , has_meaningful_message : false , exception : Some ("InvalidParameterException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/symfony/routing/Generator/UrlGenerator.php" , line : 252usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/Configurator/Traits/AddTrait.php" , line : 45usize , placeholders : & ["sprintf('Route \"%s\" is missing routes for locale(s) \"%s\".', $name, implode('\", \"', array_keys($missing)))"] , has_meaningful_message : false , exception : Some ("\\LogicException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/Configurator/Traits/AddTrait.php" , line : 49usize , placeholders : & ["sprintf('Route \"%s\" with locale \"%s\" is missing a corresponding prefix in its parent collection.', $name, $locale)"] , has_meaningful_message : false , exception : Some ("\\LogicException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/Configurator/ImportConfigurator.php" , line : 38usize , placeholders : & ["__CLASS__"] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Cannot serialize (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/Configurator/ImportConfigurator.php" , line : 43usize , placeholders : & ["__CLASS__"] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Cannot unserialize (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/Configurator/ImportConfigurator.php" , line : 86usize , placeholders : & ["sprintf('Route \"%s\" with locale \"%s\" is missing a corresponding prefix in its parent collection.', $name, $locale)"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/Configurator/CollectionConfigurator.php" , line : 44usize , placeholders : & ["__CLASS__"] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Cannot serialize (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/Configurator/CollectionConfigurator.php" , line : 49usize , placeholders : & ["__CLASS__"] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Cannot unserialize (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/Configurator/CollectionConfigurator.php" , line : 82usize , placeholders : & ["sprintf('Collection \"%s\" is missing prefixes for locale(s) \"%s\".', $this->name, implode('\", \"', array_keys($missing)))"] , has_meaningful_message : false , exception : Some ("\\LogicException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/Configurator/CollectionConfigurator.php" , line : 86usize , placeholders : & ["sprintf('Collection \"%s\" with locale \"%s\" is missing a corresponding prefix in its parent collection.', $this->name, $locale)"] , has_meaningful_message : false , exception : Some ("\\LogicException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/XmlFileLoader.php" , line : 87usize , placeholders : & ["sprintf('Unknown tag \"%s\" used in file \"%s\". Expected \"route\" or \"import\".', $node->localName, $path)"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/XmlFileLoader.php" , line : 110usize , placeholders : & ["sprintf('The <route> element in file \"%s\" must have an \"id\" attribute.', $path)"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/XmlFileLoader.php" , line : 119usize , placeholders : & ["sprintf('The <route> element in file \"%s\" must have a \"path\" attribute or <path> child nodes.', $path)"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/XmlFileLoader.php" , line : 123usize , placeholders : & ["sprintf('The <route> element in file \"%s\" must not have both a \"path\" attribute and <path> child nodes.', $path)"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/XmlFileLoader.php" , line : 152usize , placeholders : & ["sprintf('The <import> element in file \"%s\" must have a \"resource\" attribute.', $path)"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/XmlFileLoader.php" , line : 165usize , placeholders : & ["sprintf('The <route> element in file \"%s\" must not have both a \"prefix\" attribute and <prefix> child nodes.', $path)"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/XmlFileLoader.php" , line : 177usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^You cannot use both the attribute \"exclude\" and <exclude> tags at the same time\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/XmlFileLoader.php" , line : 219usize , placeholders : & ["sprintf('Route \"%s\" with locale \"%s\" is missing a corresponding prefix when imported in \"%s\".', $name, $locale, $path)"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/XmlFileLoader.php" , line : 312usize , placeholders : & ["sprintf('Unknown tag \"%s\" used in file \"%s\". Expected \"default\", \"requirement\", \"option\" or \"condition\".', $n->localName, $path)"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/XmlFileLoader.php" , line : 320usize , placeholders : & ["sprintf('The routing file \"%s\" must not specify both the \"controller\" attribute and the defaults key \"_controller\" for ', $path)" , "$name"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/XmlFileLoader.php" , line : 425usize , placeholders : & ["sprintf('Unknown tag \"%s\" used in file \"%s\". Expected \"bool\", \"int\", \"float\", \"string\", \"list\", or \"map\".', $node->localName, $path)"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/ObjectLoader.php" , line : 46usize , placeholders : & ["sprintf('Invalid resource \"%s\" passed to the %s route loader: use the format \"object_id::method\" or \"object_id\" if your object class has an \"__invoke\" method.', $resource, \\is_string($type) ? '\"'.$type.'\"' : 'object')"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/ObjectLoader.php" , line : 60usize , placeholders : & ["sprintf('\"%s:getObject()\" must return an object: \"%s\" returned.', static::class, \\gettype($loaderObject))"] , has_meaningful_message : false , exception : Some ("\\TypeError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/ObjectLoader.php" , line : 64usize , placeholders : & ["sprintf('Method \"%s\" not found on \"%s\" when importing routing resource \"%s\".', $method, \\get_class($loaderObject), $resource)"] , has_meaningful_message : false , exception : Some ("\\BadMethodCallException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/ObjectLoader.php" , line : 72usize , placeholders : & ["sprintf('The \"%s::%s()\" method must return a RouteCollection: \"%s\" returned.', \\get_class($loaderObject), $method, $type)"] , has_meaningful_message : false , exception : Some ("\\LogicException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/AnnotationFileLoader.php" , line : 32usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^The Tokenizer extension is required for the routing annotation loaders\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/AnnotationFileLoader.php" , line : 92usize , placeholders : & ["sprintf('The file \"%s\" does not contain PHP code. Did you forgot to add the \"<?php\" start tag at the beginning of the file?', $file)"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/YamlFileLoader.php" , line : 51usize , placeholders : & ["sprintf('This is not a local file \"%s\".', $path)"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/YamlFileLoader.php" , line : 55usize , placeholders : & ["sprintf('File \"%s\" not found.', $path)"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/YamlFileLoader.php" , line : 65usize , placeholders : & ["sprintf('The file \"%s\" does not contain valid YAML: ', $path)" , "$e->getMessage()"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/YamlFileLoader.php" , line : 78usize , placeholders : & ["sprintf('The file \"%s\" must contain a YAML array.', $path)"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/YamlFileLoader.php" , line : 225usize , placeholders : & ["sprintf('Route \"%s\" with locale \"%s\" is missing a corresponding prefix when imported in \"%s\".', $name, $locale, $file)"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/YamlFileLoader.php" , line : 270usize , placeholders : & ["sprintf('The definition of \"%s\" in \"%s\" must be a YAML array.', $name, $path)"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/YamlFileLoader.php" , line : 273usize , placeholders : & ["sprintf('The routing file \"%s\" contains unsupported keys for \"%s\": \"%s\". Expected one of: \"%s\".', $path, $name, implode('\", \"', $extraKeys), implode('\", \"', self::AVAILABLE_KEYS))"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/YamlFileLoader.php" , line : 276usize , placeholders : & ["sprintf('The routing file \"%s\" must not specify both the \"resource\" key and the \"path\" key for \"%s\". Choose between an import and a route definition.', $path, $name)"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/YamlFileLoader.php" , line : 279usize , placeholders : & ["sprintf('The \"type\" key for the route definition \"%s\" in \"%s\" is unsupported. It is only available for imports in combination with the \"resource\" key.', $name, $path)"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/YamlFileLoader.php" , line : 282usize , placeholders : & ["sprintf('You must define a \"path\" for the route \"%s\" in file \"%s\".', $name, $path)"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/YamlFileLoader.php" , line : 285usize , placeholders : & ["sprintf('The routing file \"%s\" must not specify both the \"controller\" key and the defaults key \"_controller\" for \"%s\".', $path, $name)"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/AnnotationClassLoader.php" , line : 100usize , placeholders : & ["sprintf('Class \"%s\" does not exist.', $class)"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/AnnotationClassLoader.php" , line : 105usize , placeholders : & ["sprintf('Annotations from class \"%s\" cannot be read as it is abstract.', $class->getName())"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/AnnotationClassLoader.php" , line : 180usize , placeholders : & ["sprintf('Route to \"%s\" is missing paths for locale(s) \"%s\".', $class->name.'::'.$method->name, implode('\", \"', array_keys($missing)))"] , has_meaningful_message : false , exception : Some ("\\LogicException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Loader/AnnotationClassLoader.php" , line : 184usize , placeholders : & ["sprintf('Route to \"%s\" with locale \"%s\" is missing a corresponding prefix in class \"%s\".', $method->name, $locale, $class->name)"] , has_meaningful_message : false , exception : Some ("\\LogicException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Matcher/UrlMatcher.php" , line : 93usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NoConfigurationException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Matcher/UrlMatcher.php" , line : 266usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Unable to use expressions as the Symfony ExpressionLanguage component is not installed\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Matcher/Dumper/CompiledUrlMatcherTrait.php" , line : 42usize , placeholders : & ["array_keys($allow)"] , has_meaningful_message : false , exception : Some ("MethodNotAllowedException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Matcher/Dumper/CompiledUrlMatcherTrait.php" , line : 45usize , placeholders : & ["sprintf('No routes found for \"%s\".', $pathinfo)"] , has_meaningful_message : false , exception : Some ("ResourceNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Matcher/Dumper/CompiledUrlMatcherTrait.php" , line : 70usize , placeholders : & ["sprintf('No routes found for \"%s\".', $pathinfo)"] , has_meaningful_message : false , exception : Some ("ResourceNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Matcher/Dumper/CompiledUrlMatcherTrait.php" , line : 182usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NoConfigurationException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Matcher/Dumper/CompiledUrlMatcherDumper.php" , line : 450usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Unable to use expressions as the Symfony ExpressionLanguage component is not installed\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Matcher/Dumper/CompiledUrlMatcherDumper.php" , line : 473usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Symfony\\\\Component\\\\Routing\\\\Route cannot contain objects\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/RouteCompiler.php" , line : 82usize , placeholders : & ["sprintf('Route pattern \"%s\" cannot contain \"_fragment\" as a path parameter.', $route->getPath())"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/RouteCompiler.php" , line : 114usize , placeholders : & ["sprintf('Cannot use UTF-8 route patterns without setting the \"utf8\" option for route \"%s\".', $route->getPath())"] , has_meaningful_message : false , exception : Some ("\\LogicException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/RouteCompiler.php" , line : 117usize , placeholders : & ["sprintf('Cannot mix UTF-8 requirements with non-UTF-8 pattern \"%s\".', $pattern)"] , has_meaningful_message : false , exception : Some ("\\LogicException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/RouteCompiler.php" , line : 143usize , placeholders : & ["sprintf('Variable name \"%s\" cannot start with a digit in route pattern \"%s\". Please use a different name.', $varName, $pattern)"] , has_meaningful_message : false , exception : Some ("\\DomainException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/RouteCompiler.php" , line : 146usize , placeholders : & ["sprintf('Route pattern \"%s\" cannot reference variable name \"%s\" more than once.', $pattern, $varName)"] , has_meaningful_message : false , exception : Some ("\\LogicException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/RouteCompiler.php" , line : 150usize , placeholders : & ["sprintf('Variable name \"%s\" cannot be longer than %d characters in route pattern \"%s\". Please use a shorter name.', $varName, self::VARIABLE_MAXIMUM_LENGTH, $pattern)"] , has_meaningful_message : false , exception : Some ("\\DomainException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/RouteCompiler.php" , line : 187usize , placeholders : & ["sprintf('Cannot use UTF-8 route requirements without setting the \"utf8\" option for variable \"%s\" in pattern \"%s\".', $varName, $pattern)"] , has_meaningful_message : false , exception : Some ("\\LogicException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/RouteCompiler.php" , line : 190usize , placeholders : & ["sprintf('Cannot mix UTF-8 requirement with non-UTF-8 charset for variable \"%s\" in pattern \"%s\".', $varName, $pattern)"] , has_meaningful_message : false , exception : Some ("\\LogicException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Annotation/Route.php" , line : 43usize , placeholders : & ["sprintf('Unknown property \"localized_paths\" on annotation \"%s\".', static::class)"] , has_meaningful_message : false , exception : Some ("\\BadMethodCallException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/Annotation/Route.php" , line : 74usize , placeholders : & ["sprintf('Unknown property \"%s\" on annotation \"%s\".', $key, static::class)"] , has_meaningful_message : false , exception : Some ("\\BadMethodCallException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/RouteCollectionBuilder.php" , line : 355usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Cannot import other routing resources: you must pass a LoaderInterface when constructing RouteCollectionBuilder\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/RouteCollectionBuilder.php" , line : 365usize , placeholders : & ["$resource"] , has_meaningful_message : false , exception : Some ("LoaderLoadException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/routing/RouteCollectionBuilder.php" , line : 369usize , placeholders : & ["$resource"] , has_meaningful_message : false , exception : Some ("LoaderLoadException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/Process.php" , line : 143usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^The Process class relies on proc_open, which is not available on your PHP installation\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/Process.php" , line : 206usize , placeholders : & ["__CLASS__"] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Cannot serialize (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/Process.php" , line : 211usize , placeholders : & ["__CLASS__"] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Cannot unserialize (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/Process.php" , line : 269usize , placeholders : & ["$this"] , has_meaningful_message : false , exception : Some ("ProcessFailedException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/Process.php" , line : 297usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^Process is already running\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/Process.php" , line : 349usize , placeholders : & ["sprintf('The provided cwd \"%s\" does not exist.', $this->cwd)"] , has_meaningful_message : false , exception : Some ("RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/Process.php" , line : 355usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^Unable to launch a new process\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/Process.php" , line : 391usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^Process is already running\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/Process.php" , line : 424usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^Pass the callback to the \"Process::start\" method or call enableOutput to use a callback with \"Process::wait\"\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/Process.php" , line : 441usize , placeholders : & ["$this"] , has_meaningful_message : false , exception : Some ("ProcessSignaledException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/Process.php" , line : 465usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^Pass the callback to the \"Process::start\" method or call enableOutput to use a callback with \"Process::waitUntil\"\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/Process.php" , line : 532usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^Disabling output while the process is running is not possible\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/Process.php" , line : 535usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^Output can not be disabled while an idle timeout is set\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/Process.php" , line : 553usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^Enabling output while the process is running is not possible\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/Process.php" , line : 819usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^This PHP has been compiled with \\-\\-enable\\-sigchild\\. Term signal can not be retrieved\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/Process.php" , line : 1065usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^Idle timeout can not be set while the output is disabled\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/Process.php" , line : 1085usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^TTY mode is not supported on Windows platform\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/Process.php" , line : 1089usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^TTY mode requires /dev/tty to be read/writable\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/Process.php" , line : 1222usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^Input can not be set while the process is running\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/Process.php" , line : 1244usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Not inheriting environment variables is not supported\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/Process.php" , line : 1267usize , placeholders : & ["$this"] , has_meaningful_message : false , exception : Some ("ProcessTimedOutException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/Process.php" , line : 1273usize , placeholders : & ["$this"] , has_meaningful_message : false , exception : Some ("ProcessTimedOutException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/Process.php" , line : 1416usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^Output has been disabled\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/Process.php" , line : 1436usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^The timeout value must be a valid positive integer or float number\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/Process.php" , line : 1529usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^Can not send signal on a non running process\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/Process.php" , line : 1539usize , placeholders : & ["sprintf('Unable to kill the process (%s).', implode(' ', $output))"] , has_meaningful_message : false , exception : Some ("RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/Process.php" , line : 1554usize , placeholders : & ["sprintf('Error while sending signal \"%s\".', $signal)"] , has_meaningful_message : false , exception : Some ("RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/Process.php" , line : 1623usize , placeholders : & ["sprintf('Process must be started before calling \"%s()\".', $functionName)"] , has_meaningful_message : false , exception : Some ("LogicException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/Process.php" , line : 1635usize , placeholders : & ["sprintf('Process must be terminated before calling \"%s()\".', $functionName)"] , has_meaningful_message : false , exception : Some ("LogicException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/Process.php" , line : 1665usize , placeholders : & ["sprintf('Command line is missing a value for parameter \"%s\": ', $matches[1])" , "$commandline"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/ProcessUtils.php" , line : 64usize , placeholders : & ["sprintf('\"%s\" only accepts strings, Traversable objects or stream resources.', $caller)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/Exception/ProcessFailedException.php" , line : 28usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Expected a failed process, but the given process was successful\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/Exception/ProcessTimedOutException.php" , line : 66usize , placeholders : & ["sprintf('Unknown timeout type \"%d\".', $this->timeoutType)"] , has_meaningful_message : false , exception : Some ("\\LogicException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/Pipes/UnixPipes.php" , line : 43usize , placeholders : & ["__CLASS__"] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Cannot serialize (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/Pipes/UnixPipes.php" , line : 48usize , placeholders : & ["__CLASS__"] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Cannot unserialize (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/Pipes/AbstractPipes.php" , line : 106usize , placeholders : & ["sprintf('\"%s\" yielded a value of type \"%s\", but only scalars and stream resources are supported.', \\get_class($this->input), \\gettype($input))"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/Pipes/WindowsPipes.php" , line : 63usize , placeholders : & ["$lastError"] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^A temporary file could not be opened to write the process output: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/Pipes/WindowsPipes.php" , line : 96usize , placeholders : & ["__CLASS__"] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Cannot serialize (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/Pipes/WindowsPipes.php" , line : 101usize , placeholders : & ["__CLASS__"] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Cannot unserialize (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/InputStream.php" , line : 48usize , placeholders : & ["sprintf('\"%s\" is closed.', static::class)"] , has_meaningful_message : false , exception : Some ("RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/PhpProcess.php" , line : 58usize , placeholders : & ["sprintf('The \"%s()\" method cannot be called when using \"%s\".', __METHOD__, self::class)"] , has_meaningful_message : false , exception : Some ("LogicException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/process/PhpProcess.php" , line : 79usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^Unable to find the PHP executable\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Logger/ConsoleLogger.php" , line : 70usize , placeholders : & ["sprintf('The log level \"%s\" does not exist.', $level)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Input/InputArgument.php" , line : 46usize , placeholders : & ["sprintf('Argument mode \"%s\" is not valid.', $mode)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Input/InputArgument.php" , line : 96usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^Cannot set a default value except for InputArgument::OPTIONAL mode\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Input/InputArgument.php" , line : 103usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^A default value for an array argument must be an array\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Input/Input.php" , line : 76usize , placeholders : & ["sprintf('Not enough arguments (missing: \"%s\").', implode(', ', $missingArguments))"] , has_meaningful_message : false , exception : Some ("RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Input/Input.php" , line : 110usize , placeholders : & ["sprintf('The \"%s\" argument does not exist.', $name)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Input/Input.php" , line : 122usize , placeholders : & ["sprintf('The \"%s\" argument does not exist.', $name)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Input/Input.php" , line : 150usize , placeholders : & ["sprintf('The \"%s\" option does not exist.', $name)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Input/Input.php" , line : 162usize , placeholders : & ["sprintf('The \"%s\" option does not exist.', $name)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Input/ArrayInput.php" , line : 154usize , placeholders : & ["sprintf('The \"-%s\" option does not exist.', $shortcut)"] , has_meaningful_message : false , exception : Some ("InvalidOptionException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Input/ArrayInput.php" , line : 169usize , placeholders : & ["sprintf('The \"--%s\" option does not exist.', $name)"] , has_meaningful_message : false , exception : Some ("InvalidOptionException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Input/ArrayInput.php" , line : 176usize , placeholders : & ["sprintf('The \"--%s\" option requires a value.', $name)"] , has_meaningful_message : false , exception : Some ("InvalidOptionException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Input/ArrayInput.php" , line : 198usize , placeholders : & ["sprintf('The \"%s\" argument does not exist.', $name)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Input/InputOption.php" , line : 66usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^An option name cannot be empty\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Input/InputOption.php" , line : 82usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^An option shortcut cannot be empty\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Input/InputOption.php" , line : 89usize , placeholders : & ["sprintf('Option mode \"%s\" is not valid.', $mode)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Input/InputOption.php" , line : 98usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Impossible to have an option mode VALUE_IS_ARRAY if the option does not accept a value\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Input/InputOption.php" , line : 170usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^Cannot set a default value when using InputOption::VALUE_NONE mode\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Input/InputOption.php" , line : 177usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^A default value for an array option must be an array\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Input/InputDefinition.php" , line : 99usize , placeholders : & ["sprintf('An argument with name \"%s\" already exists.', $argument->getName())"] , has_meaningful_message : false , exception : Some ("LogicException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Input/InputDefinition.php" , line : 103usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^Cannot add an argument after an array argument\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Input/InputDefinition.php" , line : 107usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^Cannot add a required argument after an optional one\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Input/InputDefinition.php" , line : 135usize , placeholders : & ["sprintf('The \"%s\" argument does not exist.', $name)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Input/InputDefinition.php" , line : 230usize , placeholders : & ["sprintf('An option named \"%s\" already exists.', $option->getName())"] , has_meaningful_message : false , exception : Some ("LogicException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Input/InputDefinition.php" , line : 236usize , placeholders : & ["sprintf('An option with shortcut \"%s\" already exists.', $shortcut)"] , has_meaningful_message : false , exception : Some ("LogicException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Input/InputDefinition.php" , line : 261usize , placeholders : & ["sprintf('The \"--%s\" option does not exist.', $name)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Input/InputDefinition.php" , line : 339usize , placeholders : & ["sprintf('The \"-%s\" option does not exist.', $shortcut)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Input/StringInput.php" , line : 60usize , placeholders : & ["sprintf('Unable to parse input near \"... %s ...\".', substr($input, $cursor, 10))"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Input/ArgvInput.php" , line : 118usize , placeholders : & ["sprintf('The \"-%s\" option does not exist.', false === $encoding ? $name[$i] : mb_substr($name, $i, 1, $encoding))"] , has_meaningful_message : false , exception : Some ("RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Input/ArgvInput.php" , line : 172usize , placeholders : & ["sprintf('Too many arguments, expected arguments \"%s\".', implode('\" \"', array_keys($all)))"] , has_meaningful_message : false , exception : Some ("RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Input/ArgvInput.php" , line : 175usize , placeholders : & ["sprintf('No arguments expected, got \"%s\".', $token)"] , has_meaningful_message : false , exception : Some ("RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Input/ArgvInput.php" , line : 187usize , placeholders : & ["sprintf('The \"-%s\" option does not exist.', $shortcut)"] , has_meaningful_message : false , exception : Some ("RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Input/ArgvInput.php" , line : 201usize , placeholders : & ["sprintf('The \"--%s\" option does not exist.', $name)"] , has_meaningful_message : false , exception : Some ("RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Input/ArgvInput.php" , line : 207usize , placeholders : & ["sprintf('The \"--%s\" option does not accept a value.', $name)"] , has_meaningful_message : false , exception : Some ("RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Input/ArgvInput.php" , line : 223usize , placeholders : & ["sprintf('The \"--%s\" option requires a value.', $name)"] , has_meaningful_message : false , exception : Some ("RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Style/SymfonyStyle.php" , line : 244usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Value should be an array, string, or an instance of TableSeparator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Style/SymfonyStyle.php" , line : 422usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^The ProgressBar is not started\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Tester/TesterTrait.php" , line : 39usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Output not initialized, did you execute the command before requesting the display\\?$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Tester/TesterTrait.php" , line : 63usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^The error output is not available when the tester is run without \"capture_stderr_separately\" option set\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Formatter/OutputFormatterStyle.php" , line : 90usize , placeholders : & ["sprintf('Invalid foreground color specified: \"%s\". Expected one of (%s).', $color, implode(', ', array_keys(static::$availableForegroundColors)))"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Formatter/OutputFormatterStyle.php" , line : 108usize , placeholders : & ["sprintf('Invalid background color specified: \"%s\". Expected one of (%s).', $color, implode(', ', array_keys(static::$availableBackgroundColors)))"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Formatter/OutputFormatterStyle.php" , line : 125usize , placeholders : & ["sprintf('Invalid option specified: \"%s\". Expected one of (%s).', $option, implode(', ', array_keys(static::$availableOptions)))"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Formatter/OutputFormatterStyle.php" , line : 139usize , placeholders : & ["sprintf('Invalid option specified: \"%s\". Expected one of (%s).', $option, implode(', ', array_keys(static::$availableOptions)))"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Formatter/OutputFormatterStyleStack.php" , line : 76usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Incorrectly nested style tag found\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Formatter/OutputFormatter.php" , line : 126usize , placeholders : & ["sprintf('Undefined style: \"%s\".', $name)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Output/TrimmedBufferOutput.php" , line : 29usize , placeholders : & ["sprintf('\"%s()\" expects a strictly positive maxLength. Got %d.', __METHOD__, $maxLength)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Output/StreamOutput.php" , line : 45usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^The StreamOutput class needs a stream as its first argument\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Question/Question.php" , line : 86usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^A hidden question cannot use the autocompleter\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Question/Question.php" , line : 156usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Autocompleter values can be either an array, \"null\" or a \"Traversable\" object\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Question/Question.php" , line : 180usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^A hidden question cannot use the autocompleter\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Question/Question.php" , line : 226usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Maximum number of attempts must be a positive value\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Question/ChoiceQuestion.php" , line : 36usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Choice question must have at least 1 choice available\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Question/ChoiceQuestion.php" , line : 135usize , placeholders : & ["sprintf($errorMessage, $selected)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Question/ChoiceQuestion.php" , line : 159usize , placeholders : & ["sprintf('The provided answer is ambiguous. Value should be one of \"%s\".', implode('\" or \"', $results))"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Question/ChoiceQuestion.php" , line : 175usize , placeholders : & ["sprintf($errorMessage, $value)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Helper/ProgressBar.php" , line : 507usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^Unable to display the remaining time if the maximum number of steps is not set\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Helper/ProgressBar.php" , line : 520usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^Unable to display the estimated time if the maximum number of steps is not set\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Helper/HelperSet.php" , line : 79usize , placeholders : & ["sprintf('The helper \"%s\" is not defined.', $name)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Helper/ProcessHelper.php" , line : 42usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^The ProcessHelper cannot be run as the Process component is not installed\\. Try running \"compose require symfony/process\"\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Helper/ProcessHelper.php" , line : 67usize , placeholders : & ["sprintf('Invalid command provided to \"%s()\": the command should be an array whose first element is either the path to the binary to run or a \"Process\" object.', __METHOD__)"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Helper/ProcessHelper.php" , line : 114usize , placeholders : & ["$process"] , has_meaningful_message : false , exception : Some ("ProcessFailedException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/symfony/console/Helper/SymfonyQuestionHelper.php" , line : 89usize , placeholders : & ["$error->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Helper/TableCell.php" , line : 33usize , placeholders : & ["sprintf('The TableCell does not support the following options: \\'%s\\'.', implode('\\', \\'', $diff))"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Helper/ProgressIndicator.php" , line : 56usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Must have at least 2 indicator value characters\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Helper/ProgressIndicator.php" , line : 85usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^Progress indicator already started\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Helper/ProgressIndicator.php" , line : 103usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^Progress indicator has not yet been started\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Helper/ProgressIndicator.php" , line : 130usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^Progress indicator has not yet been started\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Helper/QuestionHelper.php" , line : 129usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("MissingInputException") , regex : "^Aborted\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Helper/QuestionHelper.php" , line : 265usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("MissingInputException") , regex : "^Aborted\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Helper/QuestionHelper.php" , line : 427usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^Unable to hide the response\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Helper/QuestionHelper.php" , line : 437usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("MissingInputException") , regex : "^Aborted\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Helper/Table.php" , line : 134usize , placeholders : & ["sprintf('Style \"%s\" is not defined.', $name)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Helper/Table.php" , line : 233usize , placeholders : & ["sprintf('Setting a maximum column width is only supported when using a \"%s\" formatter, got \"%s\".', WrappableOutputFormatterInterface::class, \\get_class($this->output->getFormatter()))"] , has_meaningful_message : false , exception : Some ("\\LogicException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Helper/Table.php" , line : 278usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^A row must be an array or a TableSeparator instance\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Helper/Table.php" , line : 292usize , placeholders : & ["sprintf('Output should be an instance of \"%s\" when calling \"%s\".', ConsoleSectionOutput::class, __METHOD__)"] , has_meaningful_message : false , exception : Some ("RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Helper/Table.php" , line : 626usize , placeholders : & ["sprintf('A cell must be a TableCell, a scalar or an object implementing \"__toString()\", \"%s\" given.', \\gettype($cell))"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Helper/Table.php" , line : 852usize , placeholders : & ["sprintf('Style \"%s\" is not defined.', $name)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Helper/TableStyle.php" , line : 61usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^The padding char must not be empty\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Helper/TableStyle.php" , line : 417usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Invalid padding type\\. Expected one of \\(STR_PAD_LEFT, STR_PAD_RIGHT, STR_PAD_BOTH\\)\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Helper/DescriptorHelper.php" , line : 63usize , placeholders : & ["sprintf('Unsupported format \"%s\".', $options['format'])"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Critical , path : "/3rdparty/symfony/console/EventListener/ErrorListener.php" , line : 43usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^An error occurred while using the console\\. Message: \"\\{message\\}\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Critical , path : "/3rdparty/symfony/console/EventListener/ErrorListener.php" , line : 48usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Error thrown while running command \"\\{command\\}\"\\. Message: \"\\{message\\}\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/3rdparty/symfony/console/EventListener/ErrorListener.php" , line : 64usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^The console exited with code \"\\{code\\}\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/3rdparty/symfony/console/EventListener/ErrorListener.php" , line : 69usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Command \"\\{command\\}\" exited with code \"\\{code\\}\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Command/Command.php" , line : 161usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^You must override the execute\\(\\) method in the concrete command class\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Command/Command.php" , line : 354usize , placeholders : & ["sprintf('Command class \"%s\" is not correctly initialized. You probably forgot to call the parent constructor.', static::class)"] , has_meaningful_message : false , exception : Some ("LogicException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Command/Command.php" , line : 567usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^\\$aliases must be an array or an instance of \\\\Traversable\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Command/Command.php" , line : 648usize , placeholders : & ["sprintf('Cannot retrieve helper \"%s\" because there is no HelperSet defined. Did you forget to add your command to the application or to set the application on the command using the setApplication() method? You can also set the HelperSet directly using the setHelperSet() method.', $name)"] , has_meaningful_message : false , exception : Some ("LogicException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Command/Command.php" , line : 664usize , placeholders : & ["sprintf('Command name \"%s\" is invalid.', $name)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Command/LockableTrait.php" , line : 36usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^To enable the locking feature you must install the symfony/lock component\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Command/LockableTrait.php" , line : 40usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^A lock is already in place\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Descriptor/ApplicationDescription.php" , line : 80usize , placeholders : & ["sprintf('Command \"%s\" does not exist.', $name)"] , has_meaningful_message : false , exception : Some ("CommandNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Descriptor/Descriptor.php" , line : 58usize , placeholders : & ["sprintf('Object of type \"%s\" is not describable.', \\get_class($object))"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Application.php" , line : 489usize , placeholders : & ["sprintf('The command defined in \"%s\" cannot have an empty name.', \\get_class($command))"] , has_meaningful_message : false , exception : Some ("LogicException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Application.php" , line : 515usize , placeholders : & ["sprintf('The command \"%s\" does not exist.', $name)"] , has_meaningful_message : false , exception : Some ("CommandNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Application.php" , line : 520usize , placeholders : & ["sprintf('The \"%s\" command cannot be found because it is registered under multiple names. Make sure you don\\'t set a different name via constructor or \"setName()\".', $name)"] , has_meaningful_message : false , exception : Some ("CommandNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Application.php" , line : 604usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("NamespaceNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Application.php" , line : 609usize , placeholders : & ["sprintf(\"The namespace \\\"%s\\\" is ambiguous.\\nDid you mean one of these?\\n%s.\", $namespace, $this->getAbbreviationSuggestions(array_values($namespaces)))"] , has_meaningful_message : false , exception : Some ("NamespaceNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Application.php" , line : 676usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("CommandNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/Application.php" , line : 717usize , placeholders : & ["sprintf(\"Command \\\"%s\\\" is ambiguous.\\nDid you mean one of these?\\n%s.\", $name, $suggestions)"] , has_meaningful_message : false , exception : Some ("CommandNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/CommandLoader/ContainerCommandLoader.php" , line : 42usize , placeholders : & ["sprintf('Command \"%s\" does not exist.', $name)"] , has_meaningful_message : false , exception : Some ("CommandNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/CommandLoader/FactoryCommandLoader.php" , line : 47usize , placeholders : & ["sprintf('Command \"%s\" does not exist.', $name)"] , has_meaningful_message : false , exception : Some ("CommandNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/DependencyInjection/AddConsoleCommandPass.php" , line : 53usize , placeholders : & ["sprintf('Class \"%s\" used for service \"%s\" cannot be found.', $class, $id)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/console/DependencyInjection/AddConsoleCommandPass.php" , line : 56usize , placeholders : & ["sprintf('The service \"%s\" tagged \"%s\" must be a subclass of \"%s\".', $id, $this->commandTag, Command::class)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/polyfill-php80/Php80.php" , line : 63usize , placeholders : & ["sprintf('Argument 1 passed to get_resource_id() must be of the type resource, %s given', get_debug_type($res))"] , has_meaningful_message : false , exception : Some ("\\TypeError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/event-dispatcher/LegacyEventDispatcherProxy.php" , line : 68usize , placeholders : & ["sprintf('Argument 1 passed to \"%s::dispatch()\" must be an object, \"%s\" given.', ContractsEventDispatcherInterface::class, \\is_object($event) ? \\get_class($event) : \\gettype($event))"] , has_meaningful_message : false , exception : Some ("\\TypeError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/event-dispatcher/ImmutableEventDispatcher.php" , line : 52usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Unmodifiable event dispatchers must not be modified\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/event-dispatcher/ImmutableEventDispatcher.php" , line : 60usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Unmodifiable event dispatchers must not be modified\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/event-dispatcher/ImmutableEventDispatcher.php" , line : 68usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Unmodifiable event dispatchers must not be modified\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/event-dispatcher/ImmutableEventDispatcher.php" , line : 76usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Unmodifiable event dispatchers must not be modified\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/event-dispatcher/EventDispatcher.php" , line : 63usize , placeholders : & ["sprintf('Argument 1 passed to \"%s::dispatch()\" must be an object, \"%s\" given.', EventDispatcherInterface::class, \\is_object($event) ? \\get_class($event) : \\gettype($event))"] , has_meaningful_message : false , exception : Some ("\\TypeError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/event-dispatcher/DependencyInjection/RegisterListenersPass.php" , line : 111usize , placeholders : & ["sprintf('Class \"%s\" used for service \"%s\" cannot be found.', $class, $id)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/event-dispatcher/DependencyInjection/RegisterListenersPass.php" , line : 114usize , placeholders : & ["sprintf('Service \"%s\" must implement interface \"%s\".', $id, EventSubscriberInterface::class)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/event-dispatcher/DependencyInjection/RegisterListenersPass.php" , line : 146usize , placeholders : & ["sprintf('Service \"%s\" must define the \"event\" attribute on \"%s\" tags.', $id, $this->listenerTag)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/event-dispatcher/Debug/TraceableEventDispatcher.php" , line : 154usize , placeholders : & ["sprintf('Argument 1 passed to \"%s::dispatch()\" must be an instance of \"%s\", \"%s\" given.', EventDispatcherInterface::class, Event::class, \\is_object($event) ? \\get_class($event) : \\gettype($event))"] , has_meaningful_message : false , exception : Some ("\\TypeError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/3rdparty/symfony/event-dispatcher/Debug/TraceableEventDispatcher.php" , line : 159usize , placeholders : & ["sprintf('The \"%s\" event is already stopped. No listeners have been called.', $eventName)"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/3rdparty/symfony/event-dispatcher/Debug/TraceableEventDispatcher.php" , line : 219usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^An exception was thrown while getting the uncalled listeners\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/3rdparty/symfony/event-dispatcher/Debug/TraceableEventDispatcher.php" , line : 363usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Notified event \"\\{event\\}\" to listener \"\\{listener\\}\"\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/3rdparty/symfony/event-dispatcher/Debug/TraceableEventDispatcher.php" , line : 370usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Listener \"\\{listener\\}\" was not called for event \"\\{event\\}\"\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/3rdparty/symfony/event-dispatcher/Debug/TraceableEventDispatcher.php" , line : 375usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Listener \"\\{listener\\}\" stopped propagation of the event \"\\{event\\}\"\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/event-dispatcher/GenericEvent.php" , line : 63usize , placeholders : & ["sprintf('Argument \"%s\" not found.', $key)"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Catalogue/AbstractOperation.php" , line : 67usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^Operated catalogues must belong to the same locale\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Catalogue/AbstractOperation.php" , line : 94usize , placeholders : & ["sprintf('Invalid domain: \"%s\".', $domain)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Catalogue/AbstractOperation.php" , line : 110usize , placeholders : & ["sprintf('Invalid domain: \"%s\".', $domain)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Catalogue/AbstractOperation.php" , line : 126usize , placeholders : & ["sprintf('Invalid domain: \"%s\".', $domain)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/DataCollectorTranslator.php" , line : 42usize , placeholders : & ["sprintf('Argument 1 passed to \"%s()\" must be an instance of \"%s\", \"%s\" given.', __METHOD__, TranslatorInterface::class, \\is_object($translator) ? \\get_class($translator) : \\gettype($translator))"] , has_meaningful_message : false , exception : Some ("\\TypeError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/DataCollectorTranslator.php" , line : 45usize , placeholders : & ["sprintf('The Translator \"%s\" must implement TranslatorInterface, TranslatorBagInterface and LocaleAwareInterface.', \\get_class($translator))"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/MessageCatalogue.php" , line : 184usize , placeholders : & ["sprintf('Cannot add a catalogue for locale \"%s\" as the current locale for this catalogue is \"%s\".', $catalogue->getLocale(), $this->locale)"] , has_meaningful_message : false , exception : Some ("LogicException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/MessageCatalogue.php" , line : 214usize , placeholders : & ["sprintf('Circular reference detected when adding a fallback catalogue for locale \"%s\".', $catalogue->getLocale())"] , has_meaningful_message : false , exception : Some ("LogicException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/MessageCatalogue.php" , line : 221usize , placeholders : & ["sprintf('Circular reference detected when adding a fallback catalogue for locale \"%s\".', $catalogue->getLocale())"] , has_meaningful_message : false , exception : Some ("LogicException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Loader/QtFileLoader.php" , line : 33usize , placeholders : & ["sprintf('This is not a local file \"%s\".', $resource)"] , has_meaningful_message : false , exception : Some ("InvalidResourceException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Loader/QtFileLoader.php" , line : 37usize , placeholders : & ["sprintf('File \"%s\" not found.', $resource)"] , has_meaningful_message : false , exception : Some ("NotFoundResourceException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Loader/QtFileLoader.php" , line : 43usize , placeholders : & ["sprintf('Unable to load \"%s\".', $resource)"] , has_meaningful_message : false , exception : Some ("InvalidResourceException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Loader/FileLoader.php" , line : 29usize , placeholders : & ["sprintf('This is not a local file \"%s\".', $resource)"] , has_meaningful_message : false , exception : Some ("InvalidResourceException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Loader/FileLoader.php" , line : 33usize , placeholders : & ["sprintf('File \"%s\" not found.', $resource)"] , has_meaningful_message : false , exception : Some ("NotFoundResourceException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Loader/FileLoader.php" , line : 45usize , placeholders : & ["sprintf('Unable to load file \"%s\".', $resource)"] , has_meaningful_message : false , exception : Some ("InvalidResourceException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Loader/MoFileLoader.php" , line : 51usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidResourceException") , regex : "^MO stream content has an invalid format\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Loader/MoFileLoader.php" , line : 61usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidResourceException") , regex : "^MO stream content has an invalid format\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Loader/IcuResFileLoader.php" , line : 32usize , placeholders : & ["sprintf('This is not a local file \"%s\".', $resource)"] , has_meaningful_message : false , exception : Some ("InvalidResourceException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Loader/IcuResFileLoader.php" , line : 36usize , placeholders : & ["sprintf('File \"%s\" not found.', $resource)"] , has_meaningful_message : false , exception : Some ("NotFoundResourceException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Loader/IcuResFileLoader.php" , line : 46usize , placeholders : & ["sprintf('Cannot load resource \"%s\".', $resource)"] , has_meaningful_message : false , exception : Some ("InvalidResourceException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Loader/IcuResFileLoader.php" , line : 48usize , placeholders : & ["$rb->getErrorMessage()"] , has_meaningful_message : false , exception : Some ("InvalidResourceException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Loader/YamlFileLoader.php" , line : 36usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^Loading translations from the YAML format requires the Symfony Yaml component\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Loader/YamlFileLoader.php" , line : 45usize , placeholders : & ["sprintf('The file \"%s\" does not contain valid YAML: ', $resource)" , "$e->getMessage()"] , has_meaningful_message : false , exception : Some ("InvalidResourceException") , regex : "^(.*)(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Loader/YamlFileLoader.php" , line : 49usize , placeholders : & ["sprintf('Unable to load file \"%s\".', $resource)"] , has_meaningful_message : false , exception : Some ("InvalidResourceException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Loader/XliffFileLoader.php" , line : 34usize , placeholders : & ["sprintf('This is not a local file \"%s\".', $resource)"] , has_meaningful_message : false , exception : Some ("InvalidResourceException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Loader/XliffFileLoader.php" , line : 38usize , placeholders : & ["sprintf('File \"%s\" not found.', $resource)"] , has_meaningful_message : false , exception : Some ("NotFoundResourceException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Loader/XliffFileLoader.php" , line : 56usize , placeholders : & ["sprintf('Unable to load \"%s\": ', $resource)" , "$e->getMessage()"] , has_meaningful_message : false , exception : Some ("InvalidResourceException") , regex : "^(.*)(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Loader/XliffFileLoader.php" , line : 61usize , placeholders : & ["sprintf('Invalid resource provided: \"%s\"; Errors: ', $resource)" , "XliffUtils::getErrorsAsString($errors)"] , has_meaningful_message : false , exception : Some ("InvalidResourceException") , regex : "^(.*)(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Loader/IcuDatFileLoader.php" , line : 32usize , placeholders : & ["sprintf('This is not a local file \"%s\".', $resource)"] , has_meaningful_message : false , exception : Some ("InvalidResourceException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Loader/IcuDatFileLoader.php" , line : 36usize , placeholders : & ["sprintf('File \"%s\" not found.', $resource)"] , has_meaningful_message : false , exception : Some ("NotFoundResourceException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Loader/IcuDatFileLoader.php" , line : 46usize , placeholders : & ["sprintf('Cannot load resource \"%s\".', $resource)"] , has_meaningful_message : false , exception : Some ("InvalidResourceException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Loader/IcuDatFileLoader.php" , line : 48usize , placeholders : & ["$rb->getErrorMessage()"] , has_meaningful_message : false , exception : Some ("InvalidResourceException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Loader/JsonFileLoader.php" , line : 33usize , placeholders : & ["$this->getJSONErrorMessage($errorCode)"] , has_meaningful_message : true , exception : Some ("InvalidResourceException") , regex : "^Error parsing JSON: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Loader/CsvFileLoader.php" , line : 37usize , placeholders : & ["sprintf('Error opening file \"%s\".', $resource)"] , has_meaningful_message : false , exception : Some ("NotFoundResourceException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Translator.php" , line : 255usize , placeholders : & ["sprintf('The formatter \"%s\" does not support plural translations.', \\get_class($this->formatter))"] , has_meaningful_message : false , exception : Some ("LogicException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Translator.php" , line : 431usize , placeholders : & ["sprintf('No loader is registered for the \"%s\" format when loading the \"%s\" resource.', $resource[0], $resource[1])"] , has_meaningful_message : false , exception : Some ("RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Translator.php" , line : 434usize , placeholders : & ["sprintf('No loader is registered for the \"%s\" format.', $resource[0])"] , has_meaningful_message : false , exception : Some ("RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Translator.php" , line : 512usize , placeholders : & ["sprintf('Invalid \"%s\" locale.', $locale)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/DependencyInjection/TranslationExtractorPass.php" , line : 43usize , placeholders : & ["sprintf('The alias for the tag \"translation.extractor\" of service \"%s\" must be set.', $id)"] , has_meaningful_message : false , exception : Some ("RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Dumper/FileDumper.php" , line : 57usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^The backup feature is no longer supported\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Dumper/FileDumper.php" , line : 67usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^The file dumper needs a path option\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Dumper/FileDumper.php" , line : 76usize , placeholders : & ["sprintf('Unable to create directory \"%s\".', $directory)"] , has_meaningful_message : false , exception : Some ("RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Dumper/XliffFileDumper.php" , line : 47usize , placeholders : & ["sprintf('No support implemented for dumping XLIFF version \"%s\".', $xliffVersion)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Dumper/YamlFileDumper.php" , line : 39usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^Dumping translations in the YAML format requires the Symfony Yaml component\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Util/XliffUtils.php" , line : 44usize , placeholders : & ["sprintf('Not a valid XLIFF namespace \"%s\".', $namespace)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Util/XliffUtils.php" , line : 143usize , placeholders : & ["sprintf('No support implemented for loading XLIFF version \"%s\".', $xliffVersion)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/MessageSelector.php" , line : 93usize , placeholders : & ["sprintf('Unable to choose a translation for \"%s\" with locale \"%s\" for value \"%d\". Double check that this translation has the correct plural options (e.g. \"There is one apple|There are %%count%% apples\").', $message, $locale, $number)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/LoggingTranslator.php" , line : 38usize , placeholders : & ["sprintf('Argument 1 passed to \"%s()\" must be an instance of \"%s\", \"%s\" given.', __METHOD__, TranslatorInterface::class, \\is_object($translator) ? \\get_class($translator) : \\gettype($translator))"] , has_meaningful_message : false , exception : Some ("\\TypeError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/LoggingTranslator.php" , line : 41usize , placeholders : & ["sprintf('The Translator \"%s\" must implement TranslatorInterface, TranslatorBagInterface and LocaleAwareInterface.', \\get_class($translator))"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/symfony/translation/LoggingTranslator.php" , line : 54usize , placeholders : & ["$id"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/symfony/translation/LoggingTranslator.php" , line : 74usize , placeholders : & ["$id"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/3rdparty/symfony/translation/LoggingTranslator.php" , line : 90usize , placeholders : & ["sprintf('The locale of the translator has changed from \"%s\" to \"%s\".', $prev, $locale)"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/3rdparty/symfony/translation/LoggingTranslator.php" , line : 147usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Translation use fallback catalogue\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/3rdparty/symfony/translation/LoggingTranslator.php" , line : 149usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Translation not found\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Command/XliffLintCommand.php" , line : 95usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^Please provide a filename or pipe file content to STDIN\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Command/XliffLintCommand.php" , line : 106usize , placeholders : & ["sprintf('File or directory \"%s\" is not readable.', $filename)"] , has_meaningful_message : false , exception : Some ("RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Command/XliffLintCommand.php" , line : 170usize , placeholders : & ["sprintf('The format \"%s\" is not supported.', $this->format)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/3rdparty/symfony/translation/Command/XliffLintCommand.php" , line : 195usize , placeholders : & ["sprintf('%d XLIFF files have valid syntax and %d contain errors.', $countFiles - $erroredFiles, $erroredFiles)"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Extractor/AbstractFileExtractor.php" , line : 61usize , placeholders : & ["sprintf('The \"%s\" file does not exist.', $file)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Writer/TranslationWriter.php" , line : 75usize , placeholders : & ["sprintf('There is no dumper associated with format \"%s\".', $format)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Writer/TranslationWriter.php" , line : 82usize , placeholders : & ["sprintf('Translation Writer was not able to create directory \"%s\".', $options['path'])"] , has_meaningful_message : false , exception : Some ("RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Formatter/IntlFormatter.php" , line : 38usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^Cannot parse message translation: please install the \"intl\" PHP extension or the \"symfony/polyfill\\-intl\\-messageformatter\" package\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Formatter/IntlFormatter.php" , line : 43usize , placeholders : & ["sprintf('Invalid message format (error #%d): ', intl_get_error_code())" , "intl_get_error_message()"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Formatter/IntlFormatter.php" , line : 55usize , placeholders : & ["sprintf('Unable to format message (error #%s): ', $formatter->getErrorCode())" , "$formatter->getErrorMessage()"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Formatter/MessageFormatter.php" , line : 38usize , placeholders : & ["sprintf('Argument 1 passed to \"%s()\" must be an instance of \"%s\", \"%s\" given.', __METHOD__, TranslatorInterface::class, \\is_object($translator) ? \\get_class($translator) : \\gettype($translator))"] , has_meaningful_message : false , exception : Some ("\\TypeError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation/Interval.php" , line : 56usize , placeholders : & ["sprintf('\"%s\" is not a valid interval.', $interval)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation-contracts/TranslatorTrait.php" , line : 125usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/translation-contracts/TranslatorTrait.php" , line : 128usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/polyfill-intl-idn/Idn.php" , line : 586usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Invalid input$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/polyfill-intl-idn/Idn.php" , line : 602usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Invalid input$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/polyfill-intl-idn/Idn.php" , line : 608usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Invalid input$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/polyfill-intl-idn/Idn.php" , line : 612usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Integer overflow$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/polyfill-intl-idn/Idn.php" , line : 632usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Integer overflow$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/polyfill-intl-idn/Idn.php" , line : 642usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Integer overflow$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/polyfill-intl-idn/Idn.php" , line : 697usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Integer overflow$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/polyfill-intl-idn/Idn.php" , line : 705usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Integer overflow$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/symfony/polyfill-intl-normalizer/Normalizer.php" , line : 77usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\ValueError") , regex : "^normalizer_normalize\\(\\): Argument \\#2 \\(\\$form\\) must be a a valid normalization form$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/microsoft/azure-storage-blob/src/Blob/BlobRestProxy.php" , line : 629usize , placeholders : & ["Resources::NOT_IMPLEMENTED_MSG"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/microsoft/azure-storage-blob/src/Blob/BlobRestProxy.php" , line : 2428usize , placeholders : & ["Resources::ERROR_RANGE_NOT_ALIGN_TO_512"] , has_meaningful_message : false , exception : Some ("\\RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/microsoft/azure-storage-blob/src/Blob/BlobRestProxy.php" , line : 3669usize , placeholders : & ["Resources::ERROR_FILE_COULD_NOT_BE_OPENED"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/microsoft/azure-storage-blob/src/Blob/BlobRestProxy.php" , line : 4768usize , placeholders : & ["Resources::INVALID_ACH_MSG"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/microsoft/azure-storage-common/src/Common/Exceptions/ServiceException.php" , line : 96usize , placeholders : & ["sprintf(Resources::ERROR_CANNOT_PARSE_XML, implode('; ', $messages))"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/microsoft/azure-storage-common/src/Common/Internal/ServiceSettings.php" , line : 61usize , placeholders : & ["sprintf(Resources::MISSING_CONNECTION_STRING_SETTINGS, $connectionString)"] , has_meaningful_message : false , exception : Some ("\\RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/microsoft/azure-storage-common/src/Common/Internal/ServiceSettings.php" , line : 92usize , placeholders : & ["sprintf(\n                        Resources::INVALID_CONNECTION_STRING_SETTING_KEY,\n                        $key,\n                        implode(\"\\n\", static::$validSettingKeys)\n                    )"] , has_meaningful_message : false , exception : Some ("\\RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/microsoft/azure-storage-common/src/Common/Internal/ServiceSettings.php" , line : 242usize , placeholders : & ["sprintf(\n                    Resources::INVALID_CONFIG_VALUE,\n                    $settingValue,\n                    implode(\"\\n\", $validValues)\n                )"] , has_meaningful_message : false , exception : Some ("\\RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/microsoft/azure-storage-common/src/Common/Internal/ServiceRestProxy.php" , line : 495usize , placeholders : & ["$response"] , has_meaningful_message : false , exception : Some ("ServiceException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/microsoft/azure-storage-common/src/Common/Internal/ServiceRestProxy.php" , line : 576usize , placeholders : & ["Resources::INVALID_META_MSG"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/microsoft/azure-storage-common/src/Common/Internal/Validate.php" , line : 55usize , placeholders : & ["gettype(array())"] , has_meaningful_message : false , exception : Some ("InvalidArgumentTypeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/microsoft/azure-storage-common/src/Common/Internal/Validate.php" , line : 74usize , placeholders : & ["gettype('')"] , has_meaningful_message : false , exception : Some ("InvalidArgumentTypeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/microsoft/azure-storage-common/src/Common/Internal/Validate.php" , line : 105usize , placeholders : & ["sprintf(Resources::NULL_OR_EMPTY_MSG, $name)"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/microsoft/azure-storage-common/src/Common/Internal/Validate.php" , line : 124usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentTypeException") , regex : "^double$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/microsoft/azure-storage-common/src/Common/Internal/Validate.php" , line : 143usize , placeholders : & ["gettype(123)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentTypeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/microsoft/azure-storage-common/src/Common/Internal/Validate.php" , line : 178usize , placeholders : & ["$failureMessage"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/microsoft/azure-storage-common/src/Common/Internal/Validate.php" , line : 194usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentTypeException") , regex : "^DateTimeInterface$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/microsoft/azure-storage-common/src/Common/Internal/Validate.php" , line : 211usize , placeholders : & ["sprintf(Resources::NULL_MSG, $name)"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/microsoft/azure-storage-common/src/Common/Internal/Validate.php" , line : 240usize , placeholders : & ["sprintf(\n                    Resources::INSTANCE_TYPE_VALIDATION_MSG,\n                    $name,\n                    $objectType,\n                    $classType\n                )"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/microsoft/azure-storage-common/src/Common/Internal/Validate.php" , line : 284usize , placeholders : & ["sprintf(Resources::INVALID_CONFIG_HOSTNAME, $hostname)"] , has_meaningful_message : false , exception : Some ("\\RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/microsoft/azure-storage-common/src/Common/Internal/Validate.php" , line : 318usize , placeholders : & ["sprintf(Resources::INVALID_CONFIG_URI, $uri)"] , has_meaningful_message : false , exception : Some ("\\RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/microsoft/azure-storage-common/src/Common/Internal/Validate.php" , line : 337usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentTypeException") , regex : "^object$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/microsoft/azure-storage-common/src/Common/Internal/Validate.php" , line : 365usize , placeholders : & ["sprintf(\n                    Resources::INSTANCE_TYPE_VALIDATION_MSG,\n                    $name,\n                    $objectType,\n                    $class\n                )"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/microsoft/azure-storage-common/src/Common/Internal/Validate.php" , line : 395usize , placeholders : & ["sprintf(\n                    Resources::ERROR_METHOD_NOT_FOUND,\n                    $method,\n                    $name\n                )"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/microsoft/azure-storage-common/src/Common/Internal/Validate.php" , line : 423usize , placeholders : & ["sprintf(\n                    Resources::ERROR_INVALID_DATE_STRING,\n                    $name,\n                    $value\n                )"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/microsoft/azure-storage-common/src/Common/Internal/Validate.php" , line : 450usize , placeholders : & ["sprintf(\n                    Resources::INVALID_VALUE_MSG,\n                    $name,\n                    sprintf(Resources::ERROR_KEY_NOT_EXIST, $key)\n                )"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/microsoft/azure-storage-common/src/Common/Internal/StorageServiceSettings.php" , line : 112usize , placeholders : & ["sprintf(Resources::INVALID_ACCOUNT_KEY_FORMAT, $key)"] , has_meaningful_message : false , exception : Some ("\\RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/microsoft/azure-storage-common/src/Common/Internal/Serialization/MessageSerializer.php" , line : 76usize , placeholders : & ["Resources::INVALID_MESSAGE_OBJECT_TO_SERIALIZE"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/microsoft/azure-storage-common/src/Common/Internal/Authentication/SharedAccessSignatureAuthScheme.php" , line : 60usize , placeholders : & ["sprintf(\n                    Resources::INVALID_SAS_TOKEN,\n                    $sasToken\n                )"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/microsoft/azure-storage-common/src/Common/SharedAccessSignatureHelper.php" , line : 263usize , placeholders : & ["Resources::SIGNED_PROTOCOL_INVALID_VALIDATION_MSG"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/opis/closure/src/SerializableClosure.php" , line : 193usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("SecurityException") , regex : "^The serialized closure is not signed\\. Make sure you use a security provider for both serialization and unserialization\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/opis/closure/src/SerializableClosure.php" , line : 200usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("SecurityException") , regex : "^Invalid signed closure$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/opis/closure/src/SerializableClosure.php" , line : 213usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("SecurityException") , regex : "^Your serialized closure might have been modified and it's unsafe to be unserialized\\. Make sure you use the same security provider, with the same settings, both for serialization and unserialization\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/opis/closure/src/SerializableClosure.php" , line : 223usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("SecurityException") , regex : "^Invalid signed closure$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/opis/closure/src/SerializableClosure.php" , line : 236usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("SecurityException") , regex : "^Invalid signed closure$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/beberlei/assert/lib/Assert/LazyAssertion.php" , line : 205usize , placeholders : & ["$className" , "Assert::class"] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^(.*) is not \\(a subclass of\\) (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/beberlei/assert/lib/Assert/LazyAssertion.php" , line : 221usize , placeholders : & ["$className" , "LazyAssertionException::class"] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^(.*) is not \\(a subclass of\\) (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/beberlei/assert/lib/Assert/Assertion.php" , line : 2110usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadMethodCallException") , regex : "^Missing the first argument\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/beberlei/assert/lib/Assert/Assertion.php" , line : 2124usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadMethodCallException") , regex : "^Missing the first argument\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/beberlei/assert/lib/Assert/Assertion.php" , line : 2140usize , placeholders : & ["$method"] , has_meaningful_message : true , exception : Some ("BadMethodCallException") , regex : "^No assertion Assertion\\#(.*) exists\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/beberlei/assert/lib/Assert/AssertionChain.php" , line : 175usize , placeholders : & ["$methodName"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Assertion '(.*)' does not exist\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/beberlei/assert/lib/Assert/AssertionChain.php" , line : 237usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^Exception class name must be passed as a string$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/beberlei/assert/lib/Assert/AssertionChain.php" , line : 241usize , placeholders : & ["$className" , "Assertion::class"] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^(.*) is not \\(a subclass of\\) (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/icewind/searchdav/src/DAV/SearchHandler.php" , line : 105usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^requested order by property is not a valid property for this scope$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/icewind/searchdav/src/DAV/SearchHandler.php" , line : 109usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^requested order by property is not sortable$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/icewind/searchdav/src/DAV/SearchHandler.php" , line : 119usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^requested property is not selectable$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/icewind/searchdav/src/DAV/SearchHandler.php" , line : 140usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^requested search property is not a valid property for this scope$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/icewind/searchdav/src/DAV/SearchHandler.php" , line : 144usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^requested search property is not searchable$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/icewind/searchdav/src/XML/BasicSearch.php" , line : 87usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParseException") , regex : "^Missing \\{DAV:\\}from when parsing \\{DAV:\\}basicsearch$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/icewind/streams/src/IteratorDirectory.php" , line : 48usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Invalid context, iterator or array not set$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/icewind/streams/src/IteratorDirectory.php" , line : 109usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^\\$source should be an Iterator or array$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/icewind/streams/src/CountWrapper.php" , line : 64usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid or missing callback$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/icewind/streams/src/WrapperHandler.php" , line : 87usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Invalid stream source$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/icewind/streams/src/WrapperHandler.php" , line : 110usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Invalid context, \"(.*)\" options not set$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/icewind/streams/src/UrlCallback.php" , line : 133usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^stat is not supported due to php bug 50526$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/icewind/streams/src/Wrapper.php" , line : 40usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Invalid context, source not set$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/phpseclib/phpseclib/phpseclib/bootstrap.php" , line : 11usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^Overloading of string functions using mbstring\\.func_overload is not supported by phpseclib\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/StreamWrapper.php" , line : 41usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The stream must be readable, writable, or both\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/ServerRequest.php" , line : 100usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Invalid value in files specification$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Response.php" , line : 145usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Status code must be an integer value\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Response.php" , line : 152usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Status code must be an integer value between 1xx and 5xx\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/FnStream.php" , line : 45usize , placeholders : & ["str_replace('_fn_', '', $name)"] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^(.*)\\(\\) is not implemented in the FnStream$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/FnStream.php" , line : 66usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^FnStream should never be unserialized$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Stream.php" , line : 50usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Stream must be a resource$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Stream.php" , line : 92usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Stream is detached$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Stream.php" , line : 98usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Unable to read stream contents$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Stream.php" , line : 170usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Stream is detached$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Stream.php" , line : 179usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Stream is detached$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Stream.php" , line : 185usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Unable to determine stream position$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Stream.php" , line : 201usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Stream is detached$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Stream.php" , line : 204usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Stream is not seekable$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Stream.php" , line : 207usize , placeholders : & ["$offset" , "var_export($whence, true)"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Unable to seek to stream position (.*) with whence (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Stream.php" , line : 215usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Stream is detached$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Stream.php" , line : 218usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Cannot read from non\\-readable stream$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Stream.php" , line : 221usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Length parameter cannot be negative$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Stream.php" , line : 230usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Unable to read from stream$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Stream.php" , line : 239usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Stream is detached$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Stream.php" , line : 242usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Cannot write to a non\\-writable stream$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Stream.php" , line : 250usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Unable to write to stream$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Request.php" , line : 79usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Invalid request target provided; cannot contain whitespace$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Request.php" , line : 149usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Method must be a non\\-empty string\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/CachingStream.php" , line : 66usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid whence$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Message.php" , line : 32usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Unknown message type$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Message.php" , line : 121usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid message$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Message.php" , line : 129usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid message: Missing header delimiter$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Message.php" , line : 137usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid message: Missing status line$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Message.php" , line : 154usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid header syntax: Obsolete line folding$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Message.php" , line : 157usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid header syntax$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Message.php" , line : 210usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid request string$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Message.php" , line : 240usize , placeholders : & ["$data['start-line']"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid response string: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/LimitStream.php" , line : 76usize , placeholders : & ["sprintf(\n                'Cannot seek to offset %s with whence %s',\n                $offset,\n                $whence\n            )"] , has_meaningful_message : false , exception : Some ("\\RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/LimitStream.php" , line : 119usize , placeholders : & ["$offset"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Could not seek to stream offset (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/PumpStream.php" , line : 103usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Cannot seek a PumpStream$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/PumpStream.php" , line : 113usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Cannot write to a PumpStream$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/UploadedFile.php" , line : 101usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Invalid stream or file provided for UploadedFile$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/UploadedFile.php" , line : 115usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Upload file error status must be an integer$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/UploadedFile.php" , line : 121usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Invalid error status for UploadedFile$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/UploadedFile.php" , line : 137usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Upload file size must be an integer$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/UploadedFile.php" , line : 173usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Upload file client filename must be a string or null$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/UploadedFile.php" , line : 189usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Upload file client media type must be a string or null$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/UploadedFile.php" , line : 221usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^Cannot retrieve stream due to upload error$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/UploadedFile.php" , line : 225usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^Cannot retrieve stream after it has already been moved$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/UploadedFile.php" , line : 263usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Invalid path provided for move operation; must be a non\\-empty string$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/UploadedFile.php" , line : 282usize , placeholders : & ["sprintf('Uploaded file could not be moved to %s', $targetPath)"] , has_meaningful_message : false , exception : Some ("RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Utils.php" , line : 352usize , placeholders : & ["gettype($resource)"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid resource type: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Utils.php" , line : 426usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^URI must be a string or UriInterface$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/MessageTrait.php" , line : 172usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Header value can not be an empty array\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/MessageTrait.php" , line : 196usize , placeholders : & ["sprintf(\n                    'Header value must be scalar or null but %s provided.',\n                    is_object($value) ? get_class($value) : gettype($value)\n                )"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/MessageTrait.php" , line : 219usize , placeholders : & ["sprintf(\n                'Header name must be a string but %s provided.',\n                is_object($header) ? get_class($header) : gettype($header)\n            )"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/MessageTrait.php" , line : 226usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Header name can not be empty\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/MessageTrait.php" , line : 230usize , placeholders : & ["sprintf(\n                    '\"%s\" is not valid header name',\n                    $header\n                )"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/MessageTrait.php" , line : 267usize , placeholders : & ["sprintf('\"%s\" is not valid header value', $value)"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/MultipartStream.php" , line : 86usize , placeholders : & ["$key"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A '(.*)' key is required$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/StreamDecoratorTrait.php" , line : 37usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^(.*) not found on class$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/StreamDecoratorTrait.php" , line : 150usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/BufferStream.php" , line : 86usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Cannot seek a BufferStream$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/BufferStream.php" , line : 96usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Cannot determine the position of a BufferStream$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/NoSeekStream.php" , line : 18usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Cannot seek a NoSeekStream$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Uri.php" , line : 72usize , placeholders : & ["$uri"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Unable to parse URI: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Uri.php" , line : 625usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Scheme must be a string$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Uri.php" , line : 641usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^User info must be a string$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Uri.php" , line : 661usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Host must be a string$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Uri.php" , line : 682usize , placeholders : & ["sprintf('Invalid port: %d. Must be between 0 and 65535', $port)"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Uri.php" , line : 750usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Path must be a string$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Uri.php" , line : 772usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Query and fragment must be a string$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Uri.php" , line : 795usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The path of a URI without an authority must not start with two slashes \"//\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Uri.php" , line : 798usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A relative URI must not have a path beginning with a segment containing a colon$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/AppendStream.php" , line : 54usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Each stream must be readable$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/AppendStream.php" , line : 156usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^This AppendStream is not seekable$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/AppendStream.php" , line : 158usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^The AppendStream can only seek with SEEK_SET$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/AppendStream.php" , line : 168usize , placeholders : & ["$i"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Unable to seek stream (.*) of the AppendStream$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/AppendStream.php" , line : 239usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Cannot write to an AppendStream$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/psr7/src/Query.php" , line : 88usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid type$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/promises/src/Utils.php" , line : 221usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("AggregateException") , regex : "^Not enough promises to fulfill count$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/promises/src/Promise.php" , line : 131usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Cannot fulfill or reject a promise with itself$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/promises/src/RejectedPromise.php" , line : 18usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^You cannot create a RejectedPromise with a promise\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/promises/src/RejectedPromise.php" , line : 77usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Cannot resolve a rejected promise$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/promises/src/RejectedPromise.php" , line : 83usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Cannot reject a rejected promise$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/promises/src/FulfilledPromise.php" , line : 18usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^You cannot create a FulfilledPromise with a promise\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/promises/src/FulfilledPromise.php" , line : 71usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Cannot resolve a fulfilled promise$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/promises/src/FulfilledPromise.php" , line : 77usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Cannot reject a fulfilled promise$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/HandlerStack.php" , line : 206usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^No handler has been specified$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/HandlerStack.php" , line : 228usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Middleware not found: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Handler/CurlFactory.php" , line : 363usize , placeholders : & ["$options['verify']"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^SSL CA bundle not found: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Handler/CurlFactory.php" , line : 406usize , placeholders : & ["\\sprintf('Directory %s does not exist for sink value of %s', \\dirname($sink), $sink)"] , has_meaningful_message : false , exception : Some ("\\RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Handler/CurlFactory.php" , line : 460usize , placeholders : & ["$cert"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^SSL certificate not found: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Handler/CurlFactory.php" , line : 483usize , placeholders : & ["$sslKey"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^SSL private key not found: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Handler/CurlFactory.php" , line : 491usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^progress client option must be callable$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Handler/CurlFactory.php" , line : 556usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^on_headers must be callable$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Handler/EasyHandle.php" , line : 110usize , placeholders : & ["$msg"] , has_meaningful_message : false , exception : Some ("\\BadMethodCallException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Handler/MockHandler.php" , line : 83usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Mock queue is empty$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Handler/MockHandler.php" , line : 96usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^on_headers must be callable$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Handler/MockHandler.php" , line : 162usize , placeholders : & ["Utils::describeType($value)"] , has_meaningful_message : true , exception : Some ("\\TypeError") , regex : "^Expected a Response, Promise, Throwable or callable\\. Found (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Handler/HeaderProcessor.php" , line : 24usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Expected a non\\-empty array of header data$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Handler/HeaderProcessor.php" , line : 31usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^HTTP version missing from header data$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Handler/HeaderProcessor.php" , line : 37usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^HTTP status code missing from header data$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Handler/CurlMultiHandler.php" , line : 94usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Can not get other property as '_mh'\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Handler/CurlMultiHandler.php" , line : 100usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Can not initialize curl multi handle\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Handler/StreamHandler.php" , line : 253usize , placeholders : & ["\\trim($message)"] , has_meaningful_message : false , exception : Some ("\\RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Handler/StreamHandler.php" , line : 270usize , placeholders : & ["\\sprintf(\"The scheme '%s' is not supported.\", $request->getUri()->getScheme())"] , has_meaningful_message : false , exception : Some ("RequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Handler/StreamHandler.php" , line : 290usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^on_headers must be callable$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Handler/StreamHandler.php" , line : 304usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^stream_context must be an array$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Handler/StreamHandler.php" , line : 311usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Microsoft NTLM authentication only supported with curl handler$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Handler/StreamHandler.php" , line : 328usize , placeholders : & ["sprintf('Connection refused for URI %s', $uri)"] , has_meaningful_message : false , exception : Some ("ConnectException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Handler/StreamHandler.php" , line : 351usize , placeholders : & ["\\sprintf(\"Could not resolve IPv4 address for host '%s'\", $uri->getHost())"] , has_meaningful_message : false , exception : Some ("ConnectException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Handler/StreamHandler.php" , line : 358usize , placeholders : & ["\\sprintf(\"Could not resolve IPv6 address for host '%s'\", $uri->getHost())"] , has_meaningful_message : false , exception : Some ("ConnectException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Handler/StreamHandler.php" , line : 490usize , placeholders : & ["$value"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^SSL CA bundle not found: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Handler/StreamHandler.php" , line : 493usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid verify request option$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Handler/StreamHandler.php" , line : 512usize , placeholders : & ["$value"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^SSL certificate not found: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Pool.php" , line : 62usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Each value yielded by the iterator must be a Psr7\\\\Http\\\\Message\\\\RequestInterface or a callable that returns a promise that fulfills with a Psr7\\\\Message\\\\Http\\\\ResponseInterface object\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/RedirectMiddleware.php" , line : 61usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^allow_redirects must be true, false, or array$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/RedirectMiddleware.php" , line : 155usize , placeholders : & ["$max"] , has_meaningful_message : true , exception : Some ("TooManyRedirectsException") , regex : "^Will not follow more than (.*) redirects$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/RedirectMiddleware.php" , line : 223usize , placeholders : & ["\\sprintf('Redirect URI, %s, does not use one of the allowed redirect protocols: %s', $location, \\implode(', ', $protocols))"] , has_meaningful_message : false , exception : Some ("BadResponseException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Cookie/SessionCookieJar.php" , line : 74usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Invalid cookie data$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Cookie/FileCookieJar.php" , line : 69usize , placeholders : & ["$filename"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Unable to save file (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Cookie/FileCookieJar.php" , line : 86usize , placeholders : & ["$filename"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Unable to load file (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Cookie/FileCookieJar.php" , line : 98usize , placeholders : & ["$filename"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Invalid cookie file: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Cookie/CookieJar.php" , line : 173usize , placeholders : & ["$result"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Invalid cookie: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Cookie/SetCookie.php" , line : 80usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Unable to replace the default values for the Cookie\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Utils.php" , line : 102usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^GuzzleHttp requires cURL, the allow_url_fopen ini setting, or a custom HTTP handler\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Utils.php" , line : 170usize , placeholders : & ["<<< EOT\nNo system CA bundle could be found in any of the the common system locations.\nPHP versions earlier than 5.6 are not properly configured to use the system's\nCA bundle by default. In order to verify peer certificates, you will need to\nsupply the path on disk to a certificate bundle to the 'verify' request\noption: http://docs.guzzlephp.org/en/latest/clients.html#verify. If you do not\nneed a specific certificate bundle, then Mozilla provides a commonly used CA\nbundle which can be downloaded here (provided by the maintainer of cURL):\nhttps://curl.haxx.se/ca/cacert.pem. Once\nyou have a CA bundle available on disk, you can set the 'openssl.cafile' PHP\nini setting to point to the path to the file, allowing you to omit the 'verify'\nrequest option. See https://curl.haxx.se/docs/sslcerts.html for more\ninformation.\nEOT"] , has_meaningful_message : false , exception : Some ("\\RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Utils.php" , line : 224usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Empty host provided$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Utils.php" , line : 275usize , placeholders : & ["\\json_last_error_msg()"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^json_decode error: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Utils.php" , line : 296usize , placeholders : & ["\\json_last_error_msg()"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^json_encode error: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Utils.php" , line : 344usize , placeholders : & ["$errorMessage"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Utils.php" , line : 380usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Error") , regex : "^ext\\-idn or symfony/polyfill\\-intl\\-idn not loaded or too old$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Middleware.php" , line : 33usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^cookies must be an instance of GuzzleHttp\\\\Cookie\\\\CookieJarInterface$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Middleware.php" , line : 88usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^history container must be an array or object implementing ArrayAccess$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Middleware.php" , line : 196usize , placeholders : & ["sprintf('Argument 2 to %s::log() must be of type %s', self::class, MessageFormatterInterface::class)"] , has_meaningful_message : false , exception : Some ("\\LogicException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/guzzlehttp/guzzle/src/Middleware.php" , line : 204usize , placeholders : & ["$logLevel"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/guzzlehttp/guzzle/src/Middleware.php" , line : 210usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Client.php" , line : 62usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^handler must be a callable$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Client.php" , line : 84usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Magic request methods require a URI and optional options array$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Client.php" , line : 299usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^headers must be an array$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Client.php" , line : 348usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^The headers array must have header name as keys\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Client.php" , line : 356usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^You cannot use form_params and multipart at the same time\\. Use the form_params option if you want to send application/x\\-www\\-form\\-urlencoded requests, and the multipart option to send multipart/form\\-data requests\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Client.php" , line : 426usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^query must be a string or array$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/guzzle/src/Client.php" , line : 436usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^sink must not be a boolean$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/guzzlehttp/uri-template/src/UriTemplate.php" , line : 95usize , placeholders : & ["\\sprintf('Unable to process template: %s', \\preg_last_error_msg())"] , has_meaningful_message : false , exception : Some ("\\RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/mlocati/ip-lib/src/Range/Pattern.php" , line : 184usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^@todo$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/mlocati/ip-lib/src/Range/AbstractRange.php" , line : 38usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^@todo$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/mtdowling/jmespath.php/src/Parser.php" , line : 517usize , placeholders : & ["$method"] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Call to undefined method (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/mtdowling/jmespath.php/src/CompilerRuntime.php" , line : 33usize , placeholders : & ["$dir"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Unable to create cache directory: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/mtdowling/jmespath.php/src/CompilerRuntime.php" , line : 76usize , placeholders : & ["sprintf(\n                'Unable to write the compiled PHP code to: %s (%s)',\n                $filename,\n                var_export(error_get_last(), true)\n            )"] , has_meaningful_message : false , exception : Some ("\\RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/mtdowling/jmespath.php/src/TreeCompiler.php" , line : 415usize , placeholders : & ["sprintf('Invalid node encountered: %s', json_encode($args[0]))"] , has_meaningful_message : false , exception : Some ("\\RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/mtdowling/jmespath.php/src/TreeInterpreter.php" , line : 214usize , placeholders : & ["$node['type']"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Unknown node type: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/mtdowling/jmespath.php/src/TreeInterpreter.php" , line : 232usize , placeholders : & ["$cmp"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Invalid comparison: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/mtdowling/jmespath.php/src/FnDispatcher.php" , line : 87usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^not_null\\(\\) expects 1 or more arguments, 0 were provided$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/mtdowling/jmespath.php/src/FnDispatcher.php" , line : 167usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Cannot reverse provided argument$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/mtdowling/jmespath.php/src/FnDispatcher.php" , line : 258usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^merge\\(\\) expects 1 or more arguments, 0 were provided$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/mtdowling/jmespath.php/src/FnDispatcher.php" , line : 287usize , placeholders : & ["sprintf('Argument %d of %s %s', $pos, $fn, $msg)"] , has_meaningful_message : false , exception : Some ("\\RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/mtdowling/jmespath.php/src/FnDispatcher.php" , line : 291usize , placeholders : & ["sprintf('Type error: %s %s', $from, $msg)"] , has_meaningful_message : false , exception : Some ("\\RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/mtdowling/jmespath.php/src/FnDispatcher.php" , line : 301usize , placeholders : & ["sprintf($err, $from)"] , has_meaningful_message : false , exception : Some ("\\RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/mtdowling/jmespath.php/src/FnDispatcher.php" , line : 405usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Call to undefined function (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/mtdowling/jmespath.php/src/Utils.php" , line : 65usize , placeholders : & ["get_class($arg)"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Unable to determine JMESPath type from (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/mtdowling/jmespath.php/src/Utils.php" , line : 196usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Expects string or array$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/mtdowling/jmespath.php/src/Utils.php" , line : 221usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^step cannot be 0$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/psr/log/Psr/Log/AbstractLogger.php" , line : 24usize , placeholders : & ["LogLevel::EMERGENCY"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/psr/log/Psr/Log/AbstractLogger.php" , line : 40usize , placeholders : & ["LogLevel::ALERT"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/psr/log/Psr/Log/AbstractLogger.php" , line : 55usize , placeholders : & ["LogLevel::CRITICAL"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/psr/log/Psr/Log/AbstractLogger.php" , line : 69usize , placeholders : & ["LogLevel::ERROR"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/psr/log/Psr/Log/AbstractLogger.php" , line : 85usize , placeholders : & ["LogLevel::WARNING"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/psr/log/Psr/Log/AbstractLogger.php" , line : 98usize , placeholders : & ["LogLevel::NOTICE"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/psr/log/Psr/Log/AbstractLogger.php" , line : 113usize , placeholders : & ["LogLevel::INFO"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/psr/log/Psr/Log/AbstractLogger.php" , line : 126usize , placeholders : & ["LogLevel::DEBUG"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/psr/log/Psr/Log/LoggerTrait.php" , line : 25usize , placeholders : & ["LogLevel::EMERGENCY"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/psr/log/Psr/Log/LoggerTrait.php" , line : 41usize , placeholders : & ["LogLevel::ALERT"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/psr/log/Psr/Log/LoggerTrait.php" , line : 56usize , placeholders : & ["LogLevel::CRITICAL"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/psr/log/Psr/Log/LoggerTrait.php" , line : 70usize , placeholders : & ["LogLevel::ERROR"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/psr/log/Psr/Log/LoggerTrait.php" , line : 86usize , placeholders : & ["LogLevel::WARNING"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/psr/log/Psr/Log/LoggerTrait.php" , line : 99usize , placeholders : & ["LogLevel::NOTICE"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/psr/log/Psr/Log/LoggerTrait.php" , line : 114usize , placeholders : & ["LogLevel::INFO"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/psr/log/Psr/Log/LoggerTrait.php" , line : 127usize , placeholders : & ["LogLevel::DEBUG"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/FS/Node.php" , line : 75usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^This node cannot be renamed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/FS/Directory.php" , line : 79usize , placeholders : & ["$path"] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\NotFound") , regex : "^File with name (.*) could not be located$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/PartialUpdate/Plugin.php" , line : 115usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\MethodNotAllowed") , regex : "^The target resource does not support the PATCH method\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/PartialUpdate/Plugin.php" , line : 121usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\BadRequest") , regex : "^No valid \"X\\-Update\\-Range\" found in the headers$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/PartialUpdate/Plugin.php" , line : 129usize , placeholders : & ["$contentType"] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\UnsupportedMediaType") , regex : "^Unknown Content\\-Type header \"(.*)\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/PartialUpdate/Plugin.php" , line : 134usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\LengthRequired") , regex : "^A Content\\-Length header is required$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/PartialUpdate/Plugin.php" , line : 143usize , placeholders : & ["$range[2]" , "$range[1]"] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\RequestedRangeNotSatisfiable") , regex : "^The end offset \\((.*)\\) is lower than the start offset \\((.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/PartialUpdate/Plugin.php" , line : 146usize , placeholders : & ["$len" , "$range[1]" , "$range[2]"] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\RequestedRangeNotSatisfiable") , regex : "^Actual data length \\((.*)\\) is not consistent with begin \\((.*)\\) and end \\((.*)\\) offsets$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Tree.php" , line : 76usize , placeholders : & ["$path"] , has_meaningful_message : true , exception : Some ("Exception\\NotFound") , regex : "^Could not find node at path: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/PropPatch.php" , line : 270usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("UnexpectedValueException") , regex : "^A callback sent to handle\\(\\) did not return an int or a bool$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/PropPatch.php" , line : 314usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("UnexpectedValueException") , regex : "^A callback sent to handle\\(\\) did not return an array or a bool$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/CorePlugin.php" , line : 159usize , placeholders : & ["$range[0]" , "$nodeSize"] , has_meaningful_message : true , exception : Some ("Exception\\RequestedRangeNotSatisfiable") , regex : "^The start offset \\((.*)\\) exceeded the size of the entity \\((.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/CorePlugin.php" , line : 162usize , placeholders : & ["$range[1]" , "$range[0]"] , has_meaningful_message : true , exception : Some ("Exception\\RequestedRangeNotSatisfiable") , regex : "^The end offset \\((.*)\\) is lower than the start offset \\((.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/CorePlugin.php" , line : 183usize , placeholders : & ["$start" , "$consumed"] , has_meaningful_message : true , exception : Some ("Exception\\RequestedRangeNotSatisfiable") , regex : "^The start offset \\((.*)\\) exceeded the size of the entity \\((.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/CorePlugin.php" , line : 313usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("BadRequest") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/CorePlugin.php" , line : 369usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("BadRequest") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/CorePlugin.php" , line : 442usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception\\BadRequest") , regex : "^Content\\-Range on PUT requests are forbidden\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/CorePlugin.php" , line : 471usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception\\Forbidden") , regex : "^This server is not compatible with OS/X finder\\. Consider using a different WebDAV client or webserver\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/CorePlugin.php" , line : 490usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception\\Conflict") , regex : "^PUT is not allowed on non\\-files\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/CorePlugin.php" , line : 537usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception\\UnsupportedMediaType") , regex : "^The request body for the MKCOL request must have an xml Content\\-Type$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/CorePlugin.php" , line : 543usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("Exception\\BadRequest") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/CorePlugin.php" , line : 549usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception\\BadRequest") , regex : "^The mkcol request must include a \\{DAV:\\}resourcetype property$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/CorePlugin.php" , line : 692usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Exception\\ReportNotSupported") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/sabre/dav/lib/DAV/CorePlugin.php" , line : 879usize , placeholders : & ["$logLevel"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Sharing/Plugin.php" , line : 115usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Sharing is not allowed on this node$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Sharing/Plugin.php" , line : 192usize , placeholders : & ["$documentType"] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^Unexpected document type: (.*) for this Content\\-Type$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Sharing/Plugin.php" , line : 285usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^The \"href\" POST parameter is required$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Sharing/Plugin.php" , line : 288usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^The \"access\" POST parameter is required$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Sharing/Plugin.php" , line : 298usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^The \"access\" POST must be readwrite, read or no\\-access$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Sync/Plugin.php" , line : 105usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\ReportNotSupported") , regex : "^The \\{DAV:\\}sync\\-collection REPORT is not supported on this url\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Sync/Plugin.php" , line : 109usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\ReportNotSupported") , regex : "^No sync information is available at this node$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Sync/Plugin.php" , line : 116usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\InvalidSyncToken") , regex : "^Invalid or unknown sync token$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Sync/Plugin.php" , line : 124usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\InvalidSyncToken") , regex : "^Invalid or unknown sync token$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Client.php" , line : 119usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A baseUri must be provided$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Client.php" , line : 232usize , placeholders : & ["$response"] , has_meaningful_message : false , exception : Some ("HTTP\\ClientHttpException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Client.php" , line : 280usize , placeholders : & ["$response"] , has_meaningful_message : false , exception : Some ("HTTP\\ClientHttpException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Client.php" , line : 299usize , placeholders : & ["implode(', ', $errorProperties)"] , has_meaningful_message : true , exception : Some ("HTTP\\ClientException") , regex : "^PROPPATCH failed\\. The following properties errored: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/FSExt/Directory.php" , line : 48usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\Forbidden") , regex : "^Permission denied to \\. and \\.\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/FSExt/Directory.php" , line : 70usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\Forbidden") , regex : "^Permission denied to \\. and \\.\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/FSExt/Directory.php" , line : 94usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\NotFound") , regex : "^File could not be located$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/FSExt/Directory.php" , line : 97usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\Forbidden") , regex : "^Permission denied to \\. and \\.\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/FSExt/Directory.php" , line : 116usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\Forbidden") , regex : "^Permission denied to \\. and \\.\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Collection.php" , line : 42usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : Some ("Exception\\NotFound") , regex : "^File not found: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Collection.php" , line : 92usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : Some ("Exception\\Forbidden") , regex : "^Permission denied to create file \\(filename (.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Collection.php" , line : 104usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception\\Forbidden") , regex : "^Permission denied to create directory$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/SimpleCollection.php" , line : 53usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Children must be specified as strings, arrays or instances of Sabre\\\\DAV\\\\INode$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/SimpleCollection.php" , line : 97usize , placeholders : & ["$name" , "$this->getName()"] , has_meaningful_message : true , exception : Some ("Exception\\NotFound") , regex : "^File not found: (.*) in '(.*)'$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Xml/Request/SyncCollectionReport.php" , line : 91usize , placeholders : & ["$elem"] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^The (.*) element in the \\{DAV:\\}sync\\-collection report is required$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Xml/Element/Sharee.php" , line : 94usize , placeholders : & ["$k"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Unknown property: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Xml/Element/Sharee.php" , line : 172usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^Every \\{DAV:\\}sharee must have a \\{DAV:\\}href child\\-element$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Xml/Element/Sharee.php" , line : 183usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^Every \\{DAV:\\}sharee must have a \\{DAV:\\}share\\-access child element$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Xml/Element/Prop.php" , line : 99usize , placeholders : & ["$type"] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Could not use this type as a deserializer: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Xml/Property/ShareAccess.php" , line : 133usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^Invalid value for \\{DAV:\\}share\\-access element$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Xml/Property/SupportedReportSet.php" , line : 66usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception") , regex : "^Reportname must be in clark\\-notation$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Locks/Plugin.php" , line : 170usize , placeholders : & ["$existingLock"] , has_meaningful_message : false , exception : Some ("DAV\\Exception\\ConflictingLock") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Locks/Plugin.php" , line : 178usize , placeholders : & ["$existingLock"] , has_meaningful_message : false , exception : Some ("DAV\\Exception\\ConflictingLock") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Locks/Plugin.php" , line : 200usize , placeholders : & ["reset($existingLocks)"] , has_meaningful_message : false , exception : Some ("DAV\\Exception\\Locked") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Locks/Plugin.php" , line : 202usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\BadRequest") , regex : "^An xml body is required for lock requests$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Locks/Plugin.php" , line : 260usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\BadRequest") , regex : "^No lock token was supplied$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Locks/Plugin.php" , line : 284usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("DAV\\Exception\\LockTokenMatchesRequestUri") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Locks/Plugin.php" , line : 360usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\BadRequest") , regex : "^Invalid HTTP timeout header$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Locks/Plugin.php" , line : 504usize , placeholders : & ["reset($mustLocks)"] , has_meaningful_message : false , exception : Some ("DAV\\Exception\\Locked") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/StringUtil.php" , line : 50usize , placeholders : & ["$collation"] , has_meaningful_message : true , exception : Some ("Exception\\BadRequest") , regex : "^Collation type: (.*) is not supported$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/StringUtil.php" , line : 63usize , placeholders : & ["$matchType"] , has_meaningful_message : true , exception : Some ("Exception\\BadRequest") , regex : "^Match\\-type: (.*) is not supported$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/File.php" , line : 42usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception\\Forbidden") , regex : "^Permission denied to change data$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/File.php" , line : 54usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception\\Forbidden") , regex : "^Permission denied to read this file$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/TemporaryFileFilterPlugin.php" , line : 220usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception\\PreconditionFailed") , regex : "^The resource already exists, and an If\\-None\\-Match header was supplied$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Server.php" , line : 227usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Invalid argument passed to constructor\\. Argument must either be an instance of Sabre\\\\DAV\\\\Tree, Sabre\\\\DAV\\\\INode, an array or null$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Server.php" , line : 387usize , placeholders : & ["$uri" , "$pathInfo"] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^The REQUEST_URI \\((.*)\\) did not end with the contents of PATH_INFO \\((.*)\\)\\. This server might be misconfigured\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Server.php" , line : 479usize , placeholders : & ["$exMessage"] , has_meaningful_message : false , exception : Some ("Exception\\NotImplemented") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Server.php" , line : 487usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^No subsystem set a valid HTTP status code\\. Something must have interrupted the request without providing further detail\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Server.php" , line : 576usize , placeholders : & ["$uri" , "$this->getBaseUri()"] , has_meaningful_message : true , exception : Some ("Exception\\Forbidden") , regex : "^Requested uri \\((.*)\\) is out of base uri \\((.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Server.php" , line : 725usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception\\BadRequest") , regex : "^The destination header was not supplied$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Server.php" , line : 739usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception\\BadRequest") , regex : "^The HTTP Overwrite header should be either T or F$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Server.php" , line : 746usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception\\UnsupportedMediaType") , regex : "^The destination node is not a collection$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Server.php" , line : 750usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception\\Conflict") , regex : "^The destination node is not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Server.php" , line : 759usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception\\PreconditionFailed") , regex : "^The destination node already exists, and the overwrite header is set to false$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Server.php" , line : 768usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception\\Forbidden") , regex : "^Source and destination uri are identical\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Server.php" , line : 771usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception\\Conflict") , regex : "^The destination may not be part of the same subtree as the source path\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Server.php" , line : 1081usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception\\Conflict") , regex : "^Files cannot be created in non\\-existent collections$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Server.php" , line : 1085usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception\\Conflict") , regex : "^Files can only be created as children of collections$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Server.php" , line : 1171usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception\\Conflict") , regex : "^Parent node does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Server.php" , line : 1176usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception\\Conflict") , regex : "^Parent node is not a collection$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Server.php" , line : 1184usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception\\MethodNotAllowed") , regex : "^The resource you tried to create already exists$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Server.php" , line : 1207usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception\\InvalidResourceType") , regex : "^The \\{DAV:\\}resourcetype you specified is not supported here\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Server.php" , line : 1304usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception\\PreconditionFailed") , regex : "^An If\\-Match header was specified and the resource did not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Server.php" , line : 1331usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception\\PreconditionFailed") , regex : "^An If\\-Match header was specified, but none of the specified ETags matched\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Server.php" , line : 1377usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception\\PreconditionFailed") , regex : "^An If\\-None\\-Match header was specified, but the ETag matched \\(or \\* was specified\\)\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Server.php" , line : 1423usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception\\PreconditionFailed") , regex : "^An If\\-Unmodified\\-Since header was specified, but the entity has been changed since the specified date\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Server.php" , line : 1483usize , placeholders : & ["$uri"] , has_meaningful_message : true , exception : Some ("Exception\\PreconditionFailed") , regex : "^Failed to find a valid token/etag combination for (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Browser/Plugin.php" , line : 553usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\NotFound") , regex : "^Path does not exist, or escaping from the base path was detected$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Browser/Plugin.php" , line : 559usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\NotFound") , regex : "^Path does not exist, or escaping from the base path was detected$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Node.php" , line : 37usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception\\Forbidden") , regex : "^Permission denied to delete node$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Node.php" , line : 49usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception\\Forbidden") , regex : "^Permission denied to rename file$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Auth/Plugin.php" , line : 152usize , placeholders : & ["implode(', ', $authResult[1])"] , has_meaningful_message : false , exception : Some ("NotAuthenticated") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Auth/Plugin.php" , line : 175usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Sabre\\DAV\\Exception") , regex : "^No authentication backends were configured on this server\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Auth/Plugin.php" , line : 185usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Sabre\\DAV\\Exception") , regex : "^The authentication backend did not return a correct value from the check\\(\\) method\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Auth/Backend/AbstractDigest.php" , line : 116usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception") , regex : "^The returned value from getDigestHash must be a string or null$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Auth/Backend/File.php" , line : 51usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception") , regex : "^Malformed htdigest file\\. Every line should contain 2 colons$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAV/Auth/Backend/File.php" , line : 56usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception") , regex : "^Malformed htdigest file\\. Invalid md5 hash$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAVACL/PrincipalCollection.php" , line : 65usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidResourceType") , regex : "^Only resources of type \\{DAV:\\}principal may be created here$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAVACL/FS/Collection.php" , line : 69usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotFound") , regex : "^File could not be located$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAVACL/FS/Collection.php" , line : 72usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Permission denied to \\. and \\.\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAVACL/PrincipalBackend/PDO.php" , line : 355usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception") , regex : "^Principal not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAVACL/PrincipalBackend/PDO.php" , line : 379usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception") , regex : "^Principal not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAVACL/PrincipalBackend/PDO.php" , line : 416usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception") , regex : "^Principal not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAVACL/ACLTrait.php" , line : 75usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Sabre\\DAV\\Exception\\Forbidden") , regex : "^Setting ACL is not supported on this node$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAVACL/AbstractPrincipalCollection.php" , line : 93usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\MethodNotAllowed") , regex : "^Listing members of this collection is disabled$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAVACL/AbstractPrincipalCollection.php" , line : 116usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\NotFound") , regex : "^Principal with name (.*) not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAVACL/Xml/Property/Acl.php" , line : 178usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\BadRequest") , regex : "^Each \\{DAV:\\}ace element must have one \\{DAV:\\}principal element$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAVACL/Xml/Property/Acl.php" , line : 200usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\NotImplemented") , regex : "^Every \\{DAV:\\}ace element must have a \\{DAV:\\}grant element\\. \\{DAV:\\}deny is not yet supported$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAVACL/Xml/Property/Principal.php" , line : 68usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception") , regex : "^The href argument must be specified for the HREF principal type\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAVACL/Xml/Property/Principal.php" , line : 183usize , placeholders : & ["$tree['name']"] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^Unknown or unsupported principal type: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAVACL/Xml/Request/PrincipalSearchPropertySetReport.php" , line : 48usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^The \\{DAV:\\}principal\\-search\\-property\\-set element must be empty$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAVACL/Xml/Request/PrincipalPropertySearchReport.php" , line : 105usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^The \\{DAV:\\}property\\-search element must contain one \\{DAV:\\}match and one \\{DAV:\\}prop element$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAVACL/Xml/Request/PrincipalPropertySearchReport.php" , line : 117usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^The \\{DAV:\\}principal\\-property\\-search report must contain at least 1 \\{DAV:\\}property\\-search element$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAVACL/Principal.php" , line : 49usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception") , regex : "^The principal properties must at least contain the 'uri' key$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAVACL/Plugin.php" , line : 217usize , placeholders : & ["implode(', ', $reasons)" , "implode(', ', $failed)" , "$uri"] , has_meaningful_message : true , exception : Some ("NotAuthenticated") , regex : "^(.*)\\. Login was needed for privilege: (.*) on (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAVACL/Plugin.php" , line : 220usize , placeholders : & ["$uri"] , has_meaningful_message : false , exception : Some ("NeedPrivileges") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/3rdparty/sabre/dav/lib/DAVACL/Plugin.php" , line : 658usize , placeholders : & ["$current['privilege']"] , has_meaningful_message : true , exception : None , regex : "^A node has the \"(.*)\" in its ACL list, but this privilege was not reported in the supportedPrivilegeSet list\\. This will be ignored\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAVACL/Plugin.php" , line : 770usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^The Auth plugin must be loaded before the ACL plugin if you want to allow unauthenticated access\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAVACL/Plugin.php" , line : 1048usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception") , regex : "^The group\\-member\\-set property MUST be an instance of Sabre\\\\DAV\\\\Property\\\\HrefList or null$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAVACL/Plugin.php" , line : 1114usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\BadRequest") , regex : "^XML body expected in ACL request$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAVACL/Plugin.php" , line : 1127usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\MethodNotAllowed") , regex : "^This node does not support the ACL method$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAVACL/Plugin.php" , line : 1153usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception\\AceConflict") , regex : "^This resource contained a protected \\{DAV:\\}ace, but this privilege did not occur in the ACL request$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAVACL/Plugin.php" , line : 1160usize , placeholders : & ["$newAce['privilege']"] , has_meaningful_message : true , exception : Some ("Exception\\NotSupportedPrivilege") , regex : "^The privilege you specified \\((.*)\\) is not recognized by this server$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAVACL/Plugin.php" , line : 1164usize , placeholders : & ["$newAce['privilege']"] , has_meaningful_message : true , exception : Some ("Exception\\NoAbstract") , regex : "^The privilege you specified \\((.*)\\) is an abstract privilege$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAVACL/Plugin.php" , line : 1171usize , placeholders : & ["$newAce['principal']"] , has_meaningful_message : true , exception : Some ("Exception\\NotRecognizedPrincipal") , regex : "^The specified principal \\((.*)\\) does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAVACL/Plugin.php" , line : 1174usize , placeholders : & ["$newAce['principal']"] , has_meaningful_message : true , exception : Some ("Exception\\NotRecognizedPrincipal") , regex : "^The specified uri \\((.*)\\) is not a principal$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAVACL/Plugin.php" , line : 1202usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^The principal\\-match report is only defined on Depth: 0$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAVACL/Plugin.php" , line : 1375usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\BadRequest") , regex : "^This report is only defined when Depth: 0$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAVACL/Plugin.php" , line : 1426usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^Depth must be 0$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAVACL/Plugin.php" , line : 1461usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^The \\{DAV:\\}acl\\-principal\\-prop\\-set REPORT only supports Depth 0$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/DAVACL/Plugin.php" , line : 1470usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Could not fetch ACL rules for this path$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Xml/Property/ScheduleCalendarTransp.php" , line : 49usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The value must either be specified as \"transparent\" or \"opaque\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Xml/Property/SupportedCalendarComponentSet.php" , line : 113usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParseException") , regex : "^supported\\-calendar\\-component\\-set must have at least one CALDAV:comp element$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Xml/Request/CalendarQueryReport.php" , line : 117usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^Only one top\\-level comp\\-filter may be defined$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Xml/Request/CalendarQueryReport.php" , line : 127usize , placeholders : & ["Plugin::NS_CALDAV"] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^The \\{(.*)\\}filter element is required for this request$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Xml/Request/FreeBusyQueryReport.php" , line : 76usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^The freebusy report must have a time\\-range element$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Xml/Request/InviteReply.php" , line : 140usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^The \\{http://calendarserver\\.org/ns/\\}hosturl/\\{DAV:\\}href element must exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Xml/Notification/Invite.php" , line : 157usize , placeholders : & ["$item"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^(.*) is a required constructor option$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Xml/Notification/Invite.php" , line : 163usize , placeholders : & ["$key"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Unknown option: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Xml/Notification/InviteReply.php" , line : 106usize , placeholders : & ["$item"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^(.*) is a required constructor option$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Xml/Notification/InviteReply.php" , line : 112usize , placeholders : & ["$key"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Unknown option: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Xml/Filter/CompFilter.php" , line : 78usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^You cannot add time\\-range filters on the VCALENDAR component$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Xml/Filter/CompFilter.php" , line : 85usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^The end\\-date must be larger than the start\\-date$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Xml/Filter/CalendarData.php" , line : 69usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^The \"start\" and \"end\" attributes are required when expanding calendar\\-data$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Xml/Filter/CalendarData.php" , line : 72usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^The end\\-date must be larger than the start\\-date when expanding calendar\\-data$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Xml/Filter/PropFilter.php" , line : 79usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^The end\\-date must be larger than the start\\-date$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/ICSExportPlugin.php" , line : 114usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^The start= parameter must contain a unix timestamp$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/ICSExportPlugin.php" , line : 120usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^The end= parameter must contain a unix timestamp$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/ICSExportPlugin.php" , line : 126usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^If you'd like to expand recurrences, you must specify both a start= and end= parameter\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/ICSExportPlugin.php" , line : 133usize , placeholders : & ["$queryParams['componentType']"] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^You are not allowed to search for components of type: (.*) here$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/CalendarQueryValidator.php" , line : 340usize , placeholders : & ["$component->name"] , has_meaningful_message : true , exception : Some ("\\Sabre\\DAV\\Exception\\NotImplemented") , regex : "^time\\-range filters are currently not supported on (.*) components$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/CalendarQueryValidator.php" , line : 351usize , placeholders : & ["$component->name"] , has_meaningful_message : true , exception : Some ("\\Sabre\\DAV\\Exception\\BadRequest") , regex : "^You cannot create a time\\-range filter on a (.*) component$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Schedule/Plugin.php" , line : 695usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^The request body must be a valid iCalendar object\\. Parse error: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Schedule/Plugin.php" , line : 709usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^We expected at least one VTODO, VJOURNAL, VFREEBUSY or VEVENT component$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Schedule/Plugin.php" , line : 715usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^A METHOD property must be specified in iTIP messages$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Schedule/Plugin.php" , line : 732usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotImplemented") , regex : "^We only support VFREEBUSY \\(REQUEST\\) on this endpoint$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Schedule/Plugin.php" , line : 756usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^The organizer in the request did not match any of the addresses for the owner of this inbox$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Schedule/Plugin.php" , line : 760usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^You must at least specify 1 attendee$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Schedule/Plugin.php" , line : 769usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^DTSTART and DTEND must both be specified$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Schedule/SchedulingObject.php" , line : 38usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The objectData argument must contain an 'uri' property$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Schedule/SchedulingObject.php" , line : 67usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("MethodNotAllowed") , regex : "^Updating scheduling objects is not supported$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/CalendarHome.php" , line : 73usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("DAV\\Exception\\Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/CalendarHome.php" , line : 81usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("DAV\\Exception\\Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/CalendarHome.php" , line : 104usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\MethodNotAllowed") , regex : "^Creating new files in this collection is not supported$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/CalendarHome.php" , line : 116usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\MethodNotAllowed") , regex : "^Creating new collections in this collection is not supported$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/CalendarHome.php" , line : 158usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : Some ("NotFound") , regex : "^Node with name '(.*)' could not be found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/CalendarHome.php" , line : 238usize , placeholders : & ["$rt"] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\InvalidResourceType") , regex : "^Unknown resourceType: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/CalendarHome.php" , line : 247usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\InvalidResourceType") , regex : "^This backend does not support subscriptions$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/CalendarHome.php" , line : 253usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\InvalidResourceType") , regex : "^You can only create calendars and subscriptions in this collection$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/CalendarHome.php" , line : 327usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\NotImplemented") , regex : "^Sharing support is not implemented by this backend\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Backend/PDO.php" , line : 245usize , placeholders : & ["$sccs"] , has_meaningful_message : true , exception : Some ("DAV\\Exception") , regex : "^The (.*) property must be of type: \\\\Sabre\\\\CalDAV\\\\Xml\\\\Property\\\\SupportedCalendarComponentSet$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Backend/PDO.php" , line : 296usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The value passed to \\$calendarId is expected to be an array with a calendarId and an instanceId$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Backend/PDO.php" , line : 340usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The value passed to \\$calendarId is expected to be an array with a calendarId and an instanceId$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Backend/PDO.php" , line : 409usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The value passed to \\$calendarId is expected to be an array with a calendarId and an instanceId$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Backend/PDO.php" , line : 451usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The value passed to \\$calendarId is expected to be an array with a calendarId and an instanceId$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Backend/PDO.php" , line : 489usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The value passed to \\$calendarId is expected to be an array with a calendarId and an instanceId$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Backend/PDO.php" , line : 541usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The value passed to \\$calendarId is expected to be an array with a calendarId and an instanceId$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Backend/PDO.php" , line : 587usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The value passed to \\$calendarId is expected to be an array with a calendarId and an instanceId$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Backend/PDO.php" , line : 633usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Sabre\\DAV\\Exception\\BadRequest") , regex : "^Calendar objects must have a VJOURNAL, VEVENT or VTODO component$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Backend/PDO.php" , line : 700usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The value passed to \\$calendarId is expected to be an array with a calendarId and an instanceId$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Backend/PDO.php" , line : 765usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The value passed to \\$calendarId is expected to be an array with a calendarId and an instanceId$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Backend/PDO.php" , line : 947usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The value passed to \\$calendarId is expected to be an array with a calendarId and an instanceId$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Backend/PDO.php" , line : 1144usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^The \\{http://calendarserver\\.org/ns/\\}source property is required when creating subscriptions$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Backend/PDO.php" , line : 1332usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The value passed to \\$calendarId is expected to be an array with a calendarId and an instanceId$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Backend/PDO.php" , line : 1441usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The value passed to getInvites\\(\\) is expected to be an array with a calendarId and an instanceId$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Backend/PDO.php" , line : 1485usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\NotImplemented") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/SharingPlugin.php" , line : 76usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^The generic \"sharing\" plugin must be loaded before the caldav sharing plugin\\. Call \\$server\\->addPlugin\\(new \\\\Sabre\\\\DAV\\\\Sharing\\\\Plugin\\(\\)\\); before this one\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Plugin.php" , line : 289usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("BadRequest") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Plugin.php" , line : 591usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^A calendar\\-query REPORT on a calendar with a Depth: 0 is undefined\\. Set Depth to 1$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Plugin.php" , line : 648usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\NotImplemented") , regex : "^The free\\-busy\\-query REPORT is only implemented on calendars$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Plugin.php" , line : 806usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\UnsupportedMediaType") , regex : "^This resource only supports valid iCalendar 2\\.0 data\\. Parse error: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Plugin.php" , line : 810usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\UnsupportedMediaType") , regex : "^This collection can only support iCalendar objects\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Plugin.php" , line : 840usize , placeholders : & ["implode(', ', $supportedComponents)"] , has_meaningful_message : true , exception : Some ("Exception\\InvalidComponentType") , regex : "^iCalendar objects must at least have a component of type (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Plugin.php" , line : 873usize , placeholders : & ["$message['message']"] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\UnsupportedMediaType") , regex : "^Validation error in iCalendar: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Calendar.php" , line : 108usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\NotFound") , regex : "^Calendar object not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Calendar.php" , line : 180usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\MethodNotAllowed") , regex : "^Creating collections in calendar objects is not allowed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Calendar.php" , line : 218usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\MethodNotAllowed") , regex : "^Renaming calendars is not yet supported$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Principal/ProxyWrite.php" , line : 73usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\Forbidden") , regex : "^Permission denied to delete node$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Principal/ProxyWrite.php" , line : 85usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\Forbidden") , regex : "^Permission denied to rename file$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Principal/ProxyRead.php" , line : 73usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\Forbidden") , regex : "^Permission denied to delete node$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Principal/ProxyRead.php" , line : 85usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\Forbidden") , regex : "^Permission denied to rename file$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Principal/User.php" , line : 33usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\Forbidden") , regex : "^Permission denied to create file \\(filename (.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Principal/User.php" , line : 45usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\Forbidden") , regex : "^Permission denied to create directory$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Principal/User.php" , line : 59usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\NotFound") , regex : "^Node with name (.*) was not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Principal/User.php" , line : 69usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\NotFound") , regex : "^Node with name (.*) was not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/CalendarObject.php" , line : 58usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The objectData argument must contain an 'uri' property$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CalDAV/Subscriptions/Subscription.php" , line : 58usize , placeholders : & ["$r"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The (.*) field is required when creating a subscription node$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CardDAV/AddressBookHome.php" , line : 69usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("DAV\\Exception\\MethodNotAllowed") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CardDAV/AddressBookHome.php" , line : 77usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("DAV\\Exception\\MethodNotAllowed") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CardDAV/AddressBookHome.php" , line : 100usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\MethodNotAllowed") , regex : "^Creating new files in this collection is not supported$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CardDAV/AddressBookHome.php" , line : 112usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\MethodNotAllowed") , regex : "^Creating new collections in this collection is not supported$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CardDAV/AddressBookHome.php" , line : 131usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\NotFound") , regex : "^Addressbook with name '(.*)' could not be found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CardDAV/AddressBookHome.php" , line : 160usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\InvalidResourceType") , regex : "^Unknown resourceType for this collection$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CardDAV/Plugin.php" , line : 331usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\UnsupportedMediaType") , regex : "^This resource only supports valid vCard or jCard data\\. Parse error: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CardDAV/Plugin.php" , line : 335usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\UnsupportedMediaType") , regex : "^This collection can only support vcard objects\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CardDAV/Plugin.php" , line : 369usize , placeholders : & ["$message['message']"] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\UnsupportedMediaType") , regex : "^Validation error in vCard: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CardDAV/Plugin.php" , line : 407usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ReportNotSupported") , regex : "^The addressbook\\-query report is not supported on this url with Depth: 0$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CardDAV/Xml/Request/AddressBookQueryReport.php" , line : 150usize , placeholders : & ["Plugin::NS_CARDDAV"] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^You can only include 1 \\{(.*)\\}filter element$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CardDAV/Xml/Request/AddressBookQueryReport.php" , line : 155usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^The \"test\" attribute must be one of \"allof\" or \"anyof\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CardDAV/Xml/Filter/ParamFilter.php" , line : 71usize , placeholders : & ["$matchType"] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^Unknown match\\-type: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CardDAV/Xml/Filter/PropFilter.php" , line : 80usize , placeholders : & ["$matchType"] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^Unknown match\\-type: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CardDAV/AddressBook.php" , line : 67usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\NotFound") , regex : "^Card not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CardDAV/AddressBook.php" , line : 121usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\MethodNotAllowed") , regex : "^Creating collections in addressbooks is not allowed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CardDAV/AddressBook.php" , line : 162usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\MethodNotAllowed") , regex : "^Renaming addressbooks is not yet supported$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/dav/lib/CardDAV/Backend/PDO.php" , line : 165usize , placeholders : & ["$property"] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\BadRequest") , regex : "^Unknown property: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/http/lib/Client.php" , line : 163usize , placeholders : & ["$response"] , has_meaningful_message : false , exception : Some ("ClientHttpException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/http/lib/Client.php" , line : 327usize , placeholders : & ["$response['curl_errmsg']"] , has_meaningful_message : false , exception : Some ("ClientException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/http/lib/Sapi.php" , line : 223usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^The _SERVER array must have a REQUEST_URI key$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/http/lib/Sapi.php" , line : 227usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^The _SERVER array must have a REQUEST_METHOD key$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/http/lib/Request.php" , line : 184usize , placeholders : & ["$this->getUrl()" , "$this->getBaseUrl()"] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Requested uri \\((.*)\\) is out of base uri \\((.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/http/lib/Response.php" , line : 163usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The HTTP status code must be exactly 3 digits$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/TimeZoneUtil.php" , line : 106usize , placeholders : & ["$tzid"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^We were unable to determine the correct PHP timezone for tzid: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/VCardConverter.php" , line : 39usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Only vCard 2\\.1, 3\\.0 and 4\\.0 are supported for the input data$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/VCardConverter.php" , line : 42usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^You can only use vCard 3\\.0 or 4\\.0 for the target version$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Component/VAlarm.php" , line : 51usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidDataException") , regex : "^time\\-range filters on VALARM components are only supported when they are a child of VTODO or VEVENT$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Component/VCalendar.php" , line : 322usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidDataException") , regex : "^Every VEVENT object must have a UID property$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Property/Binary.php" , line : 44usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The argument must either be a string or an array with only one child$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Property/ICalendar/Recur.php" , line : 64usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^You must either pass a string, or a key=>value array$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Property/VCard/DateAndOrTime.php" , line : 52usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Only one value allowed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Recur/EventIterator.php" , line : 112usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^The UID argument is required when a VCALENDAR is passed to this constructor$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Recur/EventIterator.php" , line : 115usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^No events found in this calendar$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Recur/EventIterator.php" , line : 139usize , placeholders : & ["$uid"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^This VCALENDAR did not have an event with UID: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Recur/EventIterator.php" , line : 192usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NoInstancesException") , regex : "^This recurrence rule does not generate any valid instances$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Recur/EventIterator.php" , line : 306usize , placeholders : & ["Settings::$maxRecurrences"] , has_meaningful_message : true , exception : Some ("MaxInstancesExceededException") , regex : "^Recurring events are only allowed to generate (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Recur/RRuleIterator.php" , line : 714usize , placeholders : & ["strtoupper($value)"] , has_meaningful_message : true , exception : Some ("InvalidDataException") , regex : "^Unknown value for FREQ=(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Recur/RRuleIterator.php" , line : 739usize , placeholders : & ["strtoupper($key)"] , has_meaningful_message : true , exception : Some ("InvalidDataException") , regex : "^(.*) in RRULE must be a positive integer!$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Recur/RRuleIterator.php" , line : 761usize , placeholders : & ["$part"] , has_meaningful_message : true , exception : Some ("InvalidDataException") , regex : "^Invalid part in BYDAY clause: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Recur/RRuleIterator.php" , line : 775usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidDataException") , regex : "^BYYEARDAY in RRULE must have value\\(s\\) from 1 to 366, or \\-366 to \\-1!$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Recur/RRuleIterator.php" , line : 784usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidDataException") , regex : "^BYWEEKNO in RRULE must have value\\(s\\) from 1 to 53, or \\-53 to \\-1!$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Recur/RRuleIterator.php" , line : 793usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidDataException") , regex : "^BYMONTH in RRULE must have value\\(s\\) between 1 and 12!$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Recur/RRuleIterator.php" , line : 807usize , placeholders : & ["strtoupper($key)"] , has_meaningful_message : true , exception : Some ("InvalidDataException") , regex : "^Not supported: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/FreeBusyGenerator.php" , line : 148usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^You can only pass strings or \\\\Sabre\\\\VObject\\\\Component arguments to setObjects$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/DateTimeParser.php" , line : 40usize , placeholders : & ["$dt"] , has_meaningful_message : true , exception : Some ("InvalidDataException") , regex : "^The supplied iCalendar datetime value is incorrect: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/DateTimeParser.php" , line : 50usize , placeholders : & ["$dt"] , has_meaningful_message : true , exception : Some ("InvalidDataException") , regex : "^The supplied iCalendar datetime value is incorrect: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/DateTimeParser.php" , line : 70usize , placeholders : & ["$date"] , has_meaningful_message : true , exception : Some ("InvalidDataException") , regex : "^The supplied iCalendar date value is incorrect: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/DateTimeParser.php" , line : 80usize , placeholders : & ["$date"] , has_meaningful_message : true , exception : Some ("InvalidDataException") , regex : "^The supplied iCalendar date value is incorrect: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/DateTimeParser.php" , line : 101usize , placeholders : & ["$duration"] , has_meaningful_message : true , exception : Some ("InvalidDataException") , regex : "^The supplied iCalendar duration value is incorrect: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/DateTimeParser.php" , line : 315usize , placeholders : & ["$date"] , has_meaningful_message : true , exception : Some ("InvalidDataException") , regex : "^Invalid vCard date\\-time string: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/DateTimeParser.php" , line : 415usize , placeholders : & ["$date"] , has_meaningful_message : true , exception : Some ("InvalidDataException") , regex : "^Invalid vCard time string: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/DateTimeParser.php" , line : 524usize , placeholders : & ["$date"] , has_meaningful_message : true , exception : Some ("InvalidDataException") , regex : "^Invalid vCard date\\-time string: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/ElementList.php" , line : 31usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^You can not add new objects to an ElementList$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/ElementList.php" , line : 44usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^You can not remove objects from an ElementList$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Document.php" , line : 216usize , placeholders : & ["$name" , "$parameters['VALUE']"] , has_meaningful_message : true , exception : Some ("InvalidDataException") , regex : "^Unsupported VALUE parameter for (.*) property\\. You supplied \"(.*)\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Parser/Json.php" , line : 57usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("EofException") , regex : "^End of input stream, or no input supplied$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Parser/Json.php" , line : 72usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParseException") , regex : "^The root component must either be a vcalendar, or a vcard$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Parser/MimeDir.php" , line : 110usize , placeholders : & ["implode(', ', self::$SUPPORTED_CHARSETS)"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Unsupported encoding\\. \\(Supported encodings: (.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Parser/MimeDir.php" , line : 135usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^This parser can only read from strings or streams\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Parser/MimeDir.php" , line : 163usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParseException") , regex : "^This parser only supports VCARD and VCALENDAR files$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Parser/MimeDir.php" , line : 182usize , placeholders : & ["$this->root->name" , "$name"] , has_meaningful_message : true , exception : Some ("ParseException") , regex : "^Invalid MimeDir file\\. expected: \"END:(.*)\" got: \"END:(.*)\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Parser/MimeDir.php" , line : 199usize , placeholders : & ["$line" , "$this->root->name"] , has_meaningful_message : true , exception : Some ("ParseException") , regex : "^Invalid MimeDir file\\. Unexpected component: \"(.*)\" in document type (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Parser/MimeDir.php" , line : 217usize , placeholders : & ["$component->name" , "$name"] , has_meaningful_message : true , exception : Some ("ParseException") , regex : "^Invalid MimeDir file\\. expected: \"END:(.*)\" got: \"END:(.*)\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Parser/MimeDir.php" , line : 284usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("EofException") , regex : "^End of document reached prematurely$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Parser/MimeDir.php" , line : 287usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParseException") , regex : "^Error reading from input stream$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Parser/MimeDir.php" , line : 375usize , placeholders : & ["$this->startLine"] , has_meaningful_message : true , exception : Some ("ParseException") , regex : "^Invalid Mimedir file\\. Line starting at (.*) did not follow iCalendar/vCard conventions$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Parser/MimeDir.php" , line : 409usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^This code should not be reachable$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Parser/MimeDir.php" , line : 420usize , placeholders : & ["$this->startLine"] , has_meaningful_message : true , exception : Some ("ParseException") , regex : "^Invalid Mimedir file\\. Line starting at (.*) did not follow iCalendar/vCard conventions$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Parser/MimeDir.php" , line : 463usize , placeholders : & ["$propObj['CHARSET']"] , has_meaningful_message : true , exception : Some ("ParseException") , regex : "^Unsupported CHARSET: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Parser/XML.php" , line : 85usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("EofException") , regex : "^End of input stream, or no input supplied$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Parser/XML.php" , line : 107usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParseException") , regex : "^Unsupported XML standard$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 121usize , placeholders : & ["$this->colorize('green', 'sabre/vobject ')" , "$this->colorize('yellow', Version::VERSION)"] , has_meaningful_message : false , exception : None , regex : "^(.*)(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 154usize , placeholders : & ["$value"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Unknown format: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 186usize , placeholders : & ["$value"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Unknown format: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 190usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Unknown option: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 201usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Inputfile is a required argument$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 205usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Too many arguments$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 209usize , placeholders : & ["$positional[0]"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Unknown command: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 213usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Error: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 254usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Error: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 267usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Usage:$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 268usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^  vobject \\[options\\] command \\[arguments\\]$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 269usize , placeholders : & [] , has_meaningful_message : false , exception : None , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 270usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Options:$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 271usize , placeholders : & ["$this->colorize('green', '  -q            ')"] , has_meaningful_message : true , exception : None , regex : "^(.*)Don't output anything\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 272usize , placeholders : & ["$this->colorize('green', '  -help -h      ')"] , has_meaningful_message : true , exception : None , regex : "^(.*)Display this help message\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 273usize , placeholders : & ["$this->colorize('green', '  --format      ')"] , has_meaningful_message : true , exception : None , regex : "^(.*)Convert to a specific format\\. Must be one of: vcard, vcard21,$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 274usize , placeholders : & ["$this->colorize('green', '  --forgiving   ')"] , has_meaningful_message : true , exception : None , regex : "^(.*)Makes the parser less strict\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 275usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^                vcard30, vcard40, icalendar20, jcal, jcard, json, mimedir\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 276usize , placeholders : & ["$this->colorize('green', '  --inputformat ')"] , has_meaningful_message : true , exception : None , regex : "^(.*)If the input format cannot be guessed from the extension, it$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 277usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^                must be specified here\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 280usize , placeholders : & ["$this->colorize('green', '  --pretty      ')"] , has_meaningful_message : true , exception : None , regex : "^(.*)json pretty\\-print\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 282usize , placeholders : & [] , has_meaningful_message : false , exception : None , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 283usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Commands:$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 284usize , placeholders : & ["$this->colorize('green', '  validate')"] , has_meaningful_message : true , exception : None , regex : "^(.*) source_file              Validates a file for correctness\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 285usize , placeholders : & ["$this->colorize('green', '  repair')"] , has_meaningful_message : true , exception : None , regex : "^(.*) source_file \\[output_file\\]  Repairs a file\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 286usize , placeholders : & ["$this->colorize('green', '  convert')"] , has_meaningful_message : true , exception : None , regex : "^(.*) source_file \\[output_file\\] Converts a file\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 287usize , placeholders : & ["$this->colorize('green', '  color')"] , has_meaningful_message : true , exception : None , regex : "^(.*) source_file                 Colorize a file, useful for debugging\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 288usize , placeholders : & ["<<<HELP\n\nIf source_file is set as '-', STDIN will be used.\nIf output_file is omitted, STDOUT will be used.\nAll other output is sent to STDERR.\n\nHELP"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 298usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Examples:$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 299usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^   vobject convert contact\\.vcf contact\\.json$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 300usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^   vobject convert \\-\\-format=vcard40 old\\.vcf new\\.vcf$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 301usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^   vobject convert \\-\\-inputformat=json \\-\\-format=mimedir \\- \\-$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 302usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^   vobject color calendar\\.ics$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 303usize , placeholders : & [] , has_meaningful_message : false , exception : None , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 304usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^https://github\\.com/fruux/sabre\\-vobject$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 318usize , placeholders : & ["(string) $vObj->VERSION"] , has_meaningful_message : true , exception : None , regex : "^iCalendar: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 321usize , placeholders : & ["(string) $vObj->VERSION"] , has_meaningful_message : true , exception : None , regex : "^vCard: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 327usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^  No warnings!$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 340usize , placeholders : & ["$levels[$warn['level']]" , "$warn['message']" , "$extra"] , has_meaningful_message : false , exception : None , regex : "^  \\[(.*)\\] (.*)(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 358usize , placeholders : & ["(string) $vObj->VERSION"] , has_meaningful_message : true , exception : None , regex : "^iCalendar: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 361usize , placeholders : & ["(string) $vObj->VERSION"] , has_meaningful_message : true , exception : None , regex : "^vCard: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 367usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^  No warnings!$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 380usize , placeholders : & ["$levels[$warn['level']]" , "$warn['message']" , "$extra"] , has_meaningful_message : false , exception : None , regex : "^  \\[(.*)\\] (.*)(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Cli.php" , line : 434usize , placeholders : & ["strtolower($vObj->name)" , "$this->format"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^You cannot convert a (.*) to (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/ITip/Broker.php" , line : 833usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ITipException") , regex : "^If a calendar contained more than one event, they must have the same UID\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/ITip/Broker.php" , line : 838usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ITipException") , regex : "^An event MUST have a DTSTART property\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/ITip/Broker.php" , line : 847usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("SameOrganizerForAllComponentsException") , regex : "^Every instance of the event must have the same organizer\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Component.php" , line : 109usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The second argument must not be specified, when passing a VObject Node$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Component.php" , line : 116usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The first argument must either be a \\\\Sabre\\\\VObject\\\\Node or a string$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Component.php" , line : 164usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The item you passed to remove\\(\\) was not a child of this component$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Component.php" , line : 440usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Starting sabre/vobject 4\\.0 the children property is now protected\\. You should use the children\\(\\) method instead$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Splitter/VCard.php" , line : 66usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("VObject\\ParseException") , regex : "^The supplied input contained non\\-VCARD data\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/Splitter/ICalendar.php" , line : 51usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("VObject\\ParseException") , regex : "^Supplied input could not be parsed as VCALENDAR\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/BirthdayCalendarGenerator.php" , line : 70usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^String could not be parsed as \\\\Sabre\\\\VObject\\\\Component\\\\VCard by setObjects$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/vobject/lib/BirthdayCalendarGenerator.php" , line : 77usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^You can only pass strings or \\\\Sabre\\\\VObject\\\\Component\\\\VCard arguments to setObjects$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/uri/lib/functions.php" , line : 354usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidUriException") , regex : "^Invalid, or could not parse URI$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/event/lib/Promise.php" , line : 137usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("PromiseAlreadyResolvedException") , regex : "^This promise is already resolved, and you're not allowed to resolve a promise more than once$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/event/lib/Promise.php" , line : 152usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("PromiseAlreadyResolvedException") , regex : "^This promise is already resolved, and you're not allowed to resolve a promise more than once$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/event/lib/Promise.php" , line : 180usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^There were no more events in the loop\\. This promise will never be fulfilled\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/event/lib/coroutine.php" , line : 59usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^You must pass a generator function$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/xml/lib/Reader.php" , line : 71usize , placeholders : & ["$errors"] , has_meaningful_message : false , exception : Some ("LibXMLException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/xml/lib/Reader.php" , line : 81usize , placeholders : & ["$errors"] , has_meaningful_message : false , exception : Some ("LibXMLException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/xml/lib/Reader.php" , line : 151usize , placeholders : & ["$errors"] , has_meaningful_message : false , exception : Some ("LibXMLException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/xml/lib/Reader.php" , line : 153usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParseException") , regex : "^This should never happen \\(famous last words\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/xml/lib/Reader.php" , line : 164usize , placeholders : & ["$errors"] , has_meaningful_message : false , exception : Some ("LibXMLException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/xml/lib/Reader.php" , line : 183usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParseException") , regex : "^We hit the end of the document prematurely\\. This likely means that some parser \"eats\" too many elements\\. Do not attempt to continue parsing\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/xml/lib/Reader.php" , line : 305usize , placeholders : & ["$type" , "$name"] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Could not use this type as a deserializer: (.*) for element: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/xml/lib/Serializer/functions.php" , line : 200usize , placeholders : & ["gettype($name)"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^The writer does not know how to serialize arrays with keys of type: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/xml/lib/Serializer/functions.php" , line : 204usize , placeholders : & ["get_class($value)"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^The writer cannot serialize objects of class: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/xml/lib/Serializer/functions.php" , line : 206usize , placeholders : & ["gettype($value)"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^The writer cannot serialize values of type: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/xml/lib/Service.php" , line : 122usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParseException") , regex : "^The input element to parse is empty\\. Do not attempt to parse$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/xml/lib/Service.php" , line : 166usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParseException") , regex : "^The input element to parse is empty\\. Do not attempt to parse$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/xml/lib/Service.php" , line : 183usize , placeholders : & ["implode(' or ', $rootElementName)" , "$result['name']"] , has_meaningful_message : true , exception : Some ("ParseException") , regex : "^Expected (.*) but received (.*) as the root element$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/xml/lib/Service.php" , line : 272usize , placeholders : & ["get_class($object)"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^\"(.*)\" is not a registered value object class\\. Register your class with mapValueObject\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/sabre/xml/lib/Service.php" , line : 296usize , placeholders : & ["$str"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^'(.*)' is not a valid clark\\-notation formatted string$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 64usize , placeholders : & ["$fromTimezone"] , has_meaningful_message : false , exception : Some ("Exception\\BadArgumentType") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 69usize , placeholders : & ["$fromTimezone"] , has_meaningful_message : false , exception : Some ("Exception\\BadArgumentType") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 98usize , placeholders : & ["$value"] , has_meaningful_message : false , exception : Some ("Exception\\BadArgumentType") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 102usize , placeholders : & ["$value"] , has_meaningful_message : false , exception : Some ("Exception\\BadArgumentType") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 110usize , placeholders : & ["$toTimezone"] , has_meaningful_message : false , exception : Some ("Exception\\BadArgumentType") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 115usize , placeholders : & ["$toTimezone"] , has_meaningful_message : false , exception : Some ("Exception\\BadArgumentType") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 263usize , placeholders : & ["$value"] , has_meaningful_message : false , exception : Some ("Exception\\BadArgumentType") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 268usize , placeholders : & ["$width"] , has_meaningful_message : false , exception : Some ("Exception\\ValueNotInList") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 307usize , placeholders : & ["$value"] , has_meaningful_message : false , exception : Some ("Exception\\BadArgumentType") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 312usize , placeholders : & ["$width"] , has_meaningful_message : false , exception : Some ("Exception\\ValueNotInList") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 351usize , placeholders : & ["$value"] , has_meaningful_message : false , exception : Some ("Exception\\BadArgumentType") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 357usize , placeholders : & ["$width"] , has_meaningful_message : false , exception : Some ("Exception\\ValueNotInList") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 396usize , placeholders : & ["$value"] , has_meaningful_message : false , exception : Some ("Exception\\BadArgumentType") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 401usize , placeholders : & ["$width"] , has_meaningful_message : false , exception : Some ("Exception\\ValueNotInList") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 450usize , placeholders : & ["$value"] , has_meaningful_message : false , exception : Some ("Exception\\BadArgumentType") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 455usize , placeholders : & ["$width"] , has_meaningful_message : false , exception : Some ("Exception\\ValueNotInList") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 746usize , placeholders : & ["$width"] , has_meaningful_message : false , exception : Some ("Exception\\ValueNotInList") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 771usize , placeholders : & ["$width"] , has_meaningful_message : false , exception : Some ("Exception\\ValueNotInList") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 832usize , placeholders : & ["$width"] , has_meaningful_message : false , exception : Some ("Exception\\BadArgumentType") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 837usize , placeholders : & ["$wholeWidth"] , has_meaningful_message : false , exception : Some ("Exception\\ValueNotInList") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 860usize , placeholders : & ["$dateEnd"] , has_meaningful_message : false , exception : Some ("Exception\\BadArgumentType") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 866usize , placeholders : & ["$dateStart"] , has_meaningful_message : false , exception : Some ("Exception\\BadArgumentType") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 895usize , placeholders : & ["$dateEnd"] , has_meaningful_message : false , exception : Some ("Exception\\BadArgumentType") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 901usize , placeholders : & ["$dateStart"] , has_meaningful_message : false , exception : Some ("Exception\\BadArgumentType") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 1225usize , placeholders : & ["$value"] , has_meaningful_message : false , exception : Some ("Exception\\BadArgumentType") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 1229usize , placeholders : & ["$format"] , has_meaningful_message : false , exception : Some ("Exception\\BadArgumentType") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 1364usize , placeholders : & ["$count"] , has_meaningful_message : false , exception : Some ("Exception\\ValueNotInList") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 1396usize , placeholders : & ["$count"] , has_meaningful_message : false , exception : Some ("Exception\\ValueNotInList") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 1414usize , placeholders : & ["$count"] , has_meaningful_message : false , exception : Some ("Exception\\ValueNotInList") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 1448usize , placeholders : & ["$count"] , has_meaningful_message : false , exception : Some ("Exception\\ValueNotInList") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 1458usize , placeholders : & ["$count"] , has_meaningful_message : false , exception : Some ("Exception\\ValueNotInList") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 1470usize , placeholders : & ["$count"] , has_meaningful_message : false , exception : Some ("Exception\\ValueNotInList") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 1481usize , placeholders : & ["$count"] , has_meaningful_message : false , exception : Some ("Exception\\ValueNotInList") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 1492usize , placeholders : & ["$count"] , has_meaningful_message : false , exception : Some ("Exception\\ValueNotInList") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 1504usize , placeholders : & ["$count"] , has_meaningful_message : false , exception : Some ("Exception\\ValueNotInList") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 1516usize , placeholders : & ["$count"] , has_meaningful_message : false , exception : Some ("Exception\\ValueNotInList") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 1538usize , placeholders : & ["$count"] , has_meaningful_message : false , exception : Some ("Exception\\ValueNotInList") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 1560usize , placeholders : & ["$count"] , has_meaningful_message : false , exception : Some ("Exception\\ValueNotInList") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 1576usize , placeholders : & ["$count"] , has_meaningful_message : false , exception : Some ("Exception\\ValueNotInList") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 1625usize , placeholders : & ["$count"] , has_meaningful_message : false , exception : Some ("Exception\\ValueNotInList") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 1642usize , placeholders : & ["$count"] , has_meaningful_message : false , exception : Some ("Exception\\ValueNotInList") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 1654usize , placeholders : & ["$count"] , has_meaningful_message : false , exception : Some ("Exception\\ValueNotInList") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 1669usize , placeholders : & ["$count"] , has_meaningful_message : false , exception : Some ("Exception\\ValueNotInList") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 1729usize , placeholders : & ["$count"] , has_meaningful_message : false , exception : Some ("Exception\\ValueNotInList") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 1749usize , placeholders : & ["$count"] , has_meaningful_message : false , exception : Some ("Exception\\ValueNotInList") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 1774usize , placeholders : & ["$count"] , has_meaningful_message : false , exception : Some ("Exception\\ValueNotInList") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 1822usize , placeholders : & ["$count"] , has_meaningful_message : false , exception : Some ("Exception\\ValueNotInList") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 1836usize , placeholders : & ["__METHOD__"] , has_meaningful_message : false , exception : Some ("Exception\\NotImplemented") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 1841usize , placeholders : & ["__METHOD__"] , has_meaningful_message : false , exception : Some ("Exception\\NotImplemented") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 1846usize , placeholders : & ["__METHOD__"] , has_meaningful_message : false , exception : Some ("Exception\\NotImplemented") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Calendar.php" , line : 1938usize , placeholders : & ["$count"] , has_meaningful_message : false , exception : Some ("Exception\\ValueNotInList") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Misc.php" , line : 44usize , placeholders : & ["$width"] , has_meaningful_message : false , exception : Some ("\\Punic\\Exception\\ValueNotInList") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Territory.php" , line : 129usize , placeholders : & ["$levels"] , has_meaningful_message : false , exception : Some ("\\Punic\\Exception\\BadArgumentType") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Data.php" , line : 70usize , placeholders : & ["$locale"] , has_meaningful_message : false , exception : Some ("Exception\\InvalidLocale") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Data.php" , line : 107usize , placeholders : & ["$locale"] , has_meaningful_message : false , exception : Some ("Exception\\InvalidLocale") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Data.php" , line : 130usize , placeholders : & ["$identifier"] , has_meaningful_message : false , exception : Some ("Exception\\InvalidDataFile") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Data.php" , line : 140usize , placeholders : & ["$identifier"] , has_meaningful_message : false , exception : Some ("Exception\\InvalidDataFile") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Data.php" , line : 144usize , placeholders : & ["$locale"] , has_meaningful_message : false , exception : Some ("Exception\\DataFolderNotFound") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Data.php" , line : 148usize , placeholders : & ["$identifier"] , has_meaningful_message : false , exception : Some ("Exception\\DataFileNotFound") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Data.php" , line : 154usize , placeholders : & ["$file"] , has_meaningful_message : false , exception : Some ("Exception\\DataFileNotReadable") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Data.php" , line : 161usize , placeholders : & ["$file"] , has_meaningful_message : false , exception : Some ("Exception\\BadDataFileContents") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Data.php" , line : 184usize , placeholders : & ["$identifier"] , has_meaningful_message : false , exception : Some ("Exception\\InvalidDataFile") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Data.php" , line : 190usize , placeholders : & ["$identifier"] , has_meaningful_message : false , exception : Some ("Exception\\InvalidDataFile") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Data.php" , line : 194usize , placeholders : & ["$identifier"] , has_meaningful_message : false , exception : Some ("Exception\\DataFileNotFound") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Data.php" , line : 200usize , placeholders : & ["$file"] , has_meaningful_message : false , exception : Some ("Exception\\DataFileNotReadable") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Data.php" , line : 207usize , placeholders : & ["$file"] , has_meaningful_message : false , exception : Some ("Exception\\BadDataFileContents") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Data.php" , line : 531usize , placeholders : & ["$locale"] , has_meaningful_message : false , exception : Some ("Exception\\InvalidLocale") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Unit.php" , line : 43usize , placeholders : & ["$width"] , has_meaningful_message : false , exception : Some ("Exception\\ValueNotInList") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Unit.php" , line : 80usize , placeholders : & ["$unit"] , has_meaningful_message : false , exception : Some ("\\Punic\\Exception\\ValueNotInList") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Plural.php" , line : 62usize , placeholders : & ["$number"] , has_meaningful_message : false , exception : Some ("Exception\\BadArgumentType") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Plural.php" , line : 65usize , placeholders : & ["$number"] , has_meaningful_message : false , exception : Some ("Exception\\BadArgumentType") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Plural.php" , line : 88usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Bad formula!$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/punic/punic/code/Plural.php" , line : 107usize , placeholders : & ["$formulaPattern"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^There was a problem in the formula (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/pimple/pimple/src/Pimple/Container.php" , line : 85usize , placeholders : & ["$id"] , has_meaningful_message : false , exception : Some ("FrozenServiceException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/pimple/pimple/src/Pimple/Container.php" , line : 105usize , placeholders : & ["$id"] , has_meaningful_message : false , exception : Some ("UnknownIdentifierException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/pimple/pimple/src/Pimple/Container.php" , line : 174usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ExpectedInvokableException") , regex : "^Service definition is not a Closure or invokable object\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/pimple/pimple/src/Pimple/Container.php" , line : 196usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ExpectedInvokableException") , regex : "^Callable is not a Closure or invokable object\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/pimple/pimple/src/Pimple/Container.php" , line : 216usize , placeholders : & ["$id"] , has_meaningful_message : false , exception : Some ("UnknownIdentifierException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/pimple/pimple/src/Pimple/Container.php" , line : 245usize , placeholders : & ["$id"] , has_meaningful_message : false , exception : Some ("UnknownIdentifierException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/pimple/pimple/src/Pimple/Container.php" , line : 249usize , placeholders : & ["$id"] , has_meaningful_message : false , exception : Some ("FrozenServiceException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/pimple/pimple/src/Pimple/Container.php" , line : 253usize , placeholders : & ["$id"] , has_meaningful_message : false , exception : Some ("InvalidServiceIdentifierException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/pimple/pimple/src/Pimple/Container.php" , line : 261usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ExpectedInvokableException") , regex : "^Extension service definition is not a Closure or invokable object\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/pimple/pimple/src/Pimple/Psr11/ServiceLocator.php" , line : 62usize , placeholders : & ["$id"] , has_meaningful_message : false , exception : Some ("UnknownIdentifierException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Guid/Fields.php" , line : 67usize , placeholders : & ["strlen($bytes)"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^The byte string must be 16 bytes long; received (.*) bytes$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Guid/Fields.php" , line : 76usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^The byte string received does not conform to the RFC 4122 or Microsoft Corporation variants$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Guid/Fields.php" , line : 83usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^The byte string received does not contain a valid version$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Guid/GuidBuilder.php" , line : 78usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("UnableToBuildUuidException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Builder/FallbackBuilder.php" , line : 69usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BuilderNotFoundException") , regex : "^Could not find a suitable builder for the provided codec and fields$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Generator/DefaultTimeGenerator.php" , line : 87usize , placeholders : & ["$exception->getMessage()"] , has_meaningful_message : false , exception : Some ("RandomSourceException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Generator/DefaultTimeGenerator.php" , line : 105usize , placeholders : & ["sprintf(\n                'The generated time of \\'%s\\' is larger than expected',\n                $timeHex\n            )"] , has_meaningful_message : false , exception : Some ("TimeSourceException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Generator/DefaultTimeGenerator.php" , line : 142usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Invalid node value$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Generator/DefaultNameGenerator.php" , line : 35usize , placeholders : & ["sprintf(\n                'Unable to hash namespace and name with algorithm \\'%s\\'',\n                $hashAlgorithm\n            )"] , has_meaningful_message : false , exception : Some ("NameException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Generator/DceSecurityGenerator.php" , line : 87usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DceSecurityException") , regex : "^Local domain must be a valid DCE Security domain$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Generator/DceSecurityGenerator.php" , line : 93usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DceSecurityException") , regex : "^Local identifier out of bounds; it must be a value between 0 and 4294967295$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Generator/DceSecurityGenerator.php" , line : 99usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DceSecurityException") , regex : "^Clock sequence out of bounds; it must be a value between 0 and 63$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Generator/DceSecurityGenerator.php" , line : 107usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DceSecurityException") , regex : "^A local identifier must be provided for the org domain$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Generator/DceSecurityGenerator.php" , line : 135usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DceSecurityException") , regex : "^Local identifier out of bounds; it must be a value between 0 and 4294967295$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Generator/PeclUuidNameGenerator.php" , line : 46usize , placeholders : & ["sprintf(\n                    'Unable to hash namespace and name with algorithm \\'%s\\'',\n                    $hashAlgorithm\n                )"] , has_meaningful_message : false , exception : Some ("NameException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Generator/RandomBytesGenerator.php" , line : 37usize , placeholders : & ["$exception->getMessage()"] , has_meaningful_message : false , exception : Some ("RandomSourceException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Generator/CombGenerator.php" , line : 91usize , placeholders : & ["self::TIMESTAMP_BYTES"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Length must be a positive integer greater than or equal to (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Type/Integer.php" , line : 63usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Value must be a signed integer or a string containing only digits 0\\-9 and, optionally, a sign \\(\\+ or \\-\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Type/Time.php" , line : 104usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("UnsupportedOperationException") , regex : "^Attempted to unserialize an invalid value$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Type/Decimal.php" , line : 53usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Value must be a signed decimal or a string containing only digits 0\\-9 and, optionally, a decimal point or sign \\(\\+ or \\-\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Type/Hexadecimal.php" , line : 52usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Value must be a hexadecimal number$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Rfc4122/UuidBuilder.php" , line : 95usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("UnsupportedOperationException") , regex : "^The UUID version in the given fields is not supported by this UUID builder$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Rfc4122/UuidBuilder.php" , line : 100usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("UnableToBuildUuidException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Rfc4122/UuidV2.php" , line : 68usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Fields used to create a UuidV2 must represent a version 2 \\(DCE Security\\) UUID$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Rfc4122/UuidV2.php" , line : 108usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("DateTimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Rfc4122/UuidV5.php" , line : 50usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Fields used to create a UuidV5 must represent a version 5 \\(named\\-based, SHA1\\-hashed\\) UUID$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Rfc4122/UuidV4.php" , line : 50usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Fields used to create a UuidV4 must represent a version 4 \\(random\\) UUID$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Rfc4122/UuidV3.php" , line : 50usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Fields used to create a UuidV3 must represent a version 3 \\(name\\-based, MD5\\-hashed\\) UUID$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Rfc4122/VariantTrait.php" , line : 58usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidBytesException") , regex : "^Invalid number of bytes$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Rfc4122/Fields.php" , line : 63usize , placeholders : & ["strlen($bytes)"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^The byte string must be 16 bytes long; received (.*) bytes$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Rfc4122/Fields.php" , line : 72usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^The byte string received does not conform to the RFC 4122 variant$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Rfc4122/Fields.php" , line : 78usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^The byte string received does not contain a valid RFC 4122 version$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Rfc4122/UuidV1.php" , line : 58usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Fields used to create a UuidV1 must represent a version 1 \\(time\\-based\\) UUID$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Rfc4122/UuidV1.php" , line : 89usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("DateTimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Lazy/LazyUuidFromString.php" , line : 503usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("UnsupportedOperationException") , regex : "^Not a time\\-based UUID$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Codec/OrderedTimeCodec.php" , line : 63usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Expected RFC 4122 version 1 \\(time\\-based\\) UUID$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Codec/OrderedTimeCodec.php" , line : 87usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^\\$bytes string should contain 16 characters\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Codec/OrderedTimeCodec.php" , line : 104usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("UnsupportedOperationException") , regex : "^Attempting to decode a non\\-time\\-based UUID using OrderedTimeCodec$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Codec/StringCodec.php" , line : 94usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^\\$bytes string should contain 16 characters\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Codec/StringCodec.php" , line : 130usize , placeholders : & ["$encodedUuid"] , has_meaningful_message : true , exception : Some ("InvalidUuidStringException") , regex : "^Invalid UUID string: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/DeprecatedUuidMethodsTrait.php" , line : 141usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("UnsupportedOperationException") , regex : "^Not a time\\-based UUID$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/DeprecatedUuidMethodsTrait.php" , line : 154usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("DateTimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/DeprecatedUuidMethodsTrait.php" , line : 318usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("UnsupportedOperationException") , regex : "^Not a time\\-based UUID$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/DeprecatedUuidMethodsTrait.php" , line : 332usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("UnsupportedOperationException") , regex : "^Not a time\\-based UUID$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Nonstandard/Fields.php" , line : 63usize , placeholders : & ["strlen($bytes)"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^The byte string must be 16 bytes long; received (.*) bytes$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Nonstandard/UuidBuilder.php" , line : 77usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("UnableToBuildUuidException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Nonstandard/UuidV6.php" , line : 66usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Fields used to create a UuidV6 must represent a version 6 \\(ordered\\-time\\) UUID$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Nonstandard/UuidV6.php" , line : 94usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("DateTimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Math/BrickMathCalculator.php" , line : 106usize , placeholders : & ["$exception->getMessage()"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Math/BrickMathCalculator.php" , line : 119usize , placeholders : & ["$exception->getMessage()"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Provider/Dce/SystemDceSecurityProvider.php" , line : 56usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DceSecurityException") , regex : "^Unable to get a user identifier using the system DCE Security provider; please provide a custom identifier or use a different provider$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Provider/Dce/SystemDceSecurityProvider.php" , line : 86usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DceSecurityException") , regex : "^Unable to get a group identifier using the system DCE Security provider; please provide a custom identifier or use a different provider$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Provider/Node/StaticNodeProvider.php" , line : 46usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Static node value cannot be greater than 12 hexadecimal characters$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Provider/Node/SystemNodeProvider.php" , line : 62usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NodeException") , regex : "^Unable to fetch a node for this system$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Provider/Node/FallbackNodeProvider.php" , line : 55usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NodeException") , regex : "^Unable to find a suitable node provider$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/uuid/src/Provider/Node/RandomNodeProvider.php" , line : 42usize , placeholders : & ["$exception->getMessage()"] , has_meaningful_message : false , exception : Some ("RandomSourceException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/collection/src/Queue.php" , line : 75usize , placeholders : & ["$this->getType()" , "$this->toolValueToString($value)"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Value must be of type (.*); value is (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/collection/src/Queue.php" , line : 102usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NoSuchElementException") , regex : "^Can't return element from Queue\\. Queue is empty\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/collection/src/Queue.php" , line : 159usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NoSuchElementException") , regex : "^Can't return element from Queue\\. Queue is empty\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/collection/src/AbstractCollection.php" , line : 78usize , placeholders : & ["$this->getType()" , "$this->toolValueToString($value)"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Value must be of type (.*); value is (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/collection/src/AbstractCollection.php" , line : 129usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OutOfBoundsException") , regex : "^Can't determine first item\\. Collection is empty$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/collection/src/AbstractCollection.php" , line : 146usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OutOfBoundsException") , regex : "^Can't determine last item\\. Collection is empty$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/collection/src/AbstractCollection.php" , line : 159usize , placeholders : & ["$order"] , has_meaningful_message : true , exception : Some ("InvalidSortOrderException") , regex : "^Invalid sort order given: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/collection/src/AbstractCollection.php" , line : 245usize , placeholders : & ["sprintf('Collection with index %d must be of type %s', $index, static::class)"] , has_meaningful_message : false , exception : Some ("CollectionMismatchException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/collection/src/AbstractCollection.php" , line : 253usize , placeholders : & ["sprintf('Collection items in collection with index %d must be of type %s', $index, $this->getType())"] , has_meaningful_message : false , exception : Some ("CollectionMismatchException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/collection/src/AbstractCollection.php" , line : 287usize , placeholders : & ["static::class"] , has_meaningful_message : true , exception : Some ("CollectionMismatchException") , regex : "^Collection must be of type (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/collection/src/AbstractCollection.php" , line : 293usize , placeholders : & ["$this->getType()"] , has_meaningful_message : true , exception : Some ("CollectionMismatchException") , regex : "^Collection items must be of type (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/collection/src/Tool/ValueExtractorTrait.php" , line : 43usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ValueExtractionException") , regex : "^Unable to extract a value from a non\\-object$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/collection/src/Tool/ValueExtractorTrait.php" , line : 54usize , placeholders : & ["sprintf('Method or property \"%s\" not defined in %s', $propertyOrMethod, get_class($object))"] , has_meaningful_message : false , exception : Some ("ValueExtractionException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/collection/src/Map/AbstractMap.php" , line : 40usize , placeholders : & ["var_export($value, true)"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Map elements are key/value pairs; a key must be provided for value (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/collection/src/Map/AbstractTypedMap.php" , line : 47usize , placeholders : & ["var_export($value, true)"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Map elements are key/value pairs; a key must be provided for value (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/collection/src/Map/AbstractTypedMap.php" , line : 54usize , placeholders : & ["$this->getKeyType()" , "$this->toolValueToString($offset)"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Key must be of type (.*); key is (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/collection/src/Map/AbstractTypedMap.php" , line : 61usize , placeholders : & ["$this->getValueType()" , "$this->toolValueToString($value)"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Value must be of type (.*); value is (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/collection/src/Map/NamedParameterMap.php" , line : 71usize , placeholders : & ["var_export($value, true)"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Map elements are key/value pairs; a key must be provided for value (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/collection/src/Map/NamedParameterMap.php" , line : 78usize , placeholders : & ["$offset"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Attempting to set value for unconfigured parameter '(.*)'$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/collection/src/Map/NamedParameterMap.php" , line : 85usize , placeholders : & ["$offset" , "$this->namedParameters[$offset]" , "$this->toolValueToString($value)"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Value for '(.*)' must be of type (.*); value is (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/collection/src/DoubleEndedQueue.php" , line : 43usize , placeholders : & ["$this->getType()" , "$this->toolValueToString($value)"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Value must be of type (.*); value is (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/collection/src/DoubleEndedQueue.php" , line : 60usize , placeholders : & ["$this->getType()" , "$this->toolValueToString($element)"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Value must be of type (.*); value is (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/collection/src/DoubleEndedQueue.php" , line : 117usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NoSuchElementException") , regex : "^Can't return element from Queue\\. Queue is empty\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/ramsey/collection/src/DoubleEndedQueue.php" , line : 162usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NoSuchElementException") , regex : "^Can't return element from Queue\\. Queue is empty\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/FileSpool.php" , line : 42usize , placeholders : & ["sprintf('Unable to create path \"%s\".', $this->path)"] , has_meaningful_message : false , exception : Some ("Swift_IoException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/FileSpool.php" , line : 111usize , placeholders : & ["sprintf('Unable to create a file for enqueuing Message in \"%s\".', $this->path)"] , has_meaningful_message : false , exception : Some ("Swift_IoException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/Signers/DomainKeySigner.php" , line : 440usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Swift_SwiftException") , regex : "^Invalid new line sequence in mail found \\\\n without preceding \\\\r$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/Signers/DomainKeySigner.php" , line : 497usize , placeholders : & ["openssl_error_string()"] , has_meaningful_message : true , exception : Some ("Swift_SwiftException") , regex : "^Unable to load DomainKey Private Key \\[(.*)\\]$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/Signers/DomainKeySigner.php" , line : 502usize , placeholders : & ["openssl_error_string()"] , has_meaningful_message : true , exception : Some ("Swift_SwiftException") , regex : "^Unable to sign DomainKey Hash  \\[(.*)\\]$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/Signers/OpenDKIMSigner.php" , line : 35usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Swift_SwiftException") , regex : "^php\\-opendkim extension not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/Signers/OpenDKIMSigner.php" , line : 48usize , placeholders : & ["$this->dkimHandler->getError()"] , has_meaningful_message : true , exception : Some ("Swift_SwiftException") , regex : "^OpenDKIM Error: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/Signers/OpenDKIMSigner.php" , line : 69usize , placeholders : & ["openssl_error_string()"] , has_meaningful_message : true , exception : Some ("Swift_SwiftException") , regex : "^Unable to force signature timestamp \\[(.*)\\]$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/Signers/DKIMSigner.php" , line : 299usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Swift_SwiftException") , regex : "^Unable to set sha256 as it is not supported by OpenSSL\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/Signers/DKIMSigner.php" , line : 303usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Swift_SwiftException") , regex : "^Unable to set the hash algorithm, must be one of rsa\\-sha1 or rsa\\-sha256 \\(%s given\\)\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/Signers/DKIMSigner.php" , line : 675usize , placeholders : & ["openssl_error_string()"] , has_meaningful_message : true , exception : Some ("Swift_SwiftException") , regex : "^Unable to load DKIM Private Key \\[(.*)\\]$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/Signers/DKIMSigner.php" , line : 680usize , placeholders : & ["openssl_error_string()"] , has_meaningful_message : true , exception : Some ("Swift_SwiftException") , regex : "^Unable to sign DKIM Hash \\[(.*)\\]$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/Signers/SMimeSigner.php" , line : 278usize , placeholders : & ["sprintf('Failed to sign S/Mime message. Error: \"%s\".', openssl_error_string())"] , has_meaningful_message : false , exception : Some ("Swift_IoException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/Signers/SMimeSigner.php" , line : 335usize , placeholders : & ["sprintf('Failed to encrypt S/Mime message. Error: \"%s\".', openssl_error_string())"] , has_meaningful_message : false , exception : Some ("Swift_IoException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/DependencyContainer.php" , line : 104usize , placeholders : & ["$itemName"] , has_meaningful_message : true , exception : Some ("Swift_DependencyException") , regex : "^Cannot lookup dependency \"(.*)\" since it is not registered\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/DependencyContainer.php" , line : 349usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadMethodCallException") , regex : "^Component must first be registered by calling register\\(\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/KeyCache/ArrayKeyCache.php" , line : 65usize , placeholders : & ["$mode" , "$nsKey" , "$itemKey"] , has_meaningful_message : true , exception : Some ("Swift_SwiftException") , regex : "^Invalid mode \\[(.*)\\] used to set nsKey=(.*), itemKey=(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/KeyCache/ArrayKeyCache.php" , line : 94usize , placeholders : & ["$mode" , "$nsKey" , "$itemKey"] , has_meaningful_message : true , exception : Some ("Swift_SwiftException") , regex : "^Invalid mode \\[(.*)\\] used to set nsKey=(.*), itemKey=(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/KeyCache/DiskKeyCache.php" , line : 83usize , placeholders : & ["$mode" , "$nsKey" , "$itemKey"] , has_meaningful_message : true , exception : Some ("Swift_SwiftException") , regex : "^Invalid mode \\[(.*)\\] used to set nsKey=(.*), itemKey=(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/KeyCache/DiskKeyCache.php" , line : 112usize , placeholders : & ["$mode" , "$nsKey" , "$itemKey"] , has_meaningful_message : true , exception : Some ("Swift_SwiftException") , regex : "^Invalid mode \\[(.*)\\] used to set nsKey=(.*), itemKey=(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/KeyCache/DiskKeyCache.php" , line : 242usize , placeholders : & ["$cacheDir"] , has_meaningful_message : true , exception : Some ("Swift_IoException") , regex : "^Failed to create cache directory (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/ByteStream/FileByteStream.php" , line : 45usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Swift_IoException") , regex : "^The path cannot be empty$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/ByteStream/FileByteStream.php" , line : 131usize , placeholders : & ["$this->path"] , has_meaningful_message : true , exception : Some ("Swift_IoException") , regex : "^Unable to open file for reading \\[(.*)\\]$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/ByteStream/FileByteStream.php" , line : 148usize , placeholders : & ["$this->path"] , has_meaningful_message : true , exception : Some ("Swift_IoException") , regex : "^Unable to open file for writing \\[(.*)\\]$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/ByteStream/FileByteStream.php" , line : 198usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Swift_IoException") , regex : "^Unable to copy the file to make it seekable, sys_temp_dir is not writable, php://memory not available$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/ByteStream/FileByteStream.php" , line : 204usize , placeholders : & ["$this->path"] , has_meaningful_message : true , exception : Some ("Swift_IoException") , regex : "^Unable to open file for copying \\[(.*)\\]$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/ByteStream/TemporaryFileByteStream.php" , line : 21usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Swift_IoException") , regex : "^Failed to retrieve temporary file name\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/ByteStream/TemporaryFileByteStream.php" , line : 30usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Swift_IoException") , regex : "^Failed to get temporary file content\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/ByteStream/TemporaryFileByteStream.php" , line : 45usize , placeholders : & ["__CLASS__"] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Cannot serialize (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/ByteStream/TemporaryFileByteStream.php" , line : 50usize , placeholders : & ["__CLASS__"] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Cannot unserialize (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/LoggerPlugin.php" , line : 124usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("Swift_TransportException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/PopBeforeSmtpPlugin.php" , line : 135usize , placeholders : & ["sprintf('Failed to connect to POP3 host [%s]: %s', $this->host, $errstr)"] , has_meaningful_message : false , exception : Some ("Swift_Plugins_Pop_Pop3Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/PopBeforeSmtpPlugin.php" , line : 140usize , placeholders : & ["sprintf('Failed to connect to POP3 host [%s]', trim($greeting ?? ''))"] , has_meaningful_message : false , exception : Some ("Swift_Plugins_Pop_Pop3Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/PopBeforeSmtpPlugin.php" , line : 163usize , placeholders : & ["sprintf('POP3 host [%s] connection could not be stopped', $this->host)"] , has_meaningful_message : false , exception : Some ("Swift_Plugins_Pop_Pop3Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/PopBeforeSmtpPlugin.php" , line : 208usize , placeholders : & ["sprintf('Failed to write command [%s] to POP3 host', trim($command ?? ''))"] , has_meaningful_message : false , exception : Some ("Swift_Plugins_Pop_Pop3Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/PopBeforeSmtpPlugin.php" , line : 212usize , placeholders : & ["sprintf('Failed to read from POP3 host after command [%s]', trim($command ?? ''))"] , has_meaningful_message : false , exception : Some ("Swift_Plugins_Pop_Pop3Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/PopBeforeSmtpPlugin.php" , line : 223usize , placeholders : & ["sprintf('POP3 command failed [%s]', trim($response ?? ''))"] , has_meaningful_message : false , exception : Some ("Swift_Plugins_Pop_Pop3Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/Mime/ContentEncoder/NativeQpContentEncoder.php" , line : 54usize , placeholders : & ["sprintf('Charset \"%s\" not supported. NativeQpContentEncoder only supports \"utf-8\"', $this->charset)"] , has_meaningful_message : false , exception : Some ("RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/Mime/ContentEncoder/NativeQpContentEncoder.php" , line : 90usize , placeholders : & ["sprintf('Charset \"%s\" not supported. NativeQpContentEncoder only supports \"utf-8\"', $this->charset)"] , has_meaningful_message : false , exception : Some ("RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/MailboxHeader.php" , line : 355usize , placeholders : & ["$address"] , has_meaningful_message : true , exception : Some ("Swift_RfcComplianceException") , regex : "^Address in mailbox given \\[(.*)\\] does not comply with RFC 2822, 3\\.6\\.2\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/PathHeader.php" , line : 150usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Swift_RfcComplianceException") , regex : "^Address set in PathHeader does not comply with addr\\-spec of RFC 2822\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/Mime/Headers/IdentificationHeader.php" , line : 186usize , placeholders : & ["$id"] , has_meaningful_message : true , exception : Some ("Swift_RfcComplianceException") , regex : "^Invalid ID given <(.*)>$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/Mime/SimpleMimeEntity.php" , line : 698usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Swift_RfcComplianceException") , regex : "^Mime boundary set is not RFC 2046 compliant\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/Transport/AbstractSmtpTransport.php" , line : 534usize , placeholders : & ["__CLASS__"] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Cannot serialize (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/Transport/AbstractSmtpTransport.php" , line : 539usize , placeholders : & ["__CLASS__"] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Cannot unserialize (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/Transport/FailoverTransport.php" , line : 83usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Swift_TransportException") , regex : "^All Transports in FailoverTransport failed, or no Transports available$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/Transport/EsmtpTransport.php" , line : 349usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Swift_TransportException") , regex : "^Unable to connect with TLS encryption$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/Transport/StreamBuffer.php" , line : 166usize , placeholders : & ["$this->getReadConnectionDescription()"] , has_meaningful_message : true , exception : Some ("Swift_IoException") , regex : "^Connection to (.*) Timed Out$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/Transport/StreamBuffer.php" , line : 194usize , placeholders : & ["$this->getReadConnectionDescription()"] , has_meaningful_message : true , exception : Some ("Swift_IoException") , regex : "^Connection to (.*) Timed Out$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/Transport/StreamBuffer.php" , line : 261usize , placeholders : & ["$this->params['host']" , "$msg"] , has_meaningful_message : true , exception : Some ("Swift_TransportException") , regex : "^Connection could not be established with host (.*) :(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/Transport/StreamBuffer.php" , line : 294usize , placeholders : & ["$err"] , has_meaningful_message : true , exception : Some ("Swift_TransportException") , regex : "^Process could not be started \\[(.*)\\]$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/Transport/LoadBalancedTransport.php" , line : 149usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Swift_TransportException") , regex : "^All Transports in LoadBalancedTransport failed, or no Transports available$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/NTLMAuthenticator.php" , line : 41usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^The OpenSSL extension must be enabled to use the NTLM authenticator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/NTLMAuthenticator.php" , line : 45usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^The BCMath functions must be enabled to use the NTLM authenticator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/AuthHandler.php" , line : 191usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("Swift_TransportException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/AuthHandler.php" , line : 266usize , placeholders : & ["$mode"] , has_meaningful_message : true , exception : Some ("Swift_TransportException") , regex : "^Auth mode (.*) is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/swiftmailer/swiftmailer/lib/classes/Swift/AddressEncoder/IdnAddressEncoder.php" , line : 40usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Swift_AddressEncoderException") , regex : "^Non\\-ASCII characters not supported in local\\-part$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-ds/php-ds/src/Traits/GenericSequence.php" , line : 104usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("UnderflowException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-ds/php-ds/src/Traits/GenericSequence.php" , line : 116usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OutOfRangeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-ds/php-ds/src/Traits/GenericSequence.php" , line : 128usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OutOfRangeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-ds/php-ds/src/Traits/GenericSequence.php" , line : 149usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("UnderflowException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-ds/php-ds/src/Traits/GenericSequence.php" , line : 169usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("UnderflowException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-ds/php-ds/src/Traits/GenericSequence.php" , line : 204usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OutOfRangeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-ds/php-ds/src/Traits/GenericSequence.php" , line : 259usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OutOfRangeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-ds/php-ds/src/Traits/GenericSequence.php" , line : 271usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("UnderflowException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-ds/php-ds/src/Traits/GenericSequence.php" , line : 378usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OutOfRangeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-ds/php-ds/src/Pair.php" , line : 66usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OutOfBoundsException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-ds/php-ds/src/Pair.php" , line : 79usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OutOfBoundsException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-ds/php-ds/src/Pair.php" , line : 94usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OutOfBoundsException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-ds/php-ds/src/Map.php" , line : 72usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("UnderflowException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-ds/php-ds/src/Map.php" , line : 88usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("UnderflowException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-ds/php-ds/src/Map.php" , line : 106usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OutOfRangeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-ds/php-ds/src/Map.php" , line : 286usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OutOfBoundsException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-ds/php-ds/src/Map.php" , line : 432usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\OutOfBoundsException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-ds/php-ds/src/Map.php" , line : 679usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OutOfBoundsException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-ds/php-ds/src/PriorityQueue.php" , line : 82usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("UnderflowException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-ds/php-ds/src/PriorityQueue.php" , line : 226usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("UnderflowException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-ds/php-ds/src/Set.php" , line : 429usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Error") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-ds/php-ds/src/Set.php" , line : 447usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Error") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-ds/php-ds/src/Set.php" , line : 457usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Error") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-ds/php-ds/src/Queue.php" , line : 138usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Error") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-ds/php-ds/src/Queue.php" , line : 149usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Error") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-ds/php-ds/src/Queue.php" , line : 159usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Error") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-ds/php-ds/src/Queue.php" , line : 169usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Error") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-ds/php-ds/src/Stack.php" , line : 143usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Error") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-ds/php-ds/src/Stack.php" , line : 154usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Error") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-ds/php-ds/src/Stack.php" , line : 164usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Error") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-ds/php-ds/src/Stack.php" , line : 174usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Error") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/Utility/BigIntegerGmp.php" , line : 48usize , placeholders : & ["sprintf('Can not represent %s as integer.', $this)"] , has_meaningful_message : false , exception : Some ("\\OverflowException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/Utility/BigIntegerGmp.php" , line : 104usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^Unable to raise to power greater than PHP_INT_MAX\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/Utility/BigIntegerBcmath.php" , line : 44usize , placeholders : & ["sprintf('Can not represent %s as integer.', $this->_str)"] , has_meaningful_message : false , exception : Some ("\\OverflowException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/Utility/BigInteger.php" , line : 51usize , placeholders : & ["self::$_prefer"] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^Unknown number implementation: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/Utility/BigInteger.php" , line : 62usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Requires GMP or bcmath extension\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/Utility/BigInteger.php" , line : 75usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Expects a string representation of an integer\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/ASN1/AbstractString.php" , line : 106usize , placeholders : & ["$typeName" , "$this->value"] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Could not create a (.*) from the character sequence '(.*)'\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/ASN1/ExplicitlyTaggedObject.php" , line : 124usize , placeholders : & ["$tag" , "$offsetIndexOfDecoratedObject" , "$totalContentLength" , "$remainingContentLength"] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^Context\\-Specific explicitly tagged object \\[(.*)\\] starting at offset (.*) specifies a length of (.*) octets but (.*) remain after parsing the content$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/ASN1/ASNObject.php" , line : 97usize , placeholders : & ["sprintf('Identifier of %s uses the long form and must therefor override \"ASNObject::getIdentifier()\".', get_class($this))"] , has_meaningful_message : false , exception : Some ("LogicException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/ASN1/ASNObject.php" , line : 207usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^Can not parse binary from data: Offset index larger than input size$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/ASN1/ASNObject.php" , line : 286usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("ParserException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/ASN1/ASNObject.php" , line : 293usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^Can not parse identifier from data: Offset index larger than input size$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/ASN1/ASNObject.php" , line : 304usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^Can not parse identifier \\(long form\\) from data: Offset index larger than input size$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/ASN1/ASNObject.php" , line : 321usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^Can not parse content length from data: Offset index larger than input size$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/ASN1/ASNObject.php" , line : 331usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^Can not parse content length \\(long form\\) from data: Offset index larger than input size$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/ASN1/ASNObject.php" , line : 337usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^Can not parse content length from data: length > maximum integer$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/ASN1/ASNObject.php" , line : 344usize , placeholders : & ["get_called_class()" , "$minimumLength" , "$contentLength"] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^A (.*) should have a content length of at least (.*)\\. Extracted length was (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/ASN1/ASNObject.php" , line : 350usize , placeholders : & ["$contentLength" , "$lenDataRemaining"] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^Content length (.*) exceeds remaining data length (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/ASN1/TemplateParser.php" , line : 67usize , placeholders : & ["$expectedTypeId" , "$actualType"] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Expected type \\((.*)\\) does not match actual type \\((.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/ASN1/AbstractTime.php" , line : 31usize , placeholders : & ["sprintf(\"Could not create %s from date time string '%s': %s\", $className, $dateTime, $errorMessage)"] , has_meaningful_message : false , exception : Some ("Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/ASN1/AbstractTime.php" , line : 35usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Invalid first argument for some instance of AbstractTime constructor$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/ASN1/Base128.php" , line : 47usize , placeholders : & ["sprintf('Malformed base-128 encoded value (0x%s).', strtoupper(bin2hex($octets)) ?: '0')"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/ASN1/Composite/RelativeDistinguishedName.php" , line : 48usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotImplementedException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/ASN1/Construct.php" , line : 173usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^Sequence length incorrect$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/ASN1/Identifier.php" , line : 85usize , placeholders : & ["sprintf('Invalid class %d given', $class)"] , has_meaningful_message : false , exception : Some ("Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/ASN1/Identifier.php" , line : 89usize , placeholders : & ["$isConstructed"] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^\\$isConstructed must be a boolean value \\((.*) given\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/ASN1/Identifier.php" , line : 94usize , placeholders : & ["sprintf('Invalid $tagNumber %d given. You can only use positive integers.', $tagNumber)"] , has_meaningful_message : false , exception : Some ("Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/ASN1/Universal/Boolean.php" , line : 64usize , placeholders : & ["$contentLength"] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^An ASN\\.1 Boolean should not have a length other than one\\. Extracted length was (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/ASN1/Universal/OctetString.php" , line : 32usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^OctetString: unrecognized input type!$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/ASN1/Universal/Integer.php" , line : 33usize , placeholders : & ["$value"] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Invalid VALUE \\[(.*)\\] for ASN1_INTEGER$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/ASN1/Universal/Integer.php" , line : 101usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^Integer not minimally encoded$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/ASN1/Universal/ObjectIdentifier.php" , line : 36usize , placeholders : & ["$value" , "($i + 1)"] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^\\[(.*)\\] is no valid object identifier \\(sub identifier (.*) is not numeric\\)!$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/ASN1/Universal/ObjectIdentifier.php" , line : 124usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^Malformed ASN\\.1 Object Identifier$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/ASN1/Universal/BitString.php" , line : 35usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^BitString: second parameter needs to be a positive number \\(or zero\\)!$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/ASN1/Universal/BitString.php" , line : 78usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^Can not parse bit string with invalid padding$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/ASN1/Universal/NullObject.php" , line : 46usize , placeholders : & ["$contentLength"] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^An ASN\\.1 Null should not have a length other than zero\\. Extracted length was (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/ASN1/Universal/UTCTime.php" , line : 69usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^Invalid UTC String$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/ASN1/Universal/RelativeObjectIdentifier.php" , line : 31usize , placeholders : & ["$subIdentifiers" , "($i + 1)"] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^\\[(.*)\\] is no valid object identifier \\(sub identifier (.*) is not numeric\\)!$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/ASN1/Universal/RelativeObjectIdentifier.php" , line : 49usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^Malformed ASN\\.1 Relative Object Identifier$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/ASN1/Universal/GeneralizedTime.php" , line : 124usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^Invalid ISO 8601 Time String$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/X509/CertificateExtensions.php" , line : 68usize , placeholders : & ["$extension->getTypeName()"] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^Could not parse Certificate Extensions: Expected ASN\\.1 Sequence but got (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/X509/CertificateExtensions.php" , line : 74usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^Could not parse Certificate Extensions: Needs at least two child elements per extension sequence \\(object identifier and octet string\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/X509/CertificateExtensions.php" , line : 83usize , placeholders : & ["$extension->getTypeName()"] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^Could not parse Certificate Extensions: Expected ASN\\.1 Object Identifier but got (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/X509/SAN/IPAddress.php" , line : 60usize , placeholders : & ["$contentLength"] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^A FG\\\\X509\\\\SAN\\\\IPAddress should have a content length of 4\\. Extracted length was (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/X509/SAN/SubjectAlternativeNames.php" , line : 68usize , placeholders : & ["OID::CERT_EXT_SUBJECT_ALT_NAME" , "$contentLength"] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^Can not parse Subject Alternative Names: The Sequence within the octet string after the Object identifier (.*) is too short \\((.*) octets\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/X509/SAN/SubjectAlternativeNames.php" , line : 76usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^Can not parse Subject Alternative Names: The Sequence length does not match the length of the surrounding octet string$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/fgrosse/phpasn1/lib/X509/SAN/SubjectAlternativeNames.php" , line : 89usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ParserException") , regex : "^Could not parse Subject Alternative Name: Only DNSName and IP SANs are currently supported$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/justinrainbow/json-schema/src/JsonSchema/Uri/Retrievers/FileGetContents.php" , line : 38usize , placeholders : & ["$errorMessage"] , has_meaningful_message : false , exception : Some ("ResourceNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/justinrainbow/json-schema/src/JsonSchema/Uri/Retrievers/FileGetContents.php" , line : 42usize , placeholders : & ["$uri"] , has_meaningful_message : true , exception : Some ("ResourceNotFoundException") , regex : "^JSON schema not found at (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/justinrainbow/json-schema/src/JsonSchema/Uri/Retrievers/FileGetContents.php" , line : 48usize , placeholders : & ["$uri"] , has_meaningful_message : true , exception : Some ("ResourceNotFoundException") , regex : "^JSON schema not found at (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/justinrainbow/json-schema/src/JsonSchema/Uri/Retrievers/Curl.php" , line : 28usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^cURL not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/justinrainbow/json-schema/src/JsonSchema/Uri/Retrievers/Curl.php" , line : 48usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\JsonSchema\\Exception\\ResourceNotFoundException") , regex : "^JSON schema not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/justinrainbow/json-schema/src/JsonSchema/Uri/Retrievers/PredefinedArray.php" , line : 48usize , placeholders : & ["sprintf(\n                'The JSON schema \"%s\" was not found.',\n                $uri\n            )"] , has_meaningful_message : false , exception : Some ("\\JsonSchema\\Exception\\ResourceNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/justinrainbow/json-schema/src/JsonSchema/Uri/UriResolver.php" , line : 140usize , placeholders : & ["sprintf(\"Unable to resolve URI '%s' from base '%s'\", $relativePath, $basePath)"] , has_meaningful_message : false , exception : Some ("UriResolverException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/justinrainbow/json-schema/src/JsonSchema/Uri/UriRetriever.php" , line : 92usize , placeholders : & ["sprintf('Media type %s expected', Validator::SCHEMA_MEDIA_TYPE)"] , has_meaningful_message : false , exception : Some ("InvalidSchemaMediaTypeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/justinrainbow/json-schema/src/JsonSchema/Uri/UriRetriever.php" , line : 143usize , placeholders : & ["$parsed['fragment']" , "$uri"] , has_meaningful_message : true , exception : Some ("ResourceNotFoundException") , regex : "^Fragment \"(.*)\" not found in (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/justinrainbow/json-schema/src/JsonSchema/Uri/UriRetriever.php" , line : 150usize , placeholders : & ["$pathElement" , "$uri"] , has_meaningful_message : true , exception : Some ("ResourceNotFoundException") , regex : "^Fragment part \"(.*)\" is no object  in (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/justinrainbow/json-schema/src/JsonSchema/Uri/UriRetriever.php" , line : 213usize , placeholders : & ["$error"] , has_meaningful_message : false , exception : Some ("JsonDecodingException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/justinrainbow/json-schema/src/JsonSchema/Entity/JsonPointer.php" , line : 40usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Ref value must be a string$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/justinrainbow/json-schema/src/JsonSchema/SchemaStorage.php" , line : 131usize , placeholders : & ["sprintf(\n                \"Could not resolve fragment '%s': no file is defined\",\n                $jsonPointer->getPropertyPathAsString()\n            )"] , has_meaningful_message : false , exception : Some ("UnresolvableJsonPointerException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/justinrainbow/json-schema/src/JsonSchema/SchemaStorage.php" , line : 145usize , placeholders : & ["sprintf(\n                    'File: %s is found, but could not resolve fragment: %s',\n                    $jsonPointer->getFilename(),\n                    $jsonPointer->getPropertyPathAsString()\n                )"] , has_meaningful_message : false , exception : Some ("UnresolvableJsonPointerException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/justinrainbow/json-schema/src/JsonSchema/Constraints/TypeConstraint.php" , line : 138usize , placeholders : & ["sprintf(\n                    'No wording for %s available, expected wordings are: [%s]',\n                    var_export($type, true),\n                    implode(', ', array_filter(self::$wording)))"] , has_meaningful_message : false , exception : Some ("StandardUnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/justinrainbow/json-schema/src/JsonSchema/Constraints/TypeConstraint.php" , line : 214usize , placeholders : & ["(is_object($value) ? 'object' : $value)" , "$type"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^(.*) is an invalid type for (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/justinrainbow/json-schema/src/JsonSchema/Constraints/SchemaConstraint.php" , line : 40usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^no schema found to verify against$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/justinrainbow/json-schema/src/JsonSchema/Constraints/SchemaConstraint.php" , line : 52usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^Cannot validate the schema of a non\\-object$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/justinrainbow/json-schema/src/JsonSchema/Constraints/SchemaConstraint.php" , line : 79usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidSchemaException") , regex : "^Schema did not pass validation$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/justinrainbow/json-schema/src/JsonSchema/Constraints/BaseConstraint.php" , line : 57usize , placeholders : & ["sprintf('Error validating %s: %s', $error['pointer'], $error['message'])"] , has_meaningful_message : false , exception : Some ("ValidationException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/justinrainbow/json-schema/src/JsonSchema/Constraints/BaseConstraint.php" , line : 143usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/justinrainbow/json-schema/src/JsonSchema/Constraints/Factory.php" , line : 168usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Unknown constraint (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/justinrainbow/json-schema/src/JsonSchema/Constraints/Factory.php" , line : 172usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Invalid class (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/justinrainbow/json-schema/src/JsonSchema/Constraints/Factory.php" , line : 191usize , placeholders : & ["$constraintName"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Unknown constraint (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/Http.php" , line : 49usize , placeholders : & ["sprintf('an URI without scheme can not contains a empty host string according to PSR-7: %s', (string) $uri)"] , has_meaningful_message : false , exception : Some ("SyntaxError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/Http.php" , line : 54usize , placeholders : & ["sprintf('The URI port is outside the established TCP and UDP port ranges: %s', (string) $uri->getPort())"] , has_meaningful_message : false , exception : Some ("SyntaxError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/UriTemplate/VariableBag.php" , line : 91usize , placeholders : & ["sprintf('The variable '.$name.' must be NULL, a scalar or a stringable object `%s` given', gettype($value))"] , has_meaningful_message : false , exception : Some ("\\TypeError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/UriTemplate/Expression.php" , line : 140usize , placeholders : & ["$expression"] , has_meaningful_message : true , exception : Some ("SyntaxError") , regex : "^The expression \"(.*)\" is invalid\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/UriTemplate/Expression.php" , line : 146usize , placeholders : & ["$expression"] , has_meaningful_message : true , exception : Some ("SyntaxError") , regex : "^The operator used in the expression \"(.*)\" is reserved\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/UriTemplate/Template.php" , line : 85usize , placeholders : & ["sprintf('The template must be a string or a stringable object %s given.', gettype($template))"] , has_meaningful_message : false , exception : Some ("\\TypeError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/UriTemplate/Template.php" , line : 91usize , placeholders : & ["$template"] , has_meaningful_message : true , exception : Some ("SyntaxError") , regex : "^The template \"(.*)\" contains invalid expressions\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/UriTemplate/VarSpecifier.php" , line : 64usize , placeholders : & ["$specification"] , has_meaningful_message : true , exception : Some ("SyntaxError") , regex : "^The variable specification \"(.*)\" is invalid\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/UriTemplate/VarSpecifier.php" , line : 78usize , placeholders : & ["$specification"] , has_meaningful_message : true , exception : Some ("SyntaxError") , regex : "^The variable specification \"(.*)\" is invalid the position modifier must be lower than 10000\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/UriInfo.php" , line : 64usize , placeholders : & ["sprintf('The uri must be a valid URI object received `%s`', is_object($uri) ? get_class($uri) : gettype($uri))"] , has_meaningful_message : false , exception : Some ("\\TypeError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/Uri.php" , line : 327usize , placeholders : & ["sprintf('The scheme `%s` is invalid.', $scheme)"] , has_meaningful_message : false , exception : Some ("SyntaxError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/Uri.php" , line : 405usize , placeholders : & ["sprintf('the host `%s` could not be processed for IDN. Verify that ext/intl is installed for IDN support and that ICU is at least version 4.6.', $host)"] , has_meaningful_message : false , exception : Some ("IdnSupportMissing") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/Uri.php" , line : 417usize , placeholders : & ["sprintf('The host `%s` is invalid : %s', $host, $this->getIDNAErrors($arr['errors']))"] , has_meaningful_message : false , exception : Some ("SyntaxError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/Uri.php" , line : 422usize , placeholders : & ["sprintf('The Intl extension is misconfigured for %s, please correct this issue before proceeding.', PHP_OS)"] , has_meaningful_message : false , exception : Some ("IdnSupportMissing") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/Uri.php" , line : 430usize , placeholders : & ["sprintf('The host `%s` is invalid : a registered name can not contain URI delimiters or spaces', $host)"] , has_meaningful_message : false , exception : Some ("SyntaxError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/Uri.php" , line : 435usize , placeholders : & ["sprintf('the host `%s` could not be processed for IDN. Verify that ext/intl is installed for IDN support and that ICU is at least version 4.6.', $host)"] , has_meaningful_message : false , exception : Some ("IdnSupportMissing") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/Uri.php" , line : 447usize , placeholders : & ["sprintf('Host `%s` is invalid', $host)"] , has_meaningful_message : false , exception : Some ("SyntaxError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/Uri.php" , line : 451usize , placeholders : & ["sprintf('The host `%s` is invalid : %s', $host, $this->getIDNAErrors($arr['errors']))"] , has_meaningful_message : false , exception : Some ("SyntaxError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/Uri.php" , line : 456usize , placeholders : & ["sprintf('The Intl extension is misconfigured for %s, please correct this issue before proceeding.', PHP_OS)"] , has_meaningful_message : false , exception : Some ("IdnSupportMissing") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/Uri.php" , line : 517usize , placeholders : & ["sprintf('The host `%s` is invalid : the IP host is malformed', $host)"] , has_meaningful_message : false , exception : Some ("SyntaxError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/Uri.php" , line : 521usize , placeholders : & ["sprintf('The host `%s` is invalid : the IP host is malformed', $host)"] , has_meaningful_message : false , exception : Some ("SyntaxError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/Uri.php" , line : 526usize , placeholders : & ["sprintf('The host `%s` is invalid : the IP host is malformed', $host)"] , has_meaningful_message : false , exception : Some ("SyntaxError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/Uri.php" , line : 535usize , placeholders : & ["sprintf('The host `%s` is invalid : the IP host is malformed', $host)"] , has_meaningful_message : false , exception : Some ("SyntaxError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/Uri.php" , line : 552usize , placeholders : & ["sprintf('The port `%s` is invalid', $port)"] , has_meaningful_message : false , exception : Some ("SyntaxError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/Uri.php" , line : 557usize , placeholders : & ["sprintf('The port `%s` is invalid', $port)"] , has_meaningful_message : false , exception : Some ("SyntaxError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/Uri.php" , line : 607usize , placeholders : & ["sprintf('the URI `%s` must be absolute', (string) $uri)"] , has_meaningful_message : false , exception : Some ("SyntaxError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/Uri.php" , line : 625usize , placeholders : & ["sprintf('the base URI `%s` must be absolute', (string) $base_uri)"] , has_meaningful_message : false , exception : Some ("SyntaxError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/Uri.php" , line : 697usize , placeholders : & ["sprintf('Please install ext/fileinfo to use the %s() method.', __METHOD__)"] , has_meaningful_message : false , exception : Some ("FileinfoSupportMissing") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/Uri.php" , line : 710usize , placeholders : & ["sprintf('The file `%s` does not exist or is not readable', $path)"] , has_meaningful_message : false , exception : Some ("SyntaxError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/Uri.php" , line : 790usize , placeholders : & ["sprintf('The object must implement the `%s` or the `%s`', Psr7UriInterface::class, UriInterface::class)"] , has_meaningful_message : false , exception : Some ("\\TypeError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/Uri.php" , line : 876usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("SyntaxError") , regex : "^The user info could not be detected$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/Uri.php" , line : 916usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("SyntaxError") , regex : "^The host could not be detected$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/Uri.php" , line : 1004usize , placeholders : & ["sprintf('The path `%s` is invalid according to RFC2937', $path)"] , has_meaningful_message : false , exception : Some ("SyntaxError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/Uri.php" , line : 1035usize , placeholders : & ["sprintf('The path mimetype `%s` is invalid', $mimetype)"] , has_meaningful_message : false , exception : Some ("SyntaxError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/Uri.php" , line : 1045usize , placeholders : & ["sprintf('The path paremeters `%s` is invalid', $parameters)"] , has_meaningful_message : false , exception : Some ("SyntaxError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/Uri.php" , line : 1054usize , placeholders : & ["sprintf('The path data `%s` is invalid', $data)"] , has_meaningful_message : false , exception : Some ("SyntaxError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/Uri.php" , line : 1118usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("SyntaxError") , regex : "^If an authority is present the path must be empty or start with a `/`\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/Uri.php" , line : 1122usize , placeholders : & ["sprintf('If there is no authority the path `%s` can not start with a `//`.', $this->path)"] , has_meaningful_message : false , exception : Some ("SyntaxError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/Uri.php" , line : 1131usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("SyntaxError") , regex : "^In absence of a scheme and an authority the first path segment cannot contain a colon \\(\":\"\\) character\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/Uri.php" , line : 1141usize , placeholders : & ["sprintf('The uri `%s` is invalid for the `%s` scheme.', (string) $this, $this->scheme)"] , has_meaningful_message : false , exception : Some ("SyntaxError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/Uri.php" , line : 1372usize , placeholders : & ["sprintf('The component must be a string, a scalar or a stringable object %s given.', gettype($str))"] , has_meaningful_message : false , exception : Some ("\\TypeError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/Uri.php" , line : 1380usize , placeholders : & ["sprintf('The component `%s` contains invalid characters.', $str)"] , has_meaningful_message : false , exception : Some ("SyntaxError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/Uri.php" , line : 1453usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\TypeError") , regex : "^A path must be a string NULL given\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/UriResolver.php" , line : 102usize , placeholders : & ["sprintf('The uri must be a valid URI object received `%s`', gettype($uri))"] , has_meaningful_message : false , exception : Some ("\\TypeError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/UriString.php" , line : 284usize , placeholders : & ["sprintf('The uri must be a scalar or a stringable object `%s` given', gettype($uri))"] , has_meaningful_message : false , exception : Some ("\\TypeError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/UriString.php" , line : 297usize , placeholders : & ["sprintf('The uri `%s` contains invalid characters', $uri)"] , has_meaningful_message : false , exception : Some ("SyntaxError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/UriString.php" , line : 328usize , placeholders : & ["sprintf('The uri `%s` contains an invalid scheme', $uri)"] , has_meaningful_message : false , exception : Some ("SyntaxError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/UriString.php" , line : 332usize , placeholders : & ["sprintf('The uri `%s` contains an invalid path.', $uri)"] , has_meaningful_message : false , exception : Some ("SyntaxError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/UriString.php" , line : 397usize , placeholders : & ["sprintf('The port `%s` is invalid', $port)"] , has_meaningful_message : false , exception : Some ("SyntaxError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/UriString.php" , line : 418usize , placeholders : & ["sprintf('Host `%s` is invalid : the IP host is malformed', $host)"] , has_meaningful_message : false , exception : Some ("SyntaxError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/UriString.php" , line : 449usize , placeholders : & ["sprintf('the host `%s` could not be processed for IDN. Verify that ext/intl is installed for IDN support and that ICU is at least version 4.6.', $host)"] , has_meaningful_message : false , exception : Some ("IdnSupportMissing") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/UriString.php" , line : 455usize , placeholders : & ["sprintf('The host `%s` is invalid : %s', $host, self::getIDNAErrors($arr['errors']))"] , has_meaningful_message : false , exception : Some ("SyntaxError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/UriString.php" , line : 460usize , placeholders : & ["sprintf('The Intl extension is misconfigured for %s, please correct this issue before proceeding.', PHP_OS)"] , has_meaningful_message : false , exception : Some ("IdnSupportMissing") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/UriString.php" , line : 469usize , placeholders : & ["sprintf('Host `%s` is invalid : the host is not a valid registered name', $host)"] , has_meaningful_message : false , exception : Some ("SyntaxError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/UriString.php" , line : 474usize , placeholders : & ["sprintf('the host `%s` could not be processed for IDN. Verify that ext/intl is installed for IDN support and that ICU is at least version 4.6.', $host)"] , has_meaningful_message : false , exception : Some ("IdnSupportMissing") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/UriString.php" , line : 481usize , placeholders : & ["sprintf('Host `%s` is not a valid IDN host', $host)"] , has_meaningful_message : false , exception : Some ("SyntaxError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/UriString.php" , line : 485usize , placeholders : & ["sprintf('Host `%s` is not a valid IDN host : %s', $host, self::getIDNAErrors($arr['errors']))"] , has_meaningful_message : false , exception : Some ("SyntaxError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/UriString.php" , line : 490usize , placeholders : & ["sprintf('The Intl extension is misconfigured for %s, please correct this issue before proceeding.', PHP_OS)"] , has_meaningful_message : false , exception : Some ("IdnSupportMissing") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/league/uri/src/UriString.php" , line : 495usize , placeholders : & ["sprintf('Host `%s` is invalid : the host is not a valid registered name', $host)"] , has_meaningful_message : false , exception : Some ("SyntaxError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-opencloud/openstack/src/Images/v2/Models/Image.php" , line : 162usize , placeholders : & ["$schema->getErrorString()"] , has_meaningful_message : false , exception : Some ("\\RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-opencloud/openstack/src/Common/Service/Builder.php" , line : 57usize , placeholders : & ["sprintf('%s does not exist', $class)"] , has_meaningful_message : false , exception : Some ("\\RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-opencloud/openstack/src/Common/Service/Builder.php" , line : 164usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^\"authUrl\" is a required option$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-opencloud/openstack/src/Common/Service/Builder.php" , line : 168usize , placeholders : & ["sprintf('\"identityService\" must be specified and implement %s', IdentityService::class)"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-opencloud/openstack/src/Common/Resource/AbstractResource.php" , line : 120usize , placeholders : & ["sprintf('%s does not implement %s', $class, ResourceInterface::class)"] , has_meaningful_message : false , exception : Some ("\\RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-opencloud/openstack/src/Common/Resource/OperatorResource.php" , line : 135usize , placeholders : & ["sprintf('%s does not implement %s', $class, ResourceInterface::class)"] , has_meaningful_message : false , exception : Some ("\\RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-opencloud/openstack/src/Common/Api/OperatorTrait.php" , line : 142usize , placeholders : & ["sprintf('%s does not implement %s', $class, ResourceInterface::class)"] , has_meaningful_message : false , exception : Some ("\\RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-opencloud/openstack/src/Common/Api/Operation.php" , line : 116usize , placeholders : & ["sprintf('\"%s\" is a required option, but it was not provided', $paramName)"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-opencloud/openstack/src/Common/Api/Parameter.php" , line : 137usize , placeholders : & ["sprintf('%s is not a permitted location', $this->location)"] , has_meaningful_message : false , exception : Some ("\\RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-opencloud/openstack/src/Common/Api/Parameter.php" , line : 203usize , placeholders : & ["sprintf('The only permitted values are %s. You provided %s', implode(', ', $this->enum), print_r($userValues, true))"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-opencloud/openstack/src/Common/Api/Parameter.php" , line : 210usize , placeholders : & ["sprintf('The key provided \"%s\" has the wrong value type. You provided %s (%s) but was expecting %s', $this->name, print_r($userValues, true), gettype($userValues), $this->type)"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-opencloud/openstack/src/Common/Api/Parameter.php" , line : 245usize , placeholders : & ["sprintf('The key provided \"%s\" is not defined', $key)"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-opencloud/openstack/src/Common/Transport/Utils.php" , line : 34usize , placeholders : & ["(isset($jsonErrors[$last]) ? $jsonErrors[$last] : 'Unknown error')"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Unable to parse JSON data: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-opencloud/openstack/src/Common/Transport/JsonSerializer.php" , line : 100usize , placeholders : & ["sprintf('When an object value is provided, it must either be \\stdClass or implement the Serializable '.'interface, you provided %s', print_r($value, true))"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-opencloud/openstack/src/Identity/v2/Models/Catalog.php" , line : 62usize , placeholders : & ["sprintf(\"Endpoint URL could not be found in the catalog for this service.\\nName: %s\\nType: %s\\nRegion: %s\\nURL type: %s\", $serviceName, $serviceType, $region, $urlType)"] , has_meaningful_message : false , exception : Some ("\\RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-opencloud/openstack/src/Identity/v3/Service.php" , line : 39usize , placeholders : & ["sprintf('Cached token has expired on \"%s\".', $token->expires->format(\\DateTime::ISO8601))"] , has_meaningful_message : false , exception : Some ("\\RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-opencloud/openstack/src/Identity/v3/Service.php" , line : 54usize , placeholders : & ["sprintf('No service found with type [%s] name [%s] region [%s] interface [%s]', $type, $name, $region, $interface)"] , has_meaningful_message : false , exception : Some ("\\RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-opencloud/openstack/src/Identity/v3/Models/Catalog.php" , line : 50usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^No services are defined$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-opencloud/openstack/src/Identity/v3/Models/Catalog.php" , line : 59usize , placeholders : & ["sprintf(\"Endpoint URL could not be found in the catalog for this service.\\nName: %s\\nType: %s\\nRegion: %s\\nURL type: %s\", $name, $type, $region, $urlType)"] , has_meaningful_message : false , exception : Some ("\\RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-opencloud/openstack/src/Identity/v3/Models/Token.php" , line : 109usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^When authenticating with a username, you must also provide either the domain name or domain ID to which the user belongs to\\. Alternatively, if you provide a user ID instead, you do not need to provide domain information\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-opencloud/openstack/src/Identity/v3/Models/Token.php" , line : 114usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Either a user or token must be provided\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-opencloud/openstack/src/Compute/v2/Models/Server.php" , line : 137usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^imageId or blockDeviceMapping\\.uuid must be set\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-opencloud/openstack/src/Compute/v2/Models/Server.php" , line : 203usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Reboot type must either be SOFT or HARD$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-opencloud/openstack/src/Compute/v2/Models/Server.php" , line : 426usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^networkId or portId must be set\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/php-opencloud/openstack/src/OpenStack.php" , line : 50usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^'authUrl' is a required option$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/christophwurst/id3parser/src/getID3/getid3_handler.php" , line : 85usize , placeholders : & ["$bytes" , "$this->ftell()"] , has_meaningful_message : true , exception : Some ("getid3_exception") , regex : "^cannot fread\\((.*) from (.*)\\) because beyond PHP filesystem limit$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/christophwurst/id3parser/src/getID3/getid3_handler.php" , line : 124usize , placeholders : & ["$pos"] , has_meaningful_message : true , exception : Some ("getid3_exception") , regex : "^cannot fseek\\((.*)\\) because beyond PHP filesystem limit$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/3rdparty/christophwurst/id3parser/src/getID3/getid3_handler.php" , line : 148usize , placeholders : & ["$text"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/christophwurst/id3parser/src/getID3/getid3_lib.php" , line : 254usize , placeholders : & ["(8 * PHP_INT_SIZE)" , "strlen($byteword)"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^ERROR: Cannot have signed integers larger than (.*)\\-bits \\((.*)\\) in self::BigEndian2Int\\(\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/christophwurst/id3parser/src/getID3/getid3_lib.php" , line : 278usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^ERROR: self::BigEndian2String\\(\\) does not support negative numbers$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/christophwurst/id3parser/src/getID3/getid3_lib.php" , line : 284usize , placeholders : & ["(8 * PHP_INT_SIZE)"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^ERROR: Cannot have signed integers larger than (.*)\\-bits in self::BigEndian2String\\(\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/christophwurst/id3parser/src/getID3/getid3_lib.php" , line : 834usize , placeholders : & ["$in_charset" , "$out_charset"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^PHP does not have iconv\\(\\) support \\- cannot convert from (.*) to (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/christophwurst/id3parser/src/getID3/getid3.php" , line : 82usize , placeholders : & ["$this->startup_error"] , has_meaningful_message : false , exception : Some ("getid3_exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/3rdparty/christophwurst/id3parser/src/getID3/getid3.php" , line : 85usize , placeholders : & ["$this->startup_warning"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/christophwurst/id3parser/src/getID3/getid3.php" , line : 94usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("getid3_exception") , regex : "^Remote files are not supported \\- please copy the file locally first$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/christophwurst/id3parser/src/getID3/getid3.php" , line : 118usize , placeholders : & ["$filename" , "implode('; ', $errormessagelist)"] , has_meaningful_message : true , exception : Some ("getid3_exception") , regex : "^Could not open \"(.*)\" \\((.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/christophwurst/id3parser/src/getID3/getid3.php" , line : 144usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/3rdparty/christophwurst/id3parser/src/getID3/getid3.php" , line : 180usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Caught exception: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Connections/PrimaryReadReplicaConnection.php" , line : 112usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^primary or replica configuration missing$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Connections/PrimaryReadReplicaConnection.php" , line : 116usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^You have to configure at least one replica\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Connections/PrimaryReadReplicaConnection.php" , line : 148usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Passing a connection name as first argument is not supported anymore\\. Use ensureConnectedToPrimary\\(\\)/ensureConnectedToReplica\\(\\) instead\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Connections/PrimaryReadReplicaConnection.php" , line : 163usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Invalid option to connect\\(\\), only primary or replica allowed\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/DriverManager.php" , line : 304usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Malformed parameter \"url\"\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Result.php" , line : 294usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^Only invocations with one argument are still supported by this legecy API\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Result.php" , line : 309usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^Only fetch modes declared on Doctrine\\\\DBAL\\\\FetchMode are supported by legacy API\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Result.php" , line : 322usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^Only invocations with one argument are still supported by this legecy API\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Result.php" , line : 337usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^Only fetch modes declared on Doctrine\\\\DBAL\\\\FetchMode are supported by legacy API\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Platforms/AbstractPlatform.php" , line : 398usize , placeholders : & ["$dbType" , "static::class"] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Unknown database type (.*) requested, (.*) may not support it\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Platforms/AbstractPlatform.php" , line : 1390usize , placeholders : & ["__METHOD__" , "Table::class"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^(.*)\\(\\) expects \\$table parameter to be string or (.*)\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Platforms/AbstractPlatform.php" , line : 1403usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("UnexpectedValueException") , regex : "^Default implementation of DROP TABLE was overridden with NULL$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Platforms/AbstractPlatform.php" , line : 1440usize , placeholders : & ["__METHOD__" , "Index::class"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^(.*)\\(\\) expects \\$index parameter to be string or (.*)\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Platforms/AbstractPlatform.php" , line : 1510usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Second argument of AbstractPlatform::getCreateTableSQL\\(\\) has to be integer\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Platforms/AbstractPlatform.php" , line : 1775usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Can only create primary or unique constraints, no common indexes with getCreateConstraintSQL\\(\\)\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Platforms/AbstractPlatform.php" , line : 1812usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Incomplete definition\\. 'columns' required\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Platforms/AbstractPlatform.php" , line : 2366usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Incomplete definition\\. 'columns' required\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Platforms/AbstractPlatform.php" , line : 2393usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Incomplete definition\\. 'columns' required\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Platforms/AbstractPlatform.php" , line : 2533usize , placeholders : & ["$upper"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Invalid foreign key action: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Platforms/AbstractPlatform.php" , line : 2555usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Incomplete definition\\. 'local' required\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Platforms/AbstractPlatform.php" , line : 2559usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Incomplete definition\\. 'foreign' required\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Platforms/AbstractPlatform.php" , line : 2563usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Incomplete definition\\. 'foreignTable' required\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Platforms/AbstractPlatform.php" , line : 2738usize , placeholders : & ["$level"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Invalid isolation level:(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Platforms/AbstractPlatform.php" , line : 3355usize , placeholders : & ["sprintf(\n                'Offset must be a positive integer or zero, %d given',\n                $offset\n            )"] , has_meaningful_message : false , exception : Some ("Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Platforms/AbstractPlatform.php" , line : 3362usize , placeholders : & ["sprintf(\n                'Platform %s does not support offset values in limit queries.',\n                $this->getName()\n            )"] , has_meaningful_message : false , exception : Some ("Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Platforms/SQLServer2012Platform.php" , line : 271usize , placeholders : & ["__METHOD__" , "Index::class"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^(.*)\\(\\) expects \\$index parameter to be string or (.*)\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Platforms/SQLServer2012Platform.php" , line : 450usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Incomplete column definition\\. 'default' required\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Platforms/SqlitePlatform.php" , line : 714usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Sqlite platform requires for alter table the table diff with reference to original table schema$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Platforms/SqlitePlatform.php" , line : 739usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Sqlite platform requires for alter table the table diff with reference to original table schema$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Platforms/SqlitePlatform.php" , line : 819usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Sqlite platform does not support alter primary key\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Platforms/SqlitePlatform.php" , line : 827usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Sqlite platform does not support alter foreign key\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Platforms/SqlitePlatform.php" , line : 835usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Sqlite platform does not support alter foreign key\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Platforms/SqlitePlatform.php" , line : 843usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Sqlite platform does not support alter constraint\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Platforms/SqlitePlatform.php" , line : 883usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Sqlite platform requires for alter table the table diff with reference to original table schema$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Platforms/MySQLPlatform.php" , line : 995usize , placeholders : & ["__METHOD__" , "Index::class"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^(.*)\\(\\) expects \\$index parameter to be string or (.*)\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Platforms/MySQLPlatform.php" , line : 1003usize , placeholders : & ["__METHOD__" , "Table::class"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^(.*)\\(\\) expects \\$table parameter to be string or (.*)\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Platforms/MySQLPlatform.php" , line : 1134usize , placeholders : & ["__METHOD__" , "Table::class"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^(.*)\\(\\) expects \\$table parameter to be string or (.*)\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Platforms/PostgreSQL94Platform.php" , line : 842usize , placeholders : & ["${value}"] , has_meaningful_message : true , exception : Some ("UnexpectedValueException") , regex : "^Unrecognized boolean literal '(.*)'$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Platforms/OraclePlatform.php" , line : 49usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Invalid Oracle identifier$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Platforms/OraclePlatform.php" , line : 782usize , placeholders : & ["$action"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Invalid foreign key action: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Tools/Console/ConnectionProvider/SingleConnectionProvider.php" , line : 33usize , placeholders : & ["sprintf('Connection with name \"%s\" does not exist.', $name)"] , has_meaningful_message : false , exception : Some ("ConnectionNotFound") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Tools/Console/Command/ReservedWordsCommand.php" , line : 159usize , placeholders : & ["$keywordList" , "implode(', ', array_keys($this->keywordLists))"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^There exists no keyword list with name '(.*)'\\. Known lists: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Tools/Console/Command/RunSqlCommand.php" , line : 73usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^Argument 'SQL' is required in order to execute this command correctly\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Tools/Console/Command/RunSqlCommand.php" , line : 81usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogicException") , regex : "^Option 'depth' must contains an integer value$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Id/TableGenerator.php" , line : 74usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Cannot use TableGenerator with SQLite\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Id/TableGenerator.php" , line : 137usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Race\\-condition detected while updating sequence\\. Aborting generation$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Id/TableGenerator.php" , line : 151usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Error occurred while generating ID with TableGenerator, aborted generation: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Schema/Table.php" , line : 803usize , placeholders : & ["$this->getName()"] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Table (.*) has no primary key\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/dbal/src/Schema/SqliteSchemaManager.php" , line : 463usize , placeholders : & ["sprintf('Sqlite schema manager requires to modify foreign keys table definition \"%s\".', $table)"] , has_meaningful_message : false , exception : Some ("Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Notice , path : "/3rdparty/doctrine/deprecations/lib/Doctrine/Deprecations/Deprecation.php" , line : 172usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/cache/lib/Doctrine/Common/Cache/Psr6/CacheAdapter.php" , line : 257usize , placeholders : & ["sprintf('Cache key must be string, \"%s\" given.', is_object($key) ? get_class($key) : gettype($key))"] , has_meaningful_message : false , exception : Some ("InvalidArgument") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/cache/lib/Doctrine/Common/Cache/Psr6/CacheAdapter.php" , line : 261usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgument") , regex : "^Cache key length must be greater than zero\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/cache/lib/Doctrine/Common/Cache/Psr6/CacheAdapter.php" , line : 265usize , placeholders : & ["sprintf('Cache key \"%s\" contains reserved characters \"%s\".', $key, self::RESERVED_CHARACTERS)"] , has_meaningful_message : false , exception : Some ("InvalidArgument") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/cache/lib/Doctrine/Common/Cache/Psr6/TypedCacheItem.php" , line : 62usize , placeholders : & ["sprintf(\n                'Expected $expiration to be an instance of DateTimeInterface or null, got %s',\n                get_debug_type($expiration)\n            )"] , has_meaningful_message : false , exception : Some ("TypeError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/cache/lib/Doctrine/Common/Cache/Psr6/TypedCacheItem.php" , line : 83usize , placeholders : & ["sprintf(\n                'Expected $time to be either an integer, an instance of DateInterval or null, got %s',\n                get_debug_type($time)\n            )"] , has_meaningful_message : false , exception : Some ("TypeError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/cache/lib/Doctrine/Common/Cache/Psr6/CacheItem.php" , line : 81usize , placeholders : & ["sprintf(\n                'Expected $expiration to be an instance of DateTimeInterface or null, got %s',\n                is_object($expiration) ? get_class($expiration) : gettype($expiration)\n            )"] , has_meaningful_message : false , exception : Some ("TypeError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/doctrine/cache/lib/Doctrine/Common/Cache/Psr6/CacheItem.php" , line : 102usize , placeholders : & ["sprintf(\n                'Expected $time to be either an integer, an instance of DateInterval or null, got %s',\n                is_object($time) ? get_class($time) : gettype($time)\n            )"] , has_meaningful_message : false , exception : Some ("TypeError") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/composer/package-versions-deprecated/src/PackageVersions/FallbackVersions.php" , line : 46usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("OutOfBoundsException") , regex : "^Required package \"(.*)\" is not installed: check your \\./vendor/composer/installed\\.json and/or \\./composer\\.lock files$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/composer/package-versions-deprecated/src/PackageVersions/FallbackVersions.php" , line : 102usize , placeholders : & ["sprintf(\n            'PackageVersions could not locate the `vendor/composer/installed.json` or your `composer.lock` '\n            . 'location. This is assumed to be in %s. If you customized your composer vendor directory and ran composer '\n            . 'installation with --no-scripts, or if you deployed without the required composer files, PackageVersions '\n            . 'can\\'t detect installed versions.',\n            json_encode($checkedPaths)\n        )"] , has_meaningful_message : false , exception : Some ("UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/composer/ClassLoader.php" , line : 252usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/composer/ClassLoader.php" , line : 307usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/composer/InstalledVersions.php" , line : 161usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/composer/InstalledVersions.php" , line : 182usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/composer/InstalledVersions.php" , line : 203usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/composer/InstalledVersions.php" , line : 224usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/3rdparty/composer/InstalledVersions.php" , line : 241usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/cron.php" , line : 46usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Update required, skipping cron$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/cron.php" , line : 50usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^We are in maintenance mode, skipping cron$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/cron.php" , line : 151usize , placeholders : & ["strval($job->getId())"] , has_meaningful_message : true , exception : None , regex : "^CLI cron call has selected job with ID (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/cron.php" , line : 176usize , placeholders : & ["strval($job->getId())"] , has_meaningful_message : true , exception : None , regex : "^WebCron call has selected job with ID (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/admin_audit/composer/composer/ClassLoader.php" , line : 252usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/admin_audit/composer/composer/ClassLoader.php" , line : 307usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/admin_audit/composer/composer/InstalledVersions.php" , line : 161usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/admin_audit/composer/composer/InstalledVersions.php" , line : 182usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/admin_audit/composer/composer/InstalledVersions.php" , line : 203usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/admin_audit/composer/composer/InstalledVersions.php" , line : 224usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/admin_audit/composer/composer/InstalledVersions.php" , line : 241usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Listener/CriticalActionPerformedEventListener.php" , line : 39usize , placeholders : & ["$event->getLogMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Emergency , path : "/apps/admin_audit/lib/AuditLogger.php" , line : 54usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Alert , path : "/apps/admin_audit/lib/AuditLogger.php" , line : 58usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Critical , path : "/apps/admin_audit/lib/AuditLogger.php" , line : 62usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/admin_audit/lib/AuditLogger.php" , line : 66usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/admin_audit/lib/AuditLogger.php" , line : 70usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Notice , path : "/apps/admin_audit/lib/AuditLogger.php" , line : 74usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/admin_audit/lib/AuditLogger.php" , line : 78usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/admin_audit/lib/AuditLogger.php" , line : 82usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/AuditLogger.php" , line : 86usize , placeholders : & ["$level"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Sharing.php" , line : 48usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^The %s \"%s\" with ID \"%s\" has been shared via link with permissions \"%s\" \\(Share ID: %s\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Sharing.php" , line : 60usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^The %s \"%s\" with ID \"%s\" has been shared to the user \"%s\" with permissions \"%s\"  \\(Share ID: %s\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Sharing.php" , line : 73usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^The %s \"%s\" with ID \"%s\" has been shared to the group \"%s\" with permissions \"%s\"  \\(Share ID: %s\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Sharing.php" , line : 86usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^The %s \"%s\" with ID \"%s\" has been shared to the room \"%s\" with permissions \"%s\" \\(Share ID: %s\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Sharing.php" , line : 99usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^The %s \"%s\" with ID \"%s\" has been shared to the email recipient \"%s\" with permissions \"%s\" \\(Share ID: %s\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Sharing.php" , line : 112usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^The %s \"%s\" with ID \"%s\" has been shared to the circle \"%s\" with permissions \"%s\" \\(Share ID: %s\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Sharing.php" , line : 125usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^The %s \"%s\" with ID \"%s\" has been shared to the remote user \"%s\" with permissions \"%s\" \\(Share ID: %s\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Sharing.php" , line : 138usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^The %s \"%s\" with ID \"%s\" has been shared to the remote group \"%s\" with permissions \"%s\" \\(Share ID: %s\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Sharing.php" , line : 151usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^The %s \"%s\" with ID \"%s\" has been shared to the deck card \"%s\" with permissions \"%s\" \\(Share ID: %s\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Sharing.php" , line : 173usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^The %s \"%s\" with ID \"%s\" has been unshared \\(Share ID: %s\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Sharing.php" , line : 184usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^The %s \"%s\" with ID \"%s\" has been unshared from the user \"%s\" \\(Share ID: %s\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Sharing.php" , line : 196usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^The %s \"%s\" with ID \"%s\" has been unshared from the group \"%s\" \\(Share ID: %s\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Sharing.php" , line : 208usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^The %s \"%s\" with ID \"%s\" has been unshared from the room \"%s\" \\(Share ID: %s\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Sharing.php" , line : 220usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^The %s \"%s\" with ID \"%s\" has been unshared from the email recipient \"%s\" \\(Share ID: %s\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Sharing.php" , line : 232usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^The %s \"%s\" with ID \"%s\" has been unshared from the circle \"%s\" \\(Share ID: %s\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Sharing.php" , line : 244usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^The %s \"%s\" with ID \"%s\" has been unshared from the remote user \"%s\" \\(Share ID: %s\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Sharing.php" , line : 256usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^The %s \"%s\" with ID \"%s\" has been unshared from the remote group \"%s\" \\(Share ID: %s\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Sharing.php" , line : 268usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^The %s \"%s\" with ID \"%s\" has been unshared from the deck card \"%s\" \\(Share ID: %s\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Sharing.php" , line : 288usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^The permissions of the shared %s \"%s\" with ID \"%s\" have been changed to \"%s\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Sharing.php" , line : 306usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^The password of the publicly shared %s \"%s\" with ID \"%s\" has been changed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Sharing.php" , line : 324usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^The expiration date of the publicly shared %s with ID \"%s\" has been removed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Sharing.php" , line : 333usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^The expiration date of the publicly shared %s with ID \"%s\" has been changed to \"%s\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Sharing.php" , line : 351usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^The shared %s with the token \"%s\" by \"%s\" has been accessed\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/AppManagement.php" , line : 35usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^App \"%s\" enabled$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/AppManagement.php" , line : 46usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^App \"%1\\$s\" enabled for groups: %2\\$s$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/AppManagement.php" , line : 56usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^App \"%s\" disabled$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Trashbin.php" , line : 32usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^File \"%s\" deleted from trash bin\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Trashbin.php" , line : 38usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^File \"%s\" restored from trash bin\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/GroupManagement.php" , line : 49usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^User \"%s\" added to group \"%s\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/GroupManagement.php" , line : 67usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^User \"%s\" removed from group \"%s\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/GroupManagement.php" , line : 84usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Group created: \"%s\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/GroupManagement.php" , line : 100usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Group deleted: \"%s\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Versions.php" , line : 32usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Version \"%s\" of \"%s\" was restored\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Versions.php" , line : 42usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Version \"%s\" was deleted\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Console.php" , line : 43usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Console command executed: %s$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/UserManagement.php" , line : 48usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^User created: \"%s\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/UserManagement.php" , line : 63usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^UserID assigned: \"%s\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/UserManagement.php" , line : 76usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^User deleted: \"%s\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/UserManagement.php" , line : 91usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^UserID unassigned: \"%s\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/UserManagement.php" , line : 106usize , placeholders : & ["$params['value'] === true\n\t\t\t\t\t\t? 'User enabled: \"%s\"'\n\t\t\t\t\t\t: 'User disabled: \"%s\"'"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/UserManagement.php" , line : 117usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Email address changed for user %s$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/UserManagement.php" , line : 135usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Password of user \"%s\" has been changed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Auth.php" , line : 37usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Login attempt: \"%s\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Auth.php" , line : 48usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Login successful: \"%s\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Auth.php" , line : 59usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Logout occurred$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Security.php" , line : 47usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Failed two factor attempt by user %s \\(%s\\) with provider %s$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Security.php" , line : 68usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Successful two factor attempt by user %s \\(%s\\) with provider %s$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Critical , path : "/apps/admin_audit/lib/Actions/Action.php" , line : 56usize , placeholders : & ["$element"] , has_meaningful_message : true , exception : None , regex : "^\\$params\\[\"(.*)\"\\] was missing\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Critical , path : "/apps/admin_audit/lib/Actions/Action.php" , line : 61usize , placeholders : & ["sprintf(\n\t\t\t\t\t\t\t'$params[\"'.$element.'\"] was missing. Transferred value: %s',\n\t\t\t\t\t\t\tprint_r($params, true)\n\t\t\t\t\t\t)"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/admin_audit/lib/Actions/Action.php" , line : 81usize , placeholders : & ["vsprintf(\n\t\t\t\t$text,\n\t\t\t\t$replaceArray\n\t\t\t)"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Files.php" , line : 42usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^File accessed: \"%s\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Files.php" , line : 57usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^File renamed: \"%s\" to \"%s\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Files.php" , line : 77usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^File created: \"%s\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Files.php" , line : 92usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^File copied: \"%s\" to \"%s\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Files.php" , line : 112usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^File written to: \"%s\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Files.php" , line : 127usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^File updated: \"%s\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Files.php" , line : 142usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^File deleted: \"%s\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/admin_audit/lib/Actions/Files.php" , line : 157usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Preview accessed: \"%s\" \\(width: \"%s\", height: \"%s\" crop: \"%s\", mode: \"%s\"\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/serverinfo/lib/OperatingSystems/DefaultOs.php" , line : 221usize , placeholders : & ["$filename"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Unable to read: \"(.*)\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/serverinfo/lib/OperatingSystems/DefaultOs.php" , line : 229usize , placeholders : & ["$command"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^No output for command: \"(.*)\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/serverinfo/lib/OperatingSystems/FreeBSD.php" , line : 243usize , placeholders : & ["$command"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^No output for command: \"(.*)\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/twofactor_backupcodes/lib/Listener/ActivityPublisher.php" , line : 63usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^could not publish backup code creation activity$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/twofactor_backupcodes/lib/Activity/Provider.php" , line : 61usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/twofactor_backupcodes/lib/Activity/Provider.php" , line : 77usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/twofactor_backupcodes/lib/Notifications/Notifier.php" , line : 71usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/twofactor_backupcodes/lib/Notifications/Notifier.php" , line : 93usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/twofactor_backupcodes/composer/composer/ClassLoader.php" , line : 252usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/twofactor_backupcodes/composer/composer/ClassLoader.php" , line : 307usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/twofactor_backupcodes/composer/composer/InstalledVersions.php" , line : 161usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/twofactor_backupcodes/composer/composer/InstalledVersions.php" , line : 182usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/twofactor_backupcodes/composer/composer/InstalledVersions.php" , line : 203usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/twofactor_backupcodes/composer/composer/InstalledVersions.php" , line : 224usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/twofactor_backupcodes/composer/composer/InstalledVersions.php" , line : 241usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/password_policy/lib/ComplianceService.php" , line : 103usize , placeholders : & ["$e->getHint()"] , has_meaningful_message : false , exception : Some ("LoginException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/password_policy/lib/Validator/NumericCharacterValidator.php" , line : 52usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("HintException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/password_policy/lib/Validator/HIBPValidator.php" , line : 86usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("HintException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/password_policy/lib/Validator/SpecialCharactersValidator.php" , line : 51usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("HintException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/password_policy/lib/Validator/CommonPasswordsValidator.php" , line : 54usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("HintException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/password_policy/lib/Validator/UpperCaseLoweCaseValidator.php" , line : 52usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("HintException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/password_policy/lib/Validator/LengthValidator.php" , line : 51usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("HintException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/password_policy/lib/Compliance/HistoryCompliance.php" , line : 87usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("HintException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/password_policy/lib/Compliance/HistoryCompliance.php" , line : 123usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Received password history of \\{uid\\} had the unexpected value of \\{history\\}, resetting\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/password_policy/lib/Compliance/Expiration.php" , line : 94usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("HintException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/password_policy/lib/Generator.php" , line : 111usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("HintException") , regex : "^Could not generate a valid password$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/password_policy/lib/PasswordValidator.php" , line : 87usize , placeholders : & ["implode(' ', $errors)"] , has_meaningful_message : false , exception : Some ("HintException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Controller/UserWorkflowsController.php" , line : 115usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSForbiddenException") , regex : "^User not logged in$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Controller/AWorkflowController.php" , line : 120usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSBadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Controller/AWorkflowController.php" , line : 122usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSForbiddenException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/workflowengine/lib/Controller/AWorkflowController.php" , line : 124usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Error when inserting flow$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Controller/AWorkflowController.php" , line : 125usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^An internal error occurred$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Controller/AWorkflowController.php" , line : 148usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSBadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Controller/AWorkflowController.php" , line : 150usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSForbiddenException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/workflowengine/lib/Controller/AWorkflowController.php" , line : 152usize , placeholders : & ["$id"] , has_meaningful_message : true , exception : None , regex : "^Error when updating flow with id (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Controller/AWorkflowController.php" , line : 153usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^An internal error occurred$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Controller/AWorkflowController.php" , line : 167usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSBadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Controller/AWorkflowController.php" , line : 169usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSForbiddenException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/workflowengine/lib/Controller/AWorkflowController.php" , line : 171usize , placeholders : & ["$id"] , has_meaningful_message : true , exception : None , regex : "^Error when deleting flow with id (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Controller/AWorkflowController.php" , line : 172usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^An internal error occurred$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Entity/File.php" , line : 158usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Entity/File.php" , line : 171usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Entity/File.php" , line : 180usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Helper/ScopeContext.php" , line : 48usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid scope$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Helper/ScopeContext.php" , line : 54usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^user scope requires a user id$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Manager.php" , line : 292usize , placeholders : & ["$this->l->t('Operation #%s does not exist', [$id])"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Manager.php" , line : 405usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\DomainException") , regex : "^Target operation not within scope$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Manager.php" , line : 445usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\DomainException") , regex : "^Target operation not within scope$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Manager.php" , line : 477usize , placeholders : & ["$this->l->t('Entity %s does not exist', [$entity])"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Manager.php" , line : 481usize , placeholders : & ["$this->l->t('Entity %s is invalid', [$entity])"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Manager.php" , line : 486usize , placeholders : & ["$this->l->t('No events are chosen.')"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Manager.php" , line : 499usize , placeholders : & ["$this->l->t('Entity %s has no event %s', [$entity, array_shift($diff)])"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Manager.php" , line : 518usize , placeholders : & ["$this->l->t('Operation %s does not exist', [$class])"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Manager.php" , line : 522usize , placeholders : & ["$this->l->t('Operation %s is invalid', [$class])"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Manager.php" , line : 526usize , placeholders : & ["$this->l->t('Operation %s is invalid', [$class])"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Manager.php" , line : 532usize , placeholders : & ["$this->l->t('At least one check needs to be provided')"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Manager.php" , line : 536usize , placeholders : & ["$this->l->t('The provided operation data is too long')"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Manager.php" , line : 543usize , placeholders : & ["$this->l->t('Invalid check provided')"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Manager.php" , line : 550usize , placeholders : & ["$this->l->t('Check %s does not exist', [$class])"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Manager.php" , line : 554usize , placeholders : & ["$this->l->t('Check %s is invalid', [$class])"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Manager.php" , line : 560usize , placeholders : & ["$this->l->t('Check %s is not allowed with this entity', [$class])"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Manager.php" , line : 564usize , placeholders : & ["$this->l->t('The provided check value is too long')"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Manager.php" , line : 606usize , placeholders : & ["$this->l->t('Check #%s does not exist', $missingCheck)"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/workflowengine/lib/AppInfo/Application.php" , line : 112usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Cannot handle event \\{name\\} of \\{event\\} against entity \\{entity\\} and operation \\{operation\\}$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/workflowengine/lib/Service/Logger.php" , line : 70usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/workflowengine/lib/Service/Logger.php" , line : 79usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/workflowengine/lib/Service/Logger.php" , line : 92usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/workflowengine/lib/Service/Logger.php" , line : 103usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/workflowengine/lib/Service/Logger.php" , line : 114usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/workflowengine/lib/Service/Logger.php" , line : 126usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/workflowengine/lib/Service/Logger.php" , line : 139usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/workflowengine/lib/Service/Logger.php" , line : 151usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/workflowengine/lib/Service/Logger.php" , line : 165usize , placeholders : & ["$context['level']"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Service/RuleMatcher.php" , line : 98usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^This method must not be called more than once$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Service/RuleMatcher.php" , line : 105usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^This method must not be called more than once$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Service/RuleMatcher.php" , line : 112usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^This method must not be called more than once$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Service/RuleMatcher.php" , line : 119usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Entity was not set yet$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Service/RuleMatcher.php" , line : 126usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^Operation is not set$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Service/RuleMatcher.php" , line : 233usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^Must set file info before running the check$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Service/RuleMatcher.php" , line : 243usize , placeholders : & ["$this->l->t('Check %s is invalid or does not exist', $check['class'])"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Check/TFileCheck.php" , line : 63usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^Expected Node subject for File entity, got \\{class\\}$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Check/FileSystemTags.php" , line : 97usize , placeholders : & ["$this->l->t('The given operator is invalid')"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Check/FileSystemTags.php" , line : 109usize , placeholders : & ["$this->l->t('The given tag id is invalid')"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Check/FileSystemTags.php" , line : 114usize , placeholders : & ["$this->l->t('The given tag id is invalid')"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Check/FileSystemTags.php" , line : 116usize , placeholders : & ["$this->l->t('The given tag id is invalid')"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Check/FileSystemTags.php" , line : 166usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^Should not happen: Storage is instance of GroupFolderStorage but no group folder storage found while unwrapping\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Check/RequestTime.php" , line : 102usize , placeholders : & ["$this->l->t('The given operator is invalid')"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Check/RequestTime.php" , line : 108usize , placeholders : & ["$this->l->t('The given time span is invalid')"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Check/RequestTime.php" , line : 114usize , placeholders : & ["$this->l->t('The given start time is invalid')"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Check/RequestTime.php" , line : 119usize , placeholders : & ["$this->l->t('The given end time is invalid')"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Check/RequestRemoteAddress.php" , line : 77usize , placeholders : & ["$this->l->t('The given operator is invalid')"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Check/RequestRemoteAddress.php" , line : 82usize , placeholders : & ["$this->l->t('The given IP range is invalid')"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Check/RequestRemoteAddress.php" , line : 87usize , placeholders : & ["$this->l->t('The given IP range is not valid for IPv4')"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Check/RequestRemoteAddress.php" , line : 90usize , placeholders : & ["$this->l->t('The given IP range is not valid for IPv4')"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Check/RequestRemoteAddress.php" , line : 94usize , placeholders : & ["$this->l->t('The given IP range is not valid for IPv6')"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Check/RequestRemoteAddress.php" , line : 97usize , placeholders : & ["$this->l->t('The given IP range is not valid for IPv6')"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Check/FileSize.php" , line : 84usize , placeholders : & ["$this->l->t('The given operator is invalid')"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Check/FileSize.php" , line : 88usize , placeholders : & ["$this->l->t('The given file size is invalid')"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Check/UserGroupMembership.php" , line : 86usize , placeholders : & ["$this->l->t('The given operator is invalid')"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Check/UserGroupMembership.php" , line : 90usize , placeholders : & ["$this->l->t('The given group does not exist')"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Check/AbstractStringCheck.php" , line : 89usize , placeholders : & ["$this->l->t('The given operator is invalid')"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/lib/Check/AbstractStringCheck.php" , line : 94usize , placeholders : & ["$this->l->t('The given regular expression is invalid')"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/composer/composer/InstalledVersions.php" , line : 161usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/composer/composer/InstalledVersions.php" , line : 182usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/composer/composer/InstalledVersions.php" , line : 203usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/composer/composer/InstalledVersions.php" , line : 224usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/composer/composer/InstalledVersions.php" , line : 241usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/composer/composer/ClassLoader.php" , line : 252usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/workflowengine/composer/composer/ClassLoader.php" , line : 307usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/text/lib/TextFile.php" , line : 67usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^File not compatible with text because it could not be encoded to UTF\\-8\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/text/lib/Db/SessionMapper.php" , line : 58usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DoesNotExistException") , regex : "^Session is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/text/lib/Db/Step.php" , line : 45usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Failed to parse step data$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/text/lib/Db/DocumentMapper.php" , line : 53usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DoesNotExistException") , regex : "^Document doesn't exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/text/lib/Service/DocumentService.php" , line : 129usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Unsaved steps but collission with file, continue collaborative editing$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/text/lib/Service/DocumentService.php" , line : 140usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^No app data folder present for text documents$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/text/lib/Service/DocumentService.php" , line : 169usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^No app data folder present for text documents$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/text/lib/Service/DocumentService.php" , line : 194usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("VersionMismatchException") , regex : "^Version does not match$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/text/lib/Service/DocumentService.php" , line : 200usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("VersionMismatchException") , regex : "^Version does not match$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/text/lib/Service/DocumentService.php" , line : 204usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Failed to encode steps$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/text/lib/Service/DocumentService.php" , line : 209usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Invalid step data$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/text/lib/Service/DocumentService.php" , line : 281usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/text/lib/Service/DocumentService.php" , line : 293usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DocumentSaveConflictException") , regex : "^File changed in the meantime from outside$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/text/lib/Service/DocumentService.php" , line : 355usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DocumentHasUnsavedChangesException") , regex : "^Did not reset document, as it has unsaved changes$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/text/lib/Service/DocumentService.php" , line : 374usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/text/lib/Service/DocumentService.php" , line : 384usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^No proper share data$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/text/lib/Service/DocumentService.php" , line : 398usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^Could not fallback to file from mounts$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/text/lib/Service/DocumentService.php" , line : 408usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/text/lib/Service/DocumentService.php" , line : 413usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/text/lib/Service/DocumentService.php" , line : 435usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/text/lib/Service/DocumentService.php" , line : 445usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^No proper share data$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/text/lib/Service/DocumentService.php" , line : 491usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/text/lib/Service/DocumentService.php" , line : 495usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/text/lib/Service/SessionService.php" , line : 221usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Logged in users cannot set a guest name$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/text/lib/Service/ApiService.php" , line : 115usize , placeholders : & ["ILogger::WARN"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/text/lib/Service/ImageService.php" , line : 152usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotPermittedException") , regex : "^No write permissions$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/text/lib/Service/ImageService.php" , line : 179usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotPermittedException") , regex : "^No write permissions$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/text/lib/Service/ImageService.php" , line : 208usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotPermittedException") , regex : "^No write permissions$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/text/lib/Service/ImageService.php" , line : 316usize , placeholders : & ["$textFile->getId()"] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^Attachment dir for document (.*) was not found or could not be created\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/text/lib/Service/ImageService.php" , line : 354usize , placeholders : & ["$documentId" , "$userId"] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^Text file with id=(.*) was not found in storage of (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/text/lib/Service/ImageService.php" , line : 389usize , placeholders : & ["$documentId" , "$shareToken"] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^Text file with id=(.*) and shareToken (.*) was not found\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/text/lib/Service/ImageService.php" , line : 424usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Impossible to download image$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/text/lib/Service/ImageService.php" , line : 427usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Connection error$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/text/lib/Service/ImageService.php" , line : 430usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Unknown download error$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/text/lib/Controller/ImageController.php" , line : 118usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^File insertion error$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/text/lib/Controller/ImageController.php" , line : 146usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Could not read file$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/text/lib/Controller/ImageController.php" , line : 163usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Upload error$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/text/lib/Controller/ImageController.php" , line : 192usize , placeholders : & ["$error"] , has_meaningful_message : false , exception : Some ("UploadException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/text/lib/Controller/ImageController.php" , line : 230usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^getImage error$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/text/lib/Controller/WorkspaceController.php" , line : 149usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Failed to get workspace file$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/text/lib/Controller/WorkspaceController.php" , line : 165usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ShareNotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/text/lib/Controller/WorkspaceController.php" , line : 170usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ShareNotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/text/lib/Controller/WorkspaceController.php" , line : 192usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Failed to get public workspace file$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/text/lib/Controller/WorkspaceController.php" , line : 217usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Exception when creating a new file through direct editing$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/text/lib/Cron/Cleanup.php" , line : 66usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Run cleanup job for text sessions$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/text/lib/Cron/Cleanup.php" , line : 78usize , placeholders : & ["$session->getDocumentId()"] , has_meaningful_message : true , exception : None , regex : "^Resetting document (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/text/lib/Cron/Cleanup.php" , line : 81usize , placeholders : & ["$session->getDocumentId()"] , has_meaningful_message : true , exception : None , regex : "^Resetting document (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/text/lib/Cron/Cleanup.php" , line : 83usize , placeholders : & ["$session->getDocumentId()"] , has_meaningful_message : true , exception : None , regex : "^Document (.*) has not been reset, as it has unsaved changes$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/text/lib/Cron/Cleanup.php" , line : 87usize , placeholders : & ["$removedSessions"] , has_meaningful_message : true , exception : None , regex : "^Removed (.*) inactive sessions$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/logreader/lib/Log/LogIteratorFactory.php" , line : 60usize , placeholders : & ["$log->getLogFilePath()"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Error while opening (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/logreader/lib/Log/LogIteratorFactory.php" , line : 63usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Can't find log class$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/encryption/composer/composer/InstalledVersions.php" , line : 161usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/encryption/composer/composer/InstalledVersions.php" , line : 182usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/encryption/composer/composer/InstalledVersions.php" , line : 203usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/encryption/composer/composer/InstalledVersions.php" , line : 224usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/encryption/composer/composer/InstalledVersions.php" , line : 241usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/encryption/composer/composer/ClassLoader.php" , line : 252usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/encryption/composer/composer/ClassLoader.php" , line : 307usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/encryption/lib/Util.php" , line : 182usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Unknown user: method expects path to a user folder relative to the data folder$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/encryption/lib/KeyManager.php" , line : 227usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^A private master key is available but the public key could not be found\\. This should never happen\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/encryption/lib/KeyManager.php" , line : 230usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^A public master key is available but the private key could not be found\\. This should never happen\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/encryption/lib/KeyManager.php" , line : 438usize , placeholders : & ["$userId"] , has_meaningful_message : false , exception : Some ("PrivateKeyMissingException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/encryption/lib/KeyManager.php" , line : 601usize , placeholders : & ["$userId"] , has_meaningful_message : false , exception : Some ("PublicKeyMissingException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/encryption/lib/KeyManager.php" , line : 711usize , placeholders : & ["$this->getPublicShareKeyId()"] , has_meaningful_message : false , exception : Some ("PublicKeyMissingException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/encryption/lib/KeyManager.php" , line : 733usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Can not get secret from Nextcloud instance$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/encryption/lib/Command/FixEncryptedVersion.php" , line : 234usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Issue: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/encryption/lib/Command/FixKeyLocation.php" , line : 174usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Read failed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/encryption/lib/Session.php" , line : 90usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exceptions\\PrivateKeyMissingException") , regex : "^please try to log\\-out and log\\-in again$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/encryption/lib/Session.php" , line : 151usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^No uid found while in decrypt all mode$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/encryption/lib/Session.php" , line : 153usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Please activate decrypt all mode first$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/encryption/lib/Session.php" , line : 168usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("PrivateKeyMissingException") , regex : "^No private key found while in decrypt all mode$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/encryption/lib/Session.php" , line : 170usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("PrivateKeyMissingException") , regex : "^Please activate decrypt all mode first$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/encryption/lib/Crypto/Crypt.php" , line : 122usize , placeholders : & ["$this->user"] , has_meaningful_message : true , exception : None , regex : "^Encryption Library couldn't generate users key\\-pair for (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/encryption/lib/Crypto/Crypt.php" , line : 126usize , placeholders : & ["openssl_error_string()"] , has_meaningful_message : true , exception : None , regex : "^Encryption library openssl_pkey_new\\(\\) fails: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/encryption/lib/Crypto/Crypt.php" , line : 141usize , placeholders : & ["$this->user"] , has_meaningful_message : true , exception : None , regex : "^Encryption library couldn't export users private key, please check your servers OpenSSL configuration\\.(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/encryption/lib/Crypto/Crypt.php" , line : 144usize , placeholders : & ["openssl_error_string()"] , has_meaningful_message : true , exception : None , regex : "^Encryption Library:(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/encryption/lib/Crypto/Crypt.php" , line : 185usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Encryption Library, symmetrical encryption failed no content given$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/encryption/lib/Crypto/Crypt.php" , line : 215usize , placeholders : & ["$keyFormat"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^key format \"(.*)\" is not supported$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/encryption/lib/Crypto/Crypt.php" , line : 245usize , placeholders : & ["$error" , "openssl_error_string()"] , has_meaningful_message : false , exception : None , regex : "^(.*)(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/encryption/lib/Crypto/Crypt.php" , line : 247usize , placeholders : & ["$error"] , has_meaningful_message : false , exception : Some ("EncryptionFailedException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/encryption/lib/Crypto/Crypt.php" , line : 267usize , placeholders : & ["sprintf(\n\t\t\t\t\t'Unsupported cipher (%s) defined in config.php supported. Falling back to %s',\n\t\t\t\t\t$cipher,\n\t\t\t\t\tself::DEFAULT_CIPHER\n\t\t\t\t)"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/encryption/lib/Crypto/Crypt.php" , line : 304usize , placeholders : & ["sprintf(\n\t\t\t\t\t'Unsupported cipher (%s) defined.',\n\t\t\t\t\t$cipher\n\t\t\t)"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/encryption/lib/Crypto/Crypt.php" , line : 319usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ServerNotAvailableException") , regex : "^Legacy cipher is no longer supported!$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/encryption/lib/Crypto/Crypt.php" , line : 514usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("GenericEncryptionException") , regex : "^Bad Signature$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/encryption/lib/Crypto/Crypt.php" , line : 516usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Signature check skipped$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/encryption/lib/Crypto/Crypt.php" , line : 596usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("GenericEncryptionException") , regex : "^Missing Signature$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/encryption/lib/Crypto/Crypt.php" , line : 601usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("GenericEncryptionException") , regex : "^Missing Signature$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/encryption/lib/Crypto/Crypt.php" , line : 626usize , placeholders : & ["openssl_error_string()"] , has_meaningful_message : true , exception : Some ("DecryptionFailedException") , regex : "^Encryption library: Decryption \\(symmetric\\) of content failed: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/encryption/lib/Crypto/Crypt.php" , line : 686usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("MultiKeyDecryptException") , regex : "^Cannot multikey decrypt empty plain content$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/encryption/lib/Crypto/Crypt.php" , line : 692usize , placeholders : & ["openssl_error_string()"] , has_meaningful_message : true , exception : Some ("MultiKeyDecryptException") , regex : "^multikeydecrypt with share key failed:(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/encryption/lib/Crypto/Crypt.php" , line : 706usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("MultiKeyEncryptException") , regex : "^Cannot multikeyencrypt empty plain content$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/encryption/lib/Crypto/Crypt.php" , line : 728usize , placeholders : & ["openssl_error_string()"] , has_meaningful_message : true , exception : Some ("MultiKeyEncryptException") , regex : "^multikeyencryption failed (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/encryption/lib/Crypto/Encryption.php" , line : 278usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^no public key found for user \"\\{uid\\}\", user will not be able to read the file$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/encryption/lib/Crypto/Encryption.php" , line : 372usize , placeholders : & ["$msg"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/encryption/lib/Crypto/Encryption.php" , line : 374usize , placeholders : & ["$msg"] , has_meaningful_message : false , exception : Some ("DecryptionFailedException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/encryption/lib/Crypto/Encryption.php" , line : 408usize , placeholders : & ["$user" , "$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Could not encrypt file for (.*): (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/encryption/lib/Crypto/Encryption.php" , line : 421usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^no file key found, we assume that the file \"\\{file\\}\" is not encrypted$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/encryption/lib/Crypto/Encryption.php" , line : 497usize , placeholders : & ["$msg"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/encryption/lib/Crypto/Encryption.php" , line : 498usize , placeholders : & ["$msg"] , has_meaningful_message : false , exception : Some ("DecryptionFailedException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/encryption/lib/Hooks/UserHooks.php" , line : 269usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Encryption could not update users encryption password$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/encryption/lib/Hooks/UserHooks.php" , line : 289usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("GenericEncryptionException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/encryption/lib/Hooks/UserHooks.php" , line : 322usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Encryption Could not update users encryption password$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/firstrunwizard/lib/Notification/Notifier.php" , line : 92usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/firstrunwizard/lib/Notification/Notifier.php" , line : 101usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/firstrunwizard/lib/Notification/Notifier.php" , line : 121usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/support/lib/Repair/SwitchUpdaterServer.php" , line : 53usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Repair step already executed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/support/lib/Sections/ServerSection.php" , line : 162usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Unable to determine database version$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/support/lib/Notification/Notifier.php" , line : 74usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Unknown app id$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/support/lib/Notification/Notifier.php" , line : 100usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/support/lib/Service/SubscriptionService.php" , line : 138usize , placeholders : & ["get_class($backend)"] , has_meaningful_message : true , exception : None , regex : "^Can not determine user count for (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/support/lib/Service/SubscriptionService.php" , line : 151usize , placeholders : & ["$userCount" , "$disabledUsersCount"] , has_meaningful_message : true , exception : None , regex : "^Total user count was negative \\(users: (.*), disabled: (.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/support/lib/Service/SubscriptionService.php" , line : 210usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Subscription info successfully fetched$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/support/lib/Service/SubscriptionService.php" , line : 245usize , placeholders : & ["$backendURL" , "$response->getStatusCode()" , "$response->getBody()"] , has_meaningful_message : true , exception : None , regex : "^Renewal of subscription info returned invalid data\\. URL: (.*) Status: (.*) Body: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/support/lib/Service/SubscriptionService.php" , line : 254usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Subscription key invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/accessibility/lib/Controller/AccessibilityController.php" , line : 125usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/accessibility/lib/Controller/AccessibilityController.php" , line : 232usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/accessibility/lib/Controller/ConfigController.php" , line : 93usize , placeholders : & ["$value"] , has_meaningful_message : true , exception : Some ("OCSBadRequestException") , regex : "^Invalid value: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/accessibility/lib/Controller/ConfigController.php" , line : 109usize , placeholders : & ["$value"] , has_meaningful_message : true , exception : Some ("OCSBadRequestException") , regex : "^Invalid value: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/accessibility/lib/Controller/ConfigController.php" , line : 112usize , placeholders : & ["$key"] , has_meaningful_message : true , exception : Some ("OCSBadRequestException") , regex : "^Invalid key: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/accessibility/lib/Controller/ConfigController.php" , line : 137usize , placeholders : & ["$key"] , has_meaningful_message : true , exception : Some ("OCSBadRequestException") , regex : "^Invalid key: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/accessibility/composer/composer/InstalledVersions.php" , line : 161usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/accessibility/composer/composer/InstalledVersions.php" , line : 182usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/accessibility/composer/composer/InstalledVersions.php" , line : 203usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/accessibility/composer/composer/InstalledVersions.php" , line : 224usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/accessibility/composer/composer/InstalledVersions.php" , line : 241usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/accessibility/composer/composer/ClassLoader.php" , line : 252usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/accessibility/composer/composer/ClassLoader.php" , line : 307usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/nextcloud_announcements/lib/Cron/Crawler.php" , line : 83usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Invalid XML feed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/nextcloud_announcements/lib/Cron/Crawler.php" , line : 141usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Invalid signature fetched from the server$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/nextcloud_announcements/lib/Cron/Crawler.php" , line : 153usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Could not validate CRL signature$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/nextcloud_announcements/lib/Cron/Crawler.php" , line : 158usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Certificate has been revoked$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/nextcloud_announcements/lib/Cron/Crawler.php" , line : 163usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^App with id nextcloud_announcements has a certificate not issued by a trusted Code Signing Authority$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/nextcloud_announcements/lib/Cron/Crawler.php" , line : 169usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^App with id nextcloud_announcements has a cert with no CN$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/nextcloud_announcements/lib/Cron/Crawler.php" , line : 172usize , placeholders : & ["sprintf('App with id nextcloud_announcements has a cert issued to %s', $certInfo['subject']['CN'])"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/nextcloud_announcements/lib/Cron/Crawler.php" , line : 188usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Feed has an invalid signature$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/nextcloud_announcements/lib/Cron/Crawler.php" , line : 203usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Could not load file$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/nextcloud_announcements/lib/Notification/Notifier.php" , line : 89usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/nextcloud_announcements/lib/Notification/Notifier.php" , line : 128usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/files_trashbin/lib/Trashbin.php" , line : 224usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^trash bin database couldn't be updated for the files owner$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/files_trashbin/lib/Trashbin.php" , line : 323usize , placeholders : & ["$file_path"] , has_meaningful_message : true , exception : None , regex : "^Couldn't move (.*) to the trash bin$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/files_trashbin/lib/Trashbin.php" , line : 351usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^trash bin database couldn't be updated$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/files_trashbin/lib/Trashbin.php" , line : 467usize , placeholders : & ["$user" , "$filename" , "$timestamp"] , has_meaningful_message : true , exception : None , regex : "^trash bin database inconsistent! \\(\\$user: (.*) \\$filename: (.*), \\$timestamp: (.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/lib/Trashbin.php" , line : 491usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotPermittedException") , regex : "^Can't restore trash item because the target folder is not writable$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/files_trashbin/lib/Trashbin.php" , line : 867usize , placeholders : & ["$file['name']" , "$tmp"] , has_meaningful_message : true , exception : None , regex : "^remove \"(.*)\" \\((.*)B\\) to meet the limit of trash bin size \\(50% of available quota\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/files_trashbin/lib/Trashbin.php" , line : 898usize , placeholders : & ["$filename"] , has_meaningful_message : true , exception : None , regex : "^Removing \"(.*)\" from trashbin failed\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/files_trashbin/lib/Trashbin.php" , line : 905usize , placeholders : & ["$filename"] , has_meaningful_message : true , exception : None , regex : "^Remove \"(.*)\" from trashbin because it exceeds max retention obligation term\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/lib/Trashbin.php" , line : 939usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\OCA\\Files_Trashbin\\Exceptions\\CopyRecursiveException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/lib/Trashbin.php" , line : 948usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\OCA\\Files_Trashbin\\Exceptions\\CopyRecursiveException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/lib/Helper.php" , line : 55usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Directory does not exists$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/lib/Sabre/AbstractTrashFile.php" , line : 34usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/lib/Sabre/AbstractTrashFile.php" , line : 38usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/lib/Sabre/RootCollection.php" , line : 64usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\Sabre\\DAV\\Exception\\Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/lib/Sabre/RestoreFolder.php" , line : 35usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/lib/Sabre/RestoreFolder.php" , line : 39usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/lib/Sabre/RestoreFolder.php" , line : 47usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/lib/Sabre/RestoreFolder.php" , line : 55usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/lib/Sabre/AbstractTrashFolder.php" , line : 57usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/lib/Sabre/AbstractTrashFolder.php" , line : 70usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/lib/Sabre/AbstractTrashFolder.php" , line : 74usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/lib/Sabre/AbstractTrashFolder.php" , line : 78usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/lib/Sabre/TrashHome.php" , line : 56usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/lib/Sabre/TrashHome.php" , line : 65usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Permission denied to rename this trashbin$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/lib/Sabre/TrashHome.php" , line : 69usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Not allowed to create files in the trashbin$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/lib/Sabre/TrashHome.php" , line : 73usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Not allowed to create folders in the trashbin$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/lib/Sabre/TrashHome.php" , line : 84usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/lib/Sabre/TrashRoot.php" , line : 63usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Permission denied to rename this trashbin$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/lib/Sabre/TrashRoot.php" , line : 67usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Not allowed to create files in the trashbin$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/lib/Sabre/TrashRoot.php" , line : 71usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Not allowed to create folders in the trashbin$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/lib/Sabre/TrashRoot.php" , line : 96usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/lib/Trash/TrashManager.php" , line : 89usize , placeholders : & ["$fullType"] , has_meaningful_message : true , exception : Some ("BackendNotFoundException") , regex : "^Trash backend for (.*) not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/files_trashbin/lib/Storage.php" , line : 105usize , placeholders : & ["$path"] , has_meaningful_message : true , exception : None , regex : "^Can't move file (.*) to the trash bin, therefore it was deleted right away$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/lib/Command/RestoreAllFiles.php" , line : 85usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidOptionException") , regex : "^Either specify a user_id or \\-\\-all\\-users$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/lib/Command/RestoreAllFiles.php" , line : 116usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidOptionException") , regex : "^Either specify a user_id or \\-\\-all\\-users$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/lib/Command/CleanUp.php" , line : 82usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidOptionException") , regex : "^Either specify a user_id or \\-\\-all\\-users$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/lib/Command/CleanUp.php" , line : 113usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidOptionException") , regex : "^Either specify a user_id or \\-\\-all\\-users$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/lib/UserMigration/TrashbinMigrator.php" , line : 95usize , placeholders : & ["$uid"] , has_meaningful_message : true , exception : Some ("UserMigrationException") , regex : "^/(.*)/files_trashbin is not a folder$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/lib/UserMigration/TrashbinMigrator.php" , line : 104usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : Some ("UserMigrationException") , regex : "^Could not export trashbin: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/lib/UserMigration/TrashbinMigrator.php" , line : 125usize , placeholders : & ["$uid"] , has_meaningful_message : true , exception : Some ("UserMigrationException") , regex : "^Could not import trashbin, /(.*)/files_trashbin is not a folder$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/lib/UserMigration/TrashbinMigrator.php" , line : 134usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("UserMigrationException") , regex : "^Could not import trashbin\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/composer/composer/InstalledVersions.php" , line : 161usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/composer/composer/InstalledVersions.php" , line : 182usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/composer/composer/InstalledVersions.php" , line : 203usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/composer/composer/InstalledVersions.php" , line : 224usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/composer/composer/InstalledVersions.php" , line : 241usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/composer/composer/ClassLoader.php" , line : 252usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_trashbin/composer/composer/ClassLoader.php" , line : 307usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/settings/lib/Activity/GroupProvider.php" , line : 72usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/settings/lib/Activity/GroupProvider.php" , line : 119usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/settings/lib/Activity/SecurityProvider.php" , line : 56usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/settings/lib/Activity/SecurityProvider.php" , line : 107usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/settings/lib/Activity/Provider.php" , line : 92usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Unknown app$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/settings/lib/Activity/Provider.php" , line : 132usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Unknown subject$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/settings/lib/Activity/Provider.php" , line : 188usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Unknown subject$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/settings/lib/UserMigration/AccountMigrator.php" , line : 101usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("AccountMigratorException") , regex : "^Could not export account information$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/settings/lib/UserMigration/AccountMigrator.php" , line : 114usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("AccountMigratorException") , regex : "^Could not export avatar$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/settings/lib/UserMigration/AccountMigrator.php" , line : 138usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("AccountMigratorException") , regex : "^Failed to import account information$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/settings/lib/UserMigration/AccountMigrator.php" , line : 163usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("AccountMigratorException") , regex : "^Avatar image must be square$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/settings/lib/UserMigration/AccountMigrator.php" , line : 165usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("AccountMigratorException") , regex : "^Failed to import avatar$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/settings/lib/Listener/AppPasswordCreatedActivityListener.php" , line : 74usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Could not publish activity: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/settings/lib/Middleware/SubadminMiddleware.php" , line : 70usize , placeholders : & ["$this->l10n->t('Logged in user must be a subadmin')"] , has_meaningful_message : false , exception : Some ("NotAdminException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/settings/lib/Service/AuthorizedGroupService.php" , line : 67usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^AuthorizedGroup not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/settings/lib/BackgroundJobs/VerifyUserData.php" , line : 121usize , placeholders : & ["$argument['type']"] , has_meaningful_message : true , exception : None , regex : "^(.*) is no valid type for user account data\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/settings/lib/BackgroundJobs/VerifyUserData.php" , line : 156usize , placeholders : & ["$argument['uid']"] , has_meaningful_message : true , exception : None , regex : "^(.*) doesn't exist, can't verify user data\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/settings/lib/BackgroundJobs/VerifyUserData.php" , line : 182usize , placeholders : & ["$argument['uid']"] , has_meaningful_message : true , exception : None , regex : "^(.*) doesn't exist, can't verify user data\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/settings/lib/Controller/UsersController.php" , line : 482usize , placeholders : & ["$this->l10n->t('Unable to change full name')"] , has_meaningful_message : false , exception : Some ("ForbiddenException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/settings/lib/Controller/UsersController.php" , line : 492usize , placeholders : & ["$this->l10n->t('Unable to change email address')"] , has_meaningful_message : false , exception : Some ("ForbiddenException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/settings/lib/Controller/UsersController.php" , line : 501usize , placeholders : & ["$this->l10n->t('Unable to set invalid phone number')"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/settings/lib/Controller/UsersController.php" , line : 504usize , placeholders : & ["$this->l10n->t('Unable to set invalid website')"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/settings/lib/Controller/UsersController.php" , line : 506usize , placeholders : & ["$this->l10n->t('Some account data was invalid')"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/settings/lib/Controller/WebAuthnController.php" , line : 74usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Starting WebAuthn registration$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/settings/lib/Controller/WebAuthnController.php" , line : 91usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Finishing WebAuthn registration$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/settings/lib/Controller/WebAuthnController.php" , line : 94usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Trying to finish WebAuthn registration without session data$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/settings/lib/Controller/WebAuthnController.php" , line : 112usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Finishing WebAuthn registration$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/settings/lib/Controller/MailSettingsController.php" , line : 173usize , placeholders : & ["$this->l10n->t('Email could not be sent. Check your mail server log')"] , has_meaningful_message : false , exception : Some ("\\RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/settings/lib/Controller/AdminSettingsController.php" , line : 81usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotAdminException") , regex : "^Logged in user doesn't have permission to access these settings\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/settings/lib/Controller/AppSettingsController.php" , line : 279usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^The value given for app_install_overwrite is not an array\\. Ignoring\\.\\.\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/settings/lib/Controller/AppSettingsController.php" , line : 464usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^could not enable apps$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/settings/lib/Controller/AppSettingsController.php" , line : 505usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^could not disable app$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/settings/lib/Controller/LogSettingsController.php" , line : 53usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^Log file not available$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/settings/lib/Controller/AuthSettingsController.php" , line : 278usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^could not publish activity$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/settings/lib/Controller/AuthSettingsController.php" , line : 296usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidTokenException") , regex : "^This token does not belong to you!$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/settings/lib/Controller/CheckSetupController.php" , line : 218usize , placeholders : & ["$site"] , has_meaningful_message : true , exception : None , regex : "^Cannot connect to: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/settings/lib/Controller/CheckSetupController.php" , line : 316usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^error checking curl$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/settings/lib/Controller/CheckSetupController.php" , line : 816usize , placeholders : & ["$tempPath"] , has_meaningful_message : true , exception : None , regex : "^Error while checking the temporary PHP path \\- it was not properly set to a directory\\. Returned value: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/settings/lib/Controller/CheckSetupController.php" , line : 821usize , placeholders : & ["$tempPath"] , has_meaningful_message : true , exception : None , regex : "^Error while checking the available disk space of temporary PHP path or no free disk space returned\\. Temporary path: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/settings/lib/Controller/CheckSetupController.php" , line : 830usize , placeholders : & ["round($freeSpaceInTempInGB, 1)" , "$tempPath"] , has_meaningful_message : true , exception : None , regex : "^Checking the available space in the temporary path resulted in (.*) GB instead of the recommended 50GB\\. Path: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/settings/composer/composer/InstalledVersions.php" , line : 161usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/settings/composer/composer/InstalledVersions.php" , line : 182usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/settings/composer/composer/InstalledVersions.php" , line : 203usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/settings/composer/composer/InstalledVersions.php" , line : 224usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/settings/composer/composer/InstalledVersions.php" , line : 241usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/settings/composer/composer/ClassLoader.php" , line : 252usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/settings/composer/composer/ClassLoader.php" , line : 307usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/composer/composer/InstalledVersions.php" , line : 161usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/composer/composer/InstalledVersions.php" , line : 182usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/composer/composer/InstalledVersions.php" , line : 203usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/composer/composer/InstalledVersions.php" , line : 224usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/composer/composer/InstalledVersions.php" , line : 241usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/composer/composer/ClassLoader.php" , line : 252usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/composer/composer/ClassLoader.php" , line : 307usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/user_ldap/lib/Command/UpdateUUID.php" , line : 340usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^UUID of \\{id\\} was updated from \\{from\\} to \\{to\\}$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Command/ResetUser.php" , line : 79usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^User not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Command/ResetUser.php" , line : 83usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^The given user is not a recognized LDAP user\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Command/ResetUser.php" , line : 92usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Reset cancelled by operator$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Command/ResetGroup.php" , line : 76usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Group not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Command/ResetGroup.php" , line : 80usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^The given group is not a recognized LDAP group\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Command/ResetGroup.php" , line : 89usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Reset cancelled by operator$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Command/Search.php" , line : 96usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^limit must be  0 or greater$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Command/Search.php" , line : 99usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^offset must be 0 or greater$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Command/Search.php" , line : 102usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^offset must be 0 if limit is also set to 0$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Command/Search.php" , line : 105usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^offset must be a multiple of limit$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Command/CheckUser.php" , line : 109usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^The given user is not a recognized LDAP user\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Command/CheckUser.php" , line : 132usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Cannot check user existence, because disabled LDAP configurations are present\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Mapping/AbstractMapping.php" , line : 93usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Invalid Column Name$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Mapping/AbstractMapping.php" , line : 198usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^hash function did not return a string$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/user_ldap/lib/Mapping/AbstractMapping.php" , line : 359usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Cannot map, because the DN exceeds 4000 characters: \\{dn\\}$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/UserPluginManager.php" , line : 65usize , placeholders : & ["$action" , "get_class($plugin)"] , has_meaningful_message : true , exception : None , regex : "^Registered action (.*) to plugin (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/UserPluginManager.php" , line : 70usize , placeholders : & ["get_class($plugin)"] , has_meaningful_message : true , exception : None , regex : "^Registered action deleteUser to plugin (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/UserPluginManager.php" , line : 97usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^No plugin implements createUser in this LDAP Backend\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/UserPluginManager.php" , line : 113usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^No plugin implements setPassword in this LDAP Backend\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/UserPluginManager.php" , line : 128usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^No plugin implements canChangeAvatar in this LDAP Backend\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/UserPluginManager.php" , line : 143usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^No plugin implements getHome in this LDAP Backend\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/UserPluginManager.php" , line : 158usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^No plugin implements getDisplayName in this LDAP Backend\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/UserPluginManager.php" , line : 174usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^No plugin implements setDisplayName in this LDAP Backend\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/UserPluginManager.php" , line : 188usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^No plugin implements countUsers in this LDAP Backend\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/UserPluginManager.php" , line : 211usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^No plugin implements deleteUser in this LDAP Backend\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/LDAP.php" , line : 368usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ServerNotAvailableException") , regex : "^Lost connection to LDAP server\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/LDAP.php" , line : 370usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ServerNotAvailableException") , regex : "^LDAP server is shutting down\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/LDAP.php" , line : 372usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^LDAP authentication method rejected$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/LDAP.php" , line : 374usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^LDAP Operations error$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/LDAP.php" , line : 377usize , placeholders : & ["!empty($extended_error)?$extended_error:$errorMsg"] , has_meaningful_message : false , exception : Some ("ConstraintViolationException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/LDAP.php" , line : 379usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^LDAP error \\{message\\} \\(\\{code\\}\\) after calling \\{func\\}$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/GroupPluginManager.php" , line : 61usize , placeholders : & ["$action" , "get_class($plugin)"] , has_meaningful_message : true , exception : None , regex : "^Registered action (.*) to plugin (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/GroupPluginManager.php" , line : 87usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^No plugin implements createGroup in this LDAP Backend\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/GroupPluginManager.php" , line : 117usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^No plugin implements deleteGroup in this LDAP Backend\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/GroupPluginManager.php" , line : 135usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^No plugin implements addToGroup in this LDAP Backend\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/GroupPluginManager.php" , line : 153usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^No plugin implements removeFromGroup in this LDAP Backend\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/GroupPluginManager.php" , line : 169usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^No plugin implements countUsersInGroup in this LDAP Backend\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/GroupPluginManager.php" , line : 184usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^No plugin implements getGroupDetails in this LDAP Backend\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Controller/ConfigAPIController.php" , line : 125usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^An issue occurred when creating the new config\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Controller/ConfigAPIController.php" , line : 157usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^Could not delete configuration$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Controller/ConfigAPIController.php" , line : 163usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^An issue occurred when deleting the config\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Controller/ConfigAPIController.php" , line : 198usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSBadRequestException") , regex : "^configData is not properly set$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Controller/ConfigAPIController.php" , line : 216usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^An issue occurred when modifying the config\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Controller/ConfigAPIController.php" , line : 312usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^An issue occurred when modifying the config\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Controller/ConfigAPIController.php" , line : 328usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSNotFoundException") , regex : "^Config ID not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Configuration.php" , line : 543usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Invalid rule$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/user_ldap/lib/Configuration.php" , line : 561usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Invalid config value to ldapUserAvatarRule; falling back to default\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/User/Manager.php" , line : 157usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^LDAP Access instance must be set first$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/user_ldap/lib/User/User.php" , line : 121usize , placeholders : & ["$dn"] , has_meaningful_message : true , exception : None , regex : "^uid for '(.*)' must not be null!$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/User/User.php" , line : 122usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^uid must not be null!$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/user_ldap/lib/User/User.php" , line : 124usize , placeholders : & ["$dn"] , has_meaningful_message : true , exception : None , regex : "^uid for '(.*)' must not be an empty string$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/User/User.php" , line : 125usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^uid must not be an empty string!$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/User/User.php" , line : 309usize , placeholders : & ["$this->getUsername()"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Home dir attribute can't be read from LDAP for uid: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/User/User.php" , line : 487usize , placeholders : & ["$this->uid" , "$aQuota[0]"] , has_meaningful_message : true , exception : None , regex : "^no suitable LDAP quota found for user (.*): \\[(.*)\\]$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/User/User.php" , line : 492usize , placeholders : & ["$this->uid" , "$valueFromLDAP"] , has_meaningful_message : true , exception : None , regex : "^no suitable LDAP quota found for user (.*): \\[(.*)\\]$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/User/User.php" , line : 499usize , placeholders : & ["$this->uid" , "$defaultQuota"] , has_meaningful_message : true , exception : None , regex : "^no suitable default quota found for user (.*): \\[(.*)\\]$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/user_ldap/lib/User/User.php" , line : 507usize , placeholders : & ["$this->uid"] , has_meaningful_message : true , exception : None , regex : "^trying to set a quota for user (.*) but the user is missing$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/user_ldap/lib/User/User.php" , line : 567usize , placeholders : & ["$this->dn"] , has_meaningful_message : true , exception : None , regex : "^avatar image data from LDAP invalid for (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/user_ldap/lib/User/User.php" , line : 575usize , placeholders : & ["$this->dn"] , has_meaningful_message : true , exception : None , regex : "^croping image for avatar failed for (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/User/User.php" , line : 613usize , placeholders : & ["sprintf(\n\t\t\t'external home storage attribute yield no value for %s', $this->getUsername()\n\t\t)"] , has_meaningful_message : false , exception : Some ("AttributeNotSet") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Access.php" , line : 132usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^UserMapper was not assigned to this Access instance\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Access.php" , line : 151usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^GroupMapper was not assigned to this Access instance\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/user_ldap/lib/Access.php" , line : 185usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^No LDAP Connector assigned, access impossible for readAttribute\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/Access.php" , line : 194usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^LDAP resource not available\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/Access.php" , line : 249usize , placeholders : & ["$attr" , "$dn"] , has_meaningful_message : true , exception : None , regex : "^Requested attribute (.*) not found for (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/Access.php" , line : 275usize , placeholders : & ["$dn"] , has_meaningful_message : true , exception : None , regex : "^readAttribute failed for DN (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/Access.php" , line : 281usize , placeholders : & ["$dn"] , has_meaningful_message : true , exception : None , regex : "^readAttribute: (.*) found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Access.php" , line : 362usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^LDAP password changes are disabled\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/Access.php" , line : 367usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^LDAP resource not available\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Access.php" , line : 375usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("HintException") , regex : "^Password change rejected\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/Access.php" , line : 541usize , placeholders : & ["$fdn"] , has_meaningful_message : true , exception : None , regex : "^Cannot determine UUID for (.*)\\. Skipping\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/Access.php" , line : 548usize , placeholders : & ["$fdn" , "$filter"] , has_meaningful_message : true , exception : None , regex : "^No or empty name for (.*) with filter (.*)\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/Access.php" , line : 559usize , placeholders : & ["$usernameAttribute" , "$fdn"] , has_meaningful_message : true , exception : None , regex : "^No or empty username \\((.*)\\) for (.*)\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/user_ldap/lib/Access.php" , line : 569usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Error sanitizing username: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/user_ldap/lib/Access.php" , line : 610usize , placeholders : & ["$fdn"] , has_meaningful_message : true , exception : None , regex : "^Could not create unique name for (.*)\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/Access.php" , line : 920usize , placeholders : & ["$ocName"] , has_meaningful_message : true , exception : None , regex : "^The ldap user manager returned null for (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Access.php" , line : 1053usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invoker does not support controlPagedResultResponse, call LDAP Wrapper directly instead\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/Access.php" , line : 1069usize , placeholders : & ["$command"] , has_meaningful_message : true , exception : None , regex : "^Connection lost on (.*), attempting to reestablish\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/Access.php" , line : 1075usize , placeholders : & ["$command"] , has_meaningful_message : true , exception : None , regex : "^Could not (.*), because resource is missing\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/Access.php" , line : 1109usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Could not search, because resource is missing\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/user_ldap/lib/Access.php" , line : 1124usize , placeholders : & ["print_r($pagedSearchOK, true)"] , has_meaningful_message : true , exception : None , regex : "^Attempt for Paging\\?  (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/Access.php" , line : 1169usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Paged search was not available$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/Access.php" , line : 1205usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Count filter: \\{filter\\}$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Access.php" , line : 1388usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^provided name template for username does not contain any allowed characters$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Access.php" , line : 1400usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^provided name template for username does not contain any allowed characters$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Access.php" , line : 1500usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DomainException") , regex : "^searchAttributes must be an array with at least two string$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Access.php" , line : 1628usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Cannot determine UUID attribute$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Access.php" , line : 1635usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Cannot determine UUID attribute$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Access.php" , line : 1652usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Cannot determine UUID attribute$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/Access.php" , line : 1700usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Setting \\{attribute\\} as \\{subject\\}$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/Access.php" , line : 1713usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Could not autodetect the UUID attribute$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/user_ldap/lib/Access.php" , line : 1799usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Passed string does not resemble a valid GUID\\. Known UUID \\(\\{uuid\\}\\) probably does not match UUID configuration\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/Access.php" , line : 1971usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^initializing paged search for filter \\{filter\\}, base \\{base\\}, attr \\{attr\\}, limit \\{limit\\}, offset \\{offset\\}$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Access.php" , line : 1992usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NoMoreResults") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/Access.php" , line : 2003usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Ready for a paged search$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/User_LDAP.php" , line : 165usize , placeholders : & ["$this->access->connection->ldapHost" , "$this->access->connection->ldapPort"] , has_meaningful_message : true , exception : Some ("NotOnLDAP") , regex : "^No user available for the given login name on (.*):(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/User_LDAP.php" , line : 182usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/user_ldap/lib/User_LDAP.php" , line : 192usize , placeholders : & ["$dn"] , has_meaningful_message : true , exception : None , regex : "^LDAP Login: Could not get user object for DN (.*)\\. Maybe the LDAP entry has no set display name attribute\\?$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/User_LDAP.php" , line : 229usize , placeholders : & ["$uid"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^LDAP setPassword: Could not get user object for uid (.*)\\. Maybe the LDAP entry has no set display name attribute\\?$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/User_LDAP.php" , line : 279usize , placeholders : & ["$search" , "$limit" , "$offset" , "$filter"] , has_meaningful_message : true , exception : None , regex : "^getUsers: Options: search (.*) limit (.*) offset (.*) Filter: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/User_LDAP.php" , line : 289usize , placeholders : & ["count($ldap_users)"] , has_meaningful_message : true , exception : None , regex : "^getUsers: (.*) Users found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/User_LDAP.php" , line : 371usize , placeholders : & ["$uid" , "$this->access->connection->ldapHost"] , has_meaningful_message : true , exception : None , regex : "^No DN found for (.*) on (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/User_LDAP.php" , line : 406usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Notice , path : "/apps/user_ldap/lib/User_LDAP.php" , line : 412usize , placeholders : & ["$uid"] , has_meaningful_message : true , exception : None , regex : "^User (.*) is not marked as deleted, not cleaning up\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/user_ldap/lib/User_LDAP.php" , line : 419usize , placeholders : & ["$uid"] , has_meaningful_message : true , exception : None , regex : "^Cleaning up after user (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/User_LDAP.php" , line : 457usize , placeholders : & ["$uid"] , has_meaningful_message : true , exception : Some ("NoUserException") , regex : "^(.*) is not a valid user anymore$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/user_ldap/lib/User_LDAP.php" , line : 658usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Failed to map created LDAP user with userid \\{userid\\}, because UUID could not be determined$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/User_LDAP.php" , line : 667usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^LDAP Plugin: Method createUser changed to return the user DN instead of boolean\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/PagedResults/TLinkId.php" , line : 42usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^No resource provided$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/user_ldap/lib/Connection.php" , line : 242usize , placeholders : & ["$this->configuration->ldapHost"] , has_meaningful_message : true , exception : None , regex : "^No LDAP Connection to server (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Connection.php" , line : 246usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ServerNotAvailableException") , regex : "^Connection to LDAP server could not be established$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/user_ldap/lib/Connection.php" , line : 415usize , placeholders : & ["$effectiveSetting"] , has_meaningful_message : true , exception : None , regex : "^Illegal value for the (.*), reset to autodetect\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/user_ldap/lib/Connection.php" , line : 441usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^LDAPS \\(already using secure connection\\) and TLS do not work together\\. Switched off TLS\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/user_ldap/lib/Connection.php" , line : 483usize , placeholders : & ["$errorStr" , "$subj"] , has_meaningful_message : true , exception : None , regex : "^(.*)No (.*) given!$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/user_ldap/lib/Connection.php" , line : 497usize , placeholders : & ["$errorStr"] , has_meaningful_message : true , exception : None , regex : "^(.*)either no password is given for the user agent or a password is given, but not an LDAP agent\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/user_ldap/lib/Connection.php" , line : 510usize , placeholders : & ["$errorStr"] , has_meaningful_message : true , exception : None , regex : "^(.*)Not a single Base DN given\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/user_ldap/lib/Connection.php" , line : 519usize , placeholders : & ["$errorStr"] , has_meaningful_message : true , exception : None , regex : "^(.*)login filter does not contain %uid place holder\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/user_ldap/lib/Connection.php" , line : 565usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Configuration is invalid, cannot connect$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/user_ldap/lib/Connection.php" , line : 574usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^function ldap_connect is not available\\. Make sure that the PHP ldap module is installed\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/Connection.php" , line : 583usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Turned off SSL certificate validation successfully\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/user_ldap/lib/Connection.php" , line : 588usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Could not turn off SSL certificate validation\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Connection.php" , line : 645usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ServerNotAvailableException") , regex : "^Could not set required LDAP Protocol version\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Connection.php" , line : 649usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ServerNotAvailableException") , regex : "^Could not disable LDAP referrals\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Connection.php" , line : 653usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ServerNotAvailableException") , regex : "^Could not set network timeout$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Connection.php" , line : 658usize , placeholders : & ["$host"] , has_meaningful_message : true , exception : Some ("ServerNotAvailableException") , regex : "^Start TLS failed, when connecting to LDAP host (.*)\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/user_ldap/lib/Connection.php" , line : 699usize , placeholders : & ["$errno" , "$this->ldap->error($cr)"] , has_meaningful_message : true , exception : None , regex : "^Bind failed: (.*): (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/user_ldap/lib/Connection.php" , line : 700usize , placeholders : & ["$cr"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/LDAPProvider.php" , line : 60usize , placeholders : & ["get_class($backend)"] , has_meaningful_message : true , exception : None , regex : "^instance (.*) user backend\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/LDAPProvider.php" , line : 68usize , placeholders : & ["get_class($backend)"] , has_meaningful_message : true , exception : None , regex : "^instance (.*) group backend\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/LDAPProvider.php" , line : 77usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^To use the LDAPProvider, user_ldap app must be enabled$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/LDAPProvider.php" , line : 89usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^User id not found in LDAP$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/LDAPProvider.php" , line : 93usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Translation to LDAP DN unsuccessful$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/LDAPProvider.php" , line : 106usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Group id not found in LDAP$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/LDAPProvider.php" , line : 110usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Translation to LDAP DN unsuccessful$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/LDAPProvider.php" , line : 125usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Translation to internal user name unsuccessful$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/LDAPProvider.php" , line : 157usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^User id not found in LDAP$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/LDAPProvider.php" , line : 171usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Group id not found in LDAP$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/LDAPProvider.php" , line : 184usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^User id not found in LDAP$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/user_ldap/lib/LDAPProvider.php" , line : 195usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^No matching user base found for user \\{dn\\}, available: \\{bases\\}\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/LDAPProvider.php" , line : 214usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^User id not found in LDAP$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/LDAPProvider.php" , line : 227usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^User id not found in LDAP$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/LDAPProvider.php" , line : 240usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Group id not found in LDAP$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/LDAPProvider.php" , line : 279usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^User id not found in LDAP$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/LDAPProvider.php" , line : 292usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^User id not found in LDAP$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/LDAPProvider.php" , line : 305usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Group id not found in LDAP$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/LDAPProvider.php" , line : 330usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^User id not found in LDAP$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Notification/Notifier.php" , line : 73usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Notification/Notifier.php" , line : 99usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/Jobs/UpdateGroups.php" , line : 91usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Run background job \"updateGroups\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/user_ldap/lib/Jobs/UpdateGroups.php" , line : 100usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^bgJ \"updateGroups\" – groups do not seem to be configured properly, aborting\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/Jobs/UpdateGroups.php" , line : 111usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^bgJ \"updateGroups\" – Finished\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/Jobs/UpdateGroups.php" , line : 141usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^bgJ \"updateGroups\" – Dealing with known Groups\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/user_ldap/lib/Jobs/UpdateGroups.php" , line : 164usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^bgJ \"updateGroups\" – \\{user\\} removed from \\{group\\}$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/user_ldap/lib/Jobs/UpdateGroups.php" , line : 179usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^bgJ \"updateGroups\" – \\{user\\} added to \\{group\\}$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/Jobs/UpdateGroups.php" , line : 197usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^bgJ \"updateGroups\" – FINISHED dealing with known Groups\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/Jobs/UpdateGroups.php" , line : 207usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^bgJ \"updateGroups\" – dealing with created Groups\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/user_ldap/lib/Jobs/UpdateGroups.php" , line : 217usize , placeholders : & ["$createdGroup"] , has_meaningful_message : true , exception : None , regex : "^bgJ \"updateGroups\" – new group \"(.*)\" found\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/Jobs/UpdateGroups.php" , line : 227usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^bgJ \"updateGroups\" – FINISHED dealing with created Groups\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/Jobs/UpdateGroups.php" , line : 237usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^bgJ \"updateGroups\" – dealing with removed groups\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/user_ldap/lib/Jobs/UpdateGroups.php" , line : 247usize , placeholders : & ["$removedGroup"] , has_meaningful_message : true , exception : None , regex : "^bgJ \"updateGroups\" – group \"(.*)\" was removed\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/Jobs/UpdateGroups.php" , line : 254usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^bgJ \"updateGroups\" – FINISHED dealing with removed groups\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/user_ldap/lib/Migration/Version1130Date20211102154716.php" , line : 167usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Failed to add hash \"\\{dnHash\\}\" \\(\"\\{name\\}\" of \\{table\\}\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/user_ldap/lib/Migration/Version1130Date20211102154716.php" , line : 230usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^LDAP user or group with ID \\{nid\\} has a duplicated UUID value which therefore was invalidated\\. You may double\\-check your LDAP configuration and trigger an update of the UUID\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/user_ldap/lib/Migration/Version1120Date20210917155206.php" , line : 113usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Failed to shorten owncloud_name \"\\{oldId\\}\" to \"\\{newId\\}\" \\(UUID: \"\\{uuid\\}\" of \\{table\\}\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/Group_LDAP.php" , line : 231usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^No search filter found on member url of group \\{dn\\}$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Group_LDAP.php" , line : 486usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Not a valid group$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Group_LDAP.php" , line : 613usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Not a valid group$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/Group_LDAP.php" , line : 747usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^No search filter found on member url of group \\{dn\\}$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/Group_LDAP.php" , line : 797usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^No uid attribute found for DN \\{dn\\} on \\{host\\}$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Group_LDAP.php" , line : 1247usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Could not create group in LDAP backend\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Group_LDAP.php" , line : 1269usize , placeholders : & ["$gid"] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Could not delete unknown group (.*) in LDAP backend\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Group_LDAP.php" , line : 1279usize , placeholders : & ["$gid"] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Could not delete existing group (.*) in LDAP backend\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Group_LDAP.php" , line : 1298usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Could not add user to group in LDAP backend\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Group_LDAP.php" , line : 1317usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Could not remove user from group in LDAP backend\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Group_LDAP.php" , line : 1331usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Could not get group details in LDAP backend\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Wizard.php" , line : 105usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Requirements not met$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Wizard.php" , line : 117usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Internal error: Invalid object type$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Wizard.php" , line : 186usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^invalid results received$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Wizard.php" , line : 256usize , placeholders : & ["self::$l->t('Could not detect user display name attribute. Please specify it yourself in advanced LDAP settings.')"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/user_ldap/lib/Wizard.php" , line : 299usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^The mail attribute has automatically been reset, because the original value did not return any results\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Wizard.php" , line : 353usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Could not connect to LDAP$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Wizard.php" , line : 408usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Could not connect to LDAP$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Wizard.php" , line : 417usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^memberOf is not supported by the server$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Wizard.php" , line : 468usize , placeholders : & ["self::$l->t('Could not find the desired feature')"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Wizard.php" , line : 510usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Could not connect to LDAP$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Wizard.php" , line : 537usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Could not connect to LDAP$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Wizard.php" , line : 597usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Cannot create filter$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Wizard.php" , line : 619usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Cannot create filter$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Wizard.php" , line : 642usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^connection error$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Wizard.php" , line : 647usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^missing placeholder$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/user_ldap/lib/Wizard.php" , line : 652usize , placeholders : & ["$cr"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Wizard.php" , line : 652usize , placeholders : & ["$this->ldap->error($cr)"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Wizard.php" , line : 674usize , placeholders : & ["print_r($portSettings, true)"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/Wizard.php" , line : 681usize , placeholders : & ["$p" , "$t"] , has_meaningful_message : true , exception : None , regex : "^Wiz: trying port (.*), TLS (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/Wizard.php" , line : 707usize , placeholders : & ["$p"] , has_meaningful_message : true , exception : None , regex : "^Wiz: detected Port (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Wizard.php" , line : 808usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Could not connect to LDAP$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Wizard.php" , line : 846usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Could not connect to LDAP$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/user_ldap/lib/Wizard.php" , line : 854usize , placeholders : & ["$cr"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/user_ldap/lib/Wizard.php" , line : 855usize , placeholders : & ["$base" , "$errorNo" , "$errorMsg"] , has_meaningful_message : true , exception : None , regex : "^Wiz: Could not search base (.*) Error (.*): (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Wizard.php" , line : 877usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Could not connect to LDAP$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Wizard.php" , line : 916usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Could not connect to LDAP$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/Wizard.php" , line : 1034usize , placeholders : & ["$filter"] , has_meaningful_message : true , exception : None , regex : "^Wiz: Final filter (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Wizard.php" , line : 1055usize , placeholders : & ["self::$l->t('Invalid Host')"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/Wizard.php" , line : 1057usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Wiz: Attempting to connect$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Wizard.php" , line : 1063usize , placeholders : & ["self::$l->t('Invalid Host')"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/Wizard.php" , line : 1079usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Wiz: Attemping to Bind$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_ldap/lib/Wizard.php" , line : 1096usize , placeholders : & ["$port" , "(int)$tls"] , has_meaningful_message : true , exception : None , regex : "^Wiz: Bind successful to Port (.*) TLS (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Wizard.php" , line : 1107usize , placeholders : & ["$error"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Wizard.php" , line : 1230usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Could not connect to LDAP$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Wizard.php" , line : 1252usize , placeholders : & ["self::$l->t('Could not find the desired feature')"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Helper.php" , line : 228usize , placeholders : & ["\\gettype($dn)"] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^String expected (.*) given$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/lib/Helper.php" , line : 283usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^key uid is expected to be set in \\$param$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_ldap/ajax/clearMappings.php" , line : 54usize , placeholders : & ["$l->t('Failed to clear the mappings.')"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/theming/lib/ImageManager.php" , line : 111usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/theming/lib/ImageManager.php" , line : 124usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^The image was requested to be no SVG file, but converting it to PNG failed: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/theming/lib/ImageManager.php" , line : 231usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Unsupported image type$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_versions/composer/composer/InstalledVersions.php" , line : 161usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_versions/composer/composer/InstalledVersions.php" , line : 182usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_versions/composer/composer/InstalledVersions.php" , line : 203usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_versions/composer/composer/InstalledVersions.php" , line : 224usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_versions/composer/composer/InstalledVersions.php" , line : 241usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_versions/composer/composer/ClassLoader.php" , line : 252usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_versions/composer/composer/ClassLoader.php" , line : 307usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_versions/lib/Versions/VersionManager.php" , line : 79usize , placeholders : & ["$fullType"] , has_meaningful_message : true , exception : Some ("BackendNotFoundException") , regex : "^Version backend for (.*) not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_versions/lib/Sabre/RootCollection.php" , line : 81usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\Sabre\\DAV\\Exception\\Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_versions/lib/Sabre/RestoreFolder.php" , line : 36usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_versions/lib/Sabre/RestoreFolder.php" , line : 40usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_versions/lib/Sabre/RestoreFolder.php" , line : 48usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_versions/lib/Sabre/RestoreFolder.php" , line : 56usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_versions/lib/Sabre/VersionCollection.php" , line : 55usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_versions/lib/Sabre/VersionCollection.php" , line : 59usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_versions/lib/Sabre/VersionCollection.php" , line : 72usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_versions/lib/Sabre/VersionCollection.php" , line : 93usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_versions/lib/Sabre/VersionCollection.php" , line : 101usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_versions/lib/Sabre/VersionFile.php" , line : 49usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_versions/lib/Sabre/VersionFile.php" , line : 56usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_versions/lib/Sabre/VersionFile.php" , line : 73usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_versions/lib/Sabre/VersionFile.php" , line : 81usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_versions/lib/Sabre/VersionRoot.php" , line : 55usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_versions/lib/Sabre/VersionRoot.php" , line : 63usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_versions/lib/Sabre/VersionRoot.php" , line : 67usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_versions/lib/Sabre/VersionRoot.php" , line : 71usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_versions/lib/Sabre/VersionRoot.php" , line : 81usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_versions/lib/Sabre/VersionRoot.php" , line : 87usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_versions/lib/Sabre/VersionHome.php" , line : 58usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NoUserException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_versions/lib/Sabre/VersionHome.php" , line : 64usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_versions/lib/Sabre/VersionHome.php" , line : 72usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_versions/lib/Sabre/VersionHome.php" , line : 76usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_versions/lib/Sabre/VersionHome.php" , line : 80usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/files_versions/lib/Expiration.php" , line : 159usize , placeholders : & ["$minValue"] , has_meaningful_message : true , exception : None , regex : "^(.*) is not a valid value for minimal versions retention obligation\\. Check versions_retention_obligation in your config\\.php\\. Falling back to auto\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/files_versions/lib/Expiration.php" , line : 167usize , placeholders : & ["$maxValue"] , has_meaningful_message : true , exception : None , regex : "^(.*) is not a valid value for maximal versions retention obligation\\. Check versions_retention_obligation in your config\\.php\\. Falling back to auto\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/files_versions/lib/Command/Expire.php" , line : 67usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/files_versions/lib/Storage.php" , line : 498usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Version file \\{path\\} has incorrect name format$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/files_versions/lib/Storage.php" , line : 727usize , placeholders : & ["$version['path']" , "$nextVersion" , "$prevTimestamp" , "$step"] , has_meaningful_message : true , exception : None , regex : "^Mark to expire (.*) next version should be (.*) or smaller\\. \\(prevTimestamp: (.*); step: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/files_versions/lib/Storage.php" , line : 787usize , placeholders : & ["$uid"] , has_meaningful_message : true , exception : None , regex : "^Backends provided no user object for (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_versions/lib/Storage.php" , line : 788usize , placeholders : & ["$uid"] , has_meaningful_message : true , exception : Some ("\\OC\\User\\NoUserException") , regex : "^Backends provided no user object for (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/files_versions/lib/Storage.php" , line : 871usize , placeholders : & ["$path"] , has_meaningful_message : true , exception : None , regex : "^Expire: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/files_versions/lib/Storage.php" , line : 887usize , placeholders : & ["$version['path']" , "$version['version']"] , has_meaningful_message : true , exception : None , regex : "^running out of space! Delete oldest version: (.*)\\.v(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/files_versions/lib/AppInfo/Application.php" , line : 135usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/oauth2/lib/Db/ClientMapper.php" , line : 63usize , placeholders : & ["$clientIdentifier"] , has_meaningful_message : true , exception : Some ("ClientNotFoundException") , regex : "^could not find client (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/oauth2/lib/Db/ClientMapper.php" , line : 83usize , placeholders : & ["$id"] , has_meaningful_message : true , exception : Some ("ClientNotFoundException") , regex : "^could not find client with id (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/oauth2/lib/Db/AccessTokenMapper.php" , line : 64usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("AccessTokenNotFoundException") , regex : "^Could not find access token$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/oauth2/composer/composer/InstalledVersions.php" , line : 161usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/oauth2/composer/composer/InstalledVersions.php" , line : 182usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/oauth2/composer/composer/InstalledVersions.php" , line : 203usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/oauth2/composer/composer/InstalledVersions.php" , line : 224usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/oauth2/composer/composer/InstalledVersions.php" , line : 241usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/oauth2/composer/composer/ClassLoader.php" , line : 252usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/oauth2/composer/composer/ClassLoader.php" , line : 307usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/AddressHandler.php" , line : 79usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("HintException") , regex : "^Invalid Federated Cloud ID$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/Controller/RequestHandlerController.php" , line : 172usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^Server does not support federated cloud sharing$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/Controller/RequestHandlerController.php" , line : 174usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/Controller/RequestHandlerController.php" , line : 176usize , placeholders : & ["$remote"] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^internal server error, was not able to add share from (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/Controller/RequestHandlerController.php" , line : 206usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSBadRequestException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/Controller/RequestHandlerController.php" , line : 224usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^Server does not support federated cloud sharing$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/federatedfilesharing/lib/Controller/RequestHandlerController.php" , line : 226usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Share not found: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/federatedfilesharing/lib/Controller/RequestHandlerController.php" , line : 228usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^internal server error, can not process notification: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/Controller/RequestHandlerController.php" , line : 231usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSBadRequestException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/Controller/RequestHandlerController.php" , line : 260usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^Server does not support federated cloud sharing$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/federatedfilesharing/lib/Controller/RequestHandlerController.php" , line : 262usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Share not found: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/federatedfilesharing/lib/Controller/RequestHandlerController.php" , line : 264usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^internal server error, can not process notification: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/Controller/RequestHandlerController.php" , line : 293usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^Server does not support federated cloud sharing$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/federatedfilesharing/lib/Controller/RequestHandlerController.php" , line : 295usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Share not found: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/federatedfilesharing/lib/Controller/RequestHandlerController.php" , line : 297usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^internal server error, can not process notification: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/Controller/RequestHandlerController.php" , line : 315usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^Server does not support federated cloud sharing$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/federatedfilesharing/lib/Controller/RequestHandlerController.php" , line : 326usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^processing unshare notification failed: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/Controller/RequestHandlerController.php" , line : 358usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSBadRequestException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/federatedfilesharing/lib/Controller/RequestHandlerController.php" , line : 401usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/Controller/RequestHandlerController.php" , line : 402usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSBadRequestException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/Controller/RequestHandlerController.php" , line : 446usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^Server does not support federated cloud sharing$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/Controller/RequestHandlerController.php" , line : 466usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSBadRequestException") , regex : "^Share not found or token invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/federatedfilesharing/lib/FederatedShareProvider.php" , line : 185usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/FederatedShareProvider.php" , line : 186usize , placeholders : & ["$message_t"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/federatedfilesharing/lib/FederatedShareProvider.php" , line : 197usize , placeholders : & ["sprintf($message, $share->getNode()->getName(), $shareWith)"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/FederatedShareProvider.php" , line : 198usize , placeholders : & ["$message_t"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/federatedfilesharing/lib/FederatedShareProvider.php" , line : 209usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/FederatedShareProvider.php" , line : 210usize , placeholders : & ["$message_t"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/federatedfilesharing/lib/FederatedShareProvider.php" , line : 217usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/FederatedShareProvider.php" , line : 218usize , placeholders : & ["$message_t"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/FederatedShareProvider.php" , line : 249usize , placeholders : & ["$message_t"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/FederatedShareProvider.php" , line : 318usize , placeholders : & ["$message_t"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/FederatedShareProvider.php" , line : 370usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ShareNotFound") , regex : "^share not found in share_external table$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/FederatedShareProvider.php" , line : 506usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ShareNotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/FederatedShareProvider.php" , line : 637usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("GenericShareException") , regex : "^not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/FederatedShareProvider.php" , line : 754usize , placeholders : & ["$id"] , has_meaningful_message : true , exception : Some ("ShareNotFound") , regex : "^Can not find share with ID: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/FederatedShareProvider.php" , line : 760usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ShareNotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/FederatedShareProvider.php" , line : 850usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ShareNotFound") , regex : "^Share not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/FederatedShareProvider.php" , line : 856usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ShareNotFound") , regex : "^Share not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/FederatedShareProvider.php" , line : 947usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidShare") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/FederatedShareProvider.php" , line : 953usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidShare") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/federatedfilesharing/lib/Notifications.php" , line : 133usize , placeholders : & ["$name" , "$shareWith"] , has_meaningful_message : true , exception : None , regex : "^failed sharing (.*) with (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/federatedfilesharing/lib/Notifications.php" , line : 139usize , placeholders : & ["$name" , "$shareWith"] , has_meaningful_message : true , exception : None , regex : "^could not share (.*), invalid contact (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/federatedfilesharing/lib/Notifications.php" , line : 194usize , placeholders : & ["$filename" , "$remote"] , has_meaningful_message : true , exception : None , regex : "^invalid or missing token requesting re\\-share for (.*) to (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/federatedfilesharing/lib/Notifications.php" , line : 199usize , placeholders : & ["$filename" , "$remote"] , has_meaningful_message : true , exception : None , regex : "^missing remote id requesting re\\-share for (.*) to (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/federatedfilesharing/lib/Notifications.php" , line : 204usize , placeholders : & ["$filename" , "$remote"] , has_meaningful_message : true , exception : None , regex : "^failed requesting re\\-share for (.*) to (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/Notifier.php" , line : 93usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/Notifier.php" , line : 172usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/Notifier.php" , line : 254usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^No contact found for federated cloud id$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/Notifier.php" , line : 276usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^No contact found for federated cloud id$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/OCM/CloudFederationProviderFiles.php" , line : 191usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ProviderCouldNotAddShareException") , regex : "^Server does not support federated cloud sharing$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/OCM/CloudFederationProviderFiles.php" , line : 196usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ProviderCouldNotAddShareException") , regex : "^Unsupported protocol for data exchange\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/OCM/CloudFederationProviderFiles.php" , line : 225usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ProviderCouldNotAddShareException") , regex : "^The mountpoint name contains invalid characters\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/federatedfilesharing/lib/OCM/CloudFederationProviderFiles.php" , line : 230usize , placeholders : & ["$shareWith"] , has_meaningful_message : true , exception : None , regex : "^shareWith before, (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/federatedfilesharing/lib/OCM/CloudFederationProviderFiles.php" , line : 236usize , placeholders : & ["$shareWith"] , has_meaningful_message : true , exception : None , regex : "^shareWith after, (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/OCM/CloudFederationProviderFiles.php" , line : 239usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ProviderCouldNotAddShareException") , regex : "^User does not exists$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/OCM/CloudFederationProviderFiles.php" , line : 246usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ProviderCouldNotAddShareException") , regex : "^Group does not exists$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/OCM/CloudFederationProviderFiles.php" , line : 282usize , placeholders : & ["$remote"] , has_meaningful_message : true , exception : Some ("ProviderCouldNotAddShareException") , regex : "^internal server error, was not able to add share from (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/OCM/CloudFederationProviderFiles.php" , line : 286usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ProviderCouldNotAddShareException") , regex : "^server can not add remote share, missing parameter$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/OCM/CloudFederationProviderFiles.php" , line : 320usize , placeholders : & ["[$notificationType]"] , has_meaningful_message : false , exception : Some ("BadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/OCM/CloudFederationProviderFiles.php" , line : 372usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ActionNotSupportedException") , regex : "^Server does not support federated cloud sharing$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/OCM/CloudFederationProviderFiles.php" , line : 376usize , placeholders : & ["['sharedSecret']"] , has_meaningful_message : false , exception : Some ("BadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/OCM/CloudFederationProviderFiles.php" , line : 414usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ShareNotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/OCM/CloudFederationProviderFiles.php" , line : 442usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ActionNotSupportedException") , regex : "^Server does not support federated cloud sharing$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/OCM/CloudFederationProviderFiles.php" , line : 446usize , placeholders : & ["['sharedSecret']"] , has_meaningful_message : false , exception : Some ("BadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/OCM/CloudFederationProviderFiles.php" , line : 490usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ShareNotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/OCM/CloudFederationProviderFiles.php" , line : 514usize , placeholders : & ["['sharedSecret']"] , has_meaningful_message : false , exception : Some ("BadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/OCM/CloudFederationProviderFiles.php" , line : 536usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ActionNotSupportedException") , regex : "^incoming shares disabled!$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/OCM/CloudFederationProviderFiles.php" , line : 540usize , placeholders : & ["['sharedSecret']"] , has_meaningful_message : false , exception : Some ("BadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/OCM/CloudFederationProviderFiles.php" , line : 626usize , placeholders : & ["['sharedSecret']"] , has_meaningful_message : false , exception : Some ("BadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/OCM/CloudFederationProviderFiles.php" , line : 631usize , placeholders : & ["['shareWith']"] , has_meaningful_message : false , exception : Some ("BadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/OCM/CloudFederationProviderFiles.php" , line : 636usize , placeholders : & ["['senderId']"] , has_meaningful_message : false , exception : Some ("BadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/OCM/CloudFederationProviderFiles.php" , line : 652usize , placeholders : & ["$id"] , has_meaningful_message : true , exception : Some ("ProviderCouldNotAddShareException") , regex : "^Resharing back to the owner is not allowed: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/OCM/CloudFederationProviderFiles.php" , line : 655usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("ProviderCouldNotAddShareException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/OCM/CloudFederationProviderFiles.php" , line : 669usize , placeholders : & ["$id"] , has_meaningful_message : true , exception : Some ("ProviderCouldNotAddShareException") , regex : "^resharing not allowed for share: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/OCM/CloudFederationProviderFiles.php" , line : 684usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("HintException") , regex : "^Updating reshares not allowed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/OCM/CloudFederationProviderFiles.php" , line : 708usize , placeholders : & ["['permission']"] , has_meaningful_message : false , exception : Some ("BadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/lib/OCM/CloudFederationProviderFiles.php" , line : 793usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("AuthenticationFailedException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/composer/composer/ClassLoader.php" , line : 252usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/composer/composer/ClassLoader.php" , line : 307usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/composer/composer/InstalledVersions.php" , line : 161usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/composer/composer/InstalledVersions.php" , line : 182usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/composer/composer/InstalledVersions.php" , line : 203usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/composer/composer/InstalledVersions.php" , line : 224usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federatedfilesharing/composer/composer/InstalledVersions.php" , line : 241usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/notifications/lib/Push.php" , line : 419usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Could not send notification to push server \\[\\{url\\}\\]: \\{error\\}$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/notifications/lib/Push.php" , line : 428usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/notifications/lib/Push.php" , line : 454usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Could not send notification to push server \\[\\{url\\}\\]: \\{error\\}$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/notifications/lib/Push.php" , line : 462usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Push notification sent but response was not parsable, using an outdated push proxy\\? \\[\\{url\\}\\]: \\{error\\}$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/notifications/lib/Push.php" , line : 539usize , placeholders : & ["$error"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/notifications/lib/Push.php" , line : 541usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Failed to encrypt message for device$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/notifications/lib/Push.php" , line : 583usize , placeholders : & ["openssl_error_string()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/notifications/lib/Push.php" , line : 584usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Failed to encrypt message for device$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/notifications/lib/FakeUser.php" , line : 40usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/notifications/lib/FakeUser.php" , line : 44usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/notifications/lib/FakeUser.php" , line : 48usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/notifications/lib/FakeUser.php" , line : 52usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/notifications/lib/FakeUser.php" , line : 56usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/notifications/lib/FakeUser.php" , line : 60usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/notifications/lib/FakeUser.php" , line : 64usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/notifications/lib/FakeUser.php" , line : 68usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/notifications/lib/FakeUser.php" , line : 72usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/notifications/lib/FakeUser.php" , line : 76usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/notifications/lib/FakeUser.php" , line : 80usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/notifications/lib/FakeUser.php" , line : 84usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/notifications/lib/FakeUser.php" , line : 88usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/notifications/lib/FakeUser.php" , line : 92usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/notifications/lib/FakeUser.php" , line : 96usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/notifications/lib/FakeUser.php" , line : 100usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/notifications/lib/FakeUser.php" , line : 104usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/notifications/lib/FakeUser.php" , line : 108usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/notifications/lib/FakeUser.php" , line : 112usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/notifications/lib/FakeUser.php" , line : 116usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/notifications/lib/FakeUser.php" , line : 120usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/notifications/lib/FakeUser.php" , line : 124usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/notifications/lib/FakeUser.php" , line : 128usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/notifications/lib/FakeUser.php" , line : 132usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/notifications/lib/Handler.php" , line : 206usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotificationNotFoundException") , regex : "^No entry returned from database$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/notifications/lib/Handler.php" , line : 212usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotificationNotFoundException") , regex : "^Could not create notification from database row$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/notifications/lib/MailNotifications.php" , line : 203usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/notifications/lib/MailNotifications.php" , line : 219usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/notifications/lib/Notifier/AdminNotifications.php" , line : 78usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Unknown app$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/notifications/lib/Notifier/AdminNotifications.php" , line : 96usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Unknown subject$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/notifications/lib/Migration/Version2011Date20220826074907.php" , line : 53usize , placeholders : & ["$count"] , has_meaningful_message : true , exception : None , regex : "^Fixed next send of (.*) disabled users$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/notifications/lib/App.php" , line : 59usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Error while preparing push notification$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/weather_status/lib/Service/WeatherStatusService.php" , line : 441usize , placeholders : & ["$url" , "$e"] , has_meaningful_message : true , exception : None , regex : "^(.*)API error : (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/contactsinteraction/composer/composer/ClassLoader.php" , line : 252usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/contactsinteraction/composer/composer/ClassLoader.php" , line : 307usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/contactsinteraction/composer/composer/InstalledVersions.php" , line : 161usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/contactsinteraction/composer/composer/InstalledVersions.php" , line : 182usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/contactsinteraction/composer/composer/InstalledVersions.php" , line : 203usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/contactsinteraction/composer/composer/InstalledVersions.php" , line : 224usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/contactsinteraction/composer/composer/InstalledVersions.php" , line : 241usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/contactsinteraction/lib/AddressBook.php" , line : 70usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^This addressbook is immutable$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/contactsinteraction/lib/AddressBook.php" , line : 77usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^This addressbook is immutable$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/contactsinteraction/lib/AddressBook.php" , line : 95usize , placeholders : & ["$ex->getMessage()"] , has_meaningful_message : true , exception : Some ("NotFound") , regex : "^Contact does not exist: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/contactsinteraction/lib/AddressBook.php" , line : 141usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^This addressbook is immutable$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/contactsinteraction/lib/Card.php" , line : 72usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotImplemented") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/contactsinteraction/lib/Card.php" , line : 79usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotImplemented") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/contactsinteraction/lib/Card.php" , line : 107usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotImplemented") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/contactsinteraction/lib/Card.php" , line : 114usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotImplemented") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/contactsinteraction/lib/Card.php" , line : 128usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotImplemented") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/contactsinteraction/lib/Listeners/ContactInteractionListener.php" , line : 83usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Contact interaction event has no user identifier set$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/contactsinteraction/lib/Listeners/ContactInteractionListener.php" , line : 88usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Ignoring contact interaction with self$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/contactsinteraction/lib/Listeners/ContactInteractionListener.php" , line : 133usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Could not parse card to add recent category: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/CirclesJoin.php" , line : 143usize , placeholders : & ["get_class($e)" , "$e->getStatus()" , "$e->getMessage()"] , has_meaningful_message : false , exception : Some ("FederatedItemException") , regex : "^ \\[(.*), (.*)\\]\n(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/CirclesSetting.php" , line : 147usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^you need to specify a value$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/CirclesSetting.php" , line : 157usize , placeholders : & ["get_class($e)" , "$e->getStatus()" , "$e->getMessage()"] , has_meaningful_message : false , exception : Some ("FederatedItemException") , regex : "^ \\[(.*), (.*)\\]\n(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/CirclesDetails.php" , line : 175usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("CircleNotFoundException") , regex : "^unknown circle, use \\-\\-instance to retrieve the data from a remote instance$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/CirclesDetails.php" , line : 182usize , placeholders : & ["get_class($e)" , "$e->getStatus()" , "$e->getMessage()"] , has_meaningful_message : false , exception : Some ("FederatedItemException") , regex : "^ \\[(.*), (.*)\\]\n(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/CirclesCreate.php" , line : 126usize , placeholders : & ["get_class($e)" , "$e->getStatus()" , "$e->getMessage()"] , has_meaningful_message : false , exception : Some ("FederatedItemException") , regex : "^ \\[(.*), (.*)\\]\n(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/CirclesRemote.php" , line : 514usize , placeholders : & ["implode(', ', RemoteInstance::$LIST_TYPE)"] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Unknown type: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/CirclesRemote.php" , line : 527usize , placeholders : & ["implode(', ', InterfaceService::$LIST_IFACE)"] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Unknown interface: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/MembersLevel.php" , line : 157usize , placeholders : & ["get_class($e)" , "$e->getStatus()" , "$e->getMessage()"] , has_meaningful_message : false , exception : Some ("FederatedItemException") , regex : "^ \\[(.*), (.*)\\]\n(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/CirclesTest.php" , line : 431usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ItemNotFoundException") , regex : "^local not defined$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/CirclesTest.php" , line : 517usize , placeholders : & ["$v"] , has_meaningful_message : false , exception : Some ("Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/CirclesTest.php" , line : 534usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^no$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/CirclesTest.php" , line : 715usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidItemException") , regex : "^could not parse circle\\.name$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/CirclesTest.php" , line : 751usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidItemException") , regex : "^empty id or owner\\.member_id$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/CirclesTest.php" , line : 973usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^empty owner$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/CirclesTest.php" , line : 976usize , placeholders : & ["$prefix" , "$prefix"] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^(.*)\\.owner\\.circleId is different than (.*)\\.id$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/CirclesTest.php" , line : 985usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^empty initiator$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/CirclesTest.php" , line : 989usize , placeholders : & ["$prefix" , "$prefix"] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^(.*)\\.initiator\\.circleId is different than (.*)\\.id$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/CirclesTest.php" , line : 1030usize , placeholders : & ["$prefix"] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^empty (.*)\\.basedOn$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/CirclesTest.php" , line : 1055usize , placeholders : & ["$def" , "$compare" , "$expected"] , has_meaningful_message : false , exception : Some ("Exception") , regex : "^(.*): (.*) \\((.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/CirclesTest.php" , line : 1071usize , placeholders : & ["$def" , "$compare" , "$expected"] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^wrong (.*): (.*) \\((.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/CirclesTest.php" , line : 1107usize , placeholders : & ["$userId"] , has_meaningful_message : true , exception : Some ("CircleNotFoundException") , regex : "^cannot find (.*) in the list of Single Circle$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/CirclesTest.php" , line : 1124usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : Some ("CircleNotFoundException") , regex : "^cannot extract '(.*)' from the list of generated Circles$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/CirclesTest.php" , line : 1144usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : Some ("CircleNotFoundException") , regex : "^cannot extract  '(.*)' from the list of provided Circles$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/CirclesTest.php" , line : 1190usize , placeholders : & ["$instance"] , has_meaningful_message : true , exception : Some ("ItemNotFoundException") , regex : "^(.*) not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/CirclesTest.php" , line : 1235usize , placeholders : & ["implode(' ', $command)"] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^(.*) failed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/CirclesConfig.php" , line : 165usize , placeholders : & ["get_class($e)" , "$e->getStatus()" , "$e->getMessage()"] , has_meaningful_message : false , exception : Some ("FederatedItemException") , regex : "^ \\[(.*), (.*)\\]\n(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/CirclesConfig.php" , line : 207usize , placeholders : & ["$item" , "implode(', ', array_values($valid))"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Invalid config '(.*)'\\. Available values: (.*)\\. To disable a config, start the value with an underscore$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/Groups.php" , line : 97usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FakeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/Groups.php" , line : 115usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FakeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/Groups.php" , line : 132usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FakeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/Groups.php" , line : 139usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("CommandMissingArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/CirclesMemberships.php" , line : 203usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Not enough arguments \\(missing: \"userId\"\\)\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/CirclesEdit.php" , line : 153usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^edit can only be 'displayName' or 'description'$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/CirclesEdit.php" , line : 157usize , placeholders : & ["get_class($e)" , "$e->getStatus()" , "$e->getMessage()"] , has_meaningful_message : false , exception : Some ("FederatedItemException") , regex : "^ \\[(.*), (.*)\\]\n(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/CirclesDestroy.php" , line : 132usize , placeholders : & ["get_class($e)" , "$e->getStatus()" , "$e->getMessage()"] , has_meaningful_message : false , exception : Some ("FederatedItemException") , regex : "^ \\[(.*), (.*)\\]\n(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/SharesFiles.php" , line : 316usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("MissingInputException") , regex : "^Specify a FileId or an option: \\-\\-with \\(USER\\), \\-\\-by \\(USER\\), \\-\\-to \\(CIRCLE\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/CirclesReport.php" , line : 136usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^not available$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/CirclesLeave.php" , line : 123usize , placeholders : & ["get_class($e)" , "$e->getStatus()" , "$e->getMessage()"] , has_meaningful_message : false , exception : Some ("FederatedItemException") , regex : "^ \\[(.*), (.*)\\]\n(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/CirclesCheck.php" , line : 177usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Please specify a \\-\\-type for the test$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/CirclesCheck.php" , line : 180usize , placeholders : & ["implode(', ', self::$checks)"] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Unknown type: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/CirclesCheck.php" , line : 264usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Your Circles App is not fully configured\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/CirclesCheck.php" , line : 301usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Exception") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/CirclesCheck.php" , line : 873usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Exception") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Command/MembersAdd.php" , line : 133usize , placeholders : & ["get_class($e)" , "$e->getStatus()" , "$e->getMessage()"] , has_meaningful_message : false , exception : Some ("FederatedItemException") , regex : "^ \\[(.*), (.*)\\]\n(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Tools/Model/SimpleDataStore.php" , line : 285usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidItemException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Tools/Model/SimpleDataStore.php" , line : 295usize , placeholders : & ["$class"] , has_meaningful_message : true , exception : Some ("InvalidItemException") , regex : "^(.*) does not implement IDeserializable and JsonSerializable$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Tools/Model/SimpleDataStore.php" , line : 305usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidItemException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Tools/Model/SimpleDataStore.php" , line : 371usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ItemNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Tools/Model/SimpleDataStore.php" , line : 423usize , placeholders : & ["$key" , "json_encode($this->keys())"] , has_meaningful_message : true , exception : Some ("MalformedArrayException") , regex : "^(.*) missing in (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Tools/Model/NCRequestResult.php" , line : 165usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("RequestContentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Tools/Traits/TDeserialize.php" , line : 69usize , placeholders : & ["get_class($class)"] , has_meaningful_message : true , exception : Some ("InvalidItemException") , regex : "^(.*) does not implement IDeserializable$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/circles/lib/Tools/Traits/TNCRequest.php" , line : 83usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^doRequest initiated$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Tools/Traits/TNCRequest.php" , line : 93usize , placeholders : & ["$e"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/circles/lib/Tools/Traits/TNCRequest.php" , line : 97usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^doRequest done$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Tools/Traits/TNCRequest.php" , line : 100usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("RequestNetworkException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Tools/Traits/TNCRequest.php" , line : 175usize , placeholders : & ["json_encode($request)"] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^unknown request type (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Tools/Traits/TNCLogger.php" , line : 74usize , placeholders : & ["$level"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Tools/Traits/TNCLogger.php" , line : 90usize , placeholders : & ["$e"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Tools/Traits/TNCLogger.php" , line : 114usize , placeholders : & ["$level"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Tools/Traits/TNCLogger.php" , line : 131usize , placeholders : & ["self::$EMERGENCY"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Tools/Traits/TNCLogger.php" , line : 140usize , placeholders : & ["self::$ALERT"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Tools/Traits/TNCLogger.php" , line : 149usize , placeholders : & ["self::$WARNING"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Tools/Traits/TNCLogger.php" , line : 158usize , placeholders : & ["self::$NOTICE"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Tools/Traits/TNCLogger.php" , line : 168usize , placeholders : & ["$debugLevel"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Tools/Traits/TNCLogger.php" , line : 187usize , placeholders : & ["$level"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Tools/Traits/TNCSignatory.php" , line : 57usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("SignatoryException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/circles/lib/Tools/Traits/TNCSignatory.php" , line : 94usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^network issue while downloading Signatory$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Tools/Traits/TNCSignatory.php" , line : 95usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : Some ("SignatoryException") , regex : "^network issue: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/circles/lib/Tools/Traits/TNCSignatory.php" , line : 120usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^invalid format$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Tools/Traits/TNCSignatory.php" , line : 121usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("SignatoryException") , regex : "^invalid format$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Tools/Traits/TNCSignatory.php" , line : 124usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("SignatoryException") , regex : "^invalid origin$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Tools/Traits/TNCSignatory.php" , line : 141usize , placeholders : & ["$keyId"] , has_meaningful_message : true , exception : Some ("InvalidOriginException") , regex : "^cannot retrieve origin from (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Tools/Traits/TNCSignatory.php" , line : 183usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("SignatoryException") , regex : "^empty private key$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Tools/Traits/TNCSignatory.php" , line : 204usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("SignatureException") , regex : "^signature issue$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Tools/Traits/TArrayTools.php" , line : 337usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ArrayNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Tools/Traits/TArrayTools.php" , line : 378usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("UnknownTypeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Tools/Traits/TArrayTools.php" , line : 384usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ItemNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Tools/Traits/TArrayTools.php" , line : 393usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ItemNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Tools/Traits/TArrayTools.php" , line : 406usize , placeholders : & ["json_encode($arr)" , "$key"] , has_meaningful_message : true , exception : Some ("MalformedArrayException") , regex : "^source: (.*) \\- missing key: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Tools/Traits/TNCLocalSignatory.php" , line : 69usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("SignatoryException") , regex : "^signatory not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Tools/Traits/TNCWellKnown.php" , line : 126usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("WellKnownLinkNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/circles/lib/Tools/ActivityPub/NCSignature.php" , line : 102usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^\\[<<\\] incoming$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Tools/ActivityPub/NCSignature.php" , line : 152usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("SignatureException") , regex : "^datetime exception$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Tools/ActivityPub/NCSignature.php" , line : 156usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("SignatureException") , regex : "^object is too old$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Tools/ActivityPub/NCSignature.php" , line : 170usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("SignatureException") , regex : "^issue with content\\-length$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Tools/ActivityPub/NCSignature.php" , line : 175usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("SignatureException") , regex : "^issue with digest$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Tools/ActivityPub/NCSignature.php" , line : 216usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("SignatureException") , regex : "^missing elements in 'headers'$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Tools/ActivityPub/NCSignature.php" , line : 228usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("SignatureException") , regex : "^empty elements in 'headers'$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Tools/ActivityPub/NCSignature.php" , line : 279usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("SignatureException") , regex : "^empty public key$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/circles/lib/Tools/ActivityPub/NCSignature.php" , line : 290usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^signature issue$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Tools/Db/ExtendedQueryBuilder.php" , line : 261usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("DateTimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Tools/Db/ExtendedQueryBuilder.php" , line : 1016usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidItemException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Tools/Db/ExtendedQueryBuilder.php" , line : 1051usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("RowNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Db/EventWrapperRequestBuilder.php" , line : 106usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("EventWrapperNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Db/CircleRequestBuilder.php" , line : 114usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("CircleNotFoundException") , regex : "^Circle not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Db/CircleRequestBuilder.php" , line : 116usize , placeholders : & ["$qb->getSQL()"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Db/AccountsRequest.php" , line : 53usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("MemberDoesNotExistException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Db/ShareLockRequestBuilder.php" , line : 104usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FederatedShareNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Db/DeprecatedCirclesRequestBuilder.php" , line : 93usize , placeholders : & ["$this->l10n->t(\n\t\t\t\t\t'You cannot use the Circles Application until your administrator has allowed at least one type of circles'\n\t\t\t\t)"] , has_meaningful_message : false , exception : Some ("ConfigNoCircleAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Db/DeprecatedMembersRequest.php" , line : 75usize , placeholders : & ["$this->l10n->t('This member does not exist')"] , has_meaningful_message : false , exception : Some ("MemberDoesNotExistException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Db/DeprecatedMembersRequest.php" , line : 98usize , placeholders : & ["$this->l10n->t('This member does not exist')"] , has_meaningful_message : false , exception : Some ("MemberDoesNotExistException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Db/DeprecatedMembersRequest.php" , line : 271usize , placeholders : & ["$this->l10n->t('This member does not exist')"] , has_meaningful_message : false , exception : Some ("MemberDoesNotExistException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Db/DeprecatedMembersRequest.php" , line : 495usize , placeholders : & ["$this->l10n->t('This user is already a member of the circle')"] , has_meaningful_message : false , exception : Some ("MemberAlreadyExistsException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Db/DeprecatedMembersRequest.php" , line : 735usize , placeholders : & ["$this->l10n->t('This member does not exist')"] , has_meaningful_message : false , exception : Some ("MemberDoesNotExistException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Db/DeprecatedMembersRequest.php" , line : 768usize , placeholders : & ["$contactId"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Db/CoreQueryBuilder.php" , line : 1633usize , placeholders : & ["$extension" , "$search"] , has_meaningful_message : true , exception : Some ("RequestBuilderException") , regex : "^(.*) not found in (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Db/ShareTokenRequestBuilder.php" , line : 105usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ShareTokenNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Db/GSSharesRequest.php" , line : 152usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ShareNotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Db/GSSharesRequest.php" , line : 176usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ShareNotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Db/ShareWrapperRequestBuilder.php" , line : 108usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ShareWrapperNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Db/CircleRequest.php" , line : 293usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("FederatedUserNotFoundException") , regex : "^singleId not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Db/CircleRequest.php" , line : 329usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("SingleCircleNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Db/CoreRequestBuilder.php" , line : 246usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidIdException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Db/MemberRequestBuilder.php" , line : 123usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("MemberNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Db/MountRequestBuilder.php" , line : 103usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("MountNotFoundException") , regex : "^Mount not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Db/TokensRequest.php" , line : 58usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("TokenDoesNotExistException") , regex : "^Unknown share token$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Db/TokensRequest.php" , line : 83usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("TokenDoesNotExistException") , regex : "^Unknown share token$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Db/RemoteRequestBuilder.php" , line : 108usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RemoteNotFoundException") , regex : "^Unknown remote instance$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Db/MembershipRequestBuilder.php" , line : 107usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("MembershipNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Db/DeprecatedCirclesRequest.php" , line : 69usize , placeholders : & ["$this->l10n->t('Circle not found')"] , has_meaningful_message : false , exception : Some ("CircleDoesNotExistException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Db/DeprecatedCirclesRequest.php" , line : 126usize , placeholders : & ["$this->l10n->t('Circle not found')"] , has_meaningful_message : false , exception : Some ("CircleDoesNotExistException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Db/DeprecatedCirclesRequest.php" , line : 216usize , placeholders : & ["$this->l10n->t('Circle not found ' . $circleUniqueId)"] , has_meaningful_message : false , exception : Some ("CircleDoesNotExistException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Db/DeprecatedCirclesRequest.php" , line : 337usize , placeholders : & ["$this->l10n->t('A circle with that name exists')"] , has_meaningful_message : false , exception : Some ("CircleAlreadyExistsException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Db/DeprecatedCirclesRequest.php" , line : 366usize , placeholders : & ["$this->l10n->t('Circle not found')"] , has_meaningful_message : false , exception : Some ("CircleDoesNotExistException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Db/DeprecatedCirclesRequest.php" , line : 434usize , placeholders : & ["$this->l10n->t('Circle not found')"] , has_meaningful_message : false , exception : Some ("CircleDoesNotExistException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Db/FederatedLinksRequest.php" , line : 170usize , placeholders : & ["$this->l10n->t('Federated link not found')"] , has_meaningful_message : false , exception : Some ("FederatedLinkDoesNotExistException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Db/FederatedLinksRequest.php" , line : 196usize , placeholders : & ["$this->l10n->t('Federated link not found')"] , has_meaningful_message : false , exception : Some ("FederatedLinkDoesNotExistException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Db/FederatedLinksRequest.php" , line : 220usize , placeholders : & ["$this->l10n->t('Federated link not found')"] , has_meaningful_message : false , exception : Some ("FederatedLinkDoesNotExistException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/RemoteController.php" , line : 365usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("FederatedUserNotFoundException") , regex : "^Entity not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/circles/lib/Controller/RemoteController.php" , line : 502usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Signatory is not a known RemoteInstance$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/RemoteController.php" , line : 503usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("SignatoryException") , regex : "^Could not confirm identity$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/circles/lib/Controller/RemoteController.php" , line : 508usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Could not confirm identity$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/RemoteController.php" , line : 509usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("SignatoryException") , regex : "^Could not confirm identity$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/RemoteController.php" , line : 557usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotLoggedInException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/RemoteController.php" , line : 560usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("JsonNotRequestedException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/LocalController.php" , line : 155usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OcsException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/LocalController.php" , line : 177usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OcsException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/LocalController.php" , line : 197usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OcsException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/LocalController.php" , line : 220usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OcsException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/LocalController.php" , line : 243usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^works only from local instance$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/LocalController.php" , line : 255usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/LocalController.php" , line : 287usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/LocalController.php" , line : 309usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/LocalController.php" , line : 331usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/LocalController.php" , line : 362usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OcsException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/LocalController.php" , line : 389usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/LocalController.php" , line : 413usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/LocalController.php" , line : 441usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/LocalController.php" , line : 461usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/LocalController.php" , line : 484usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/LocalController.php" , line : 507usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/LocalController.php" , line : 531usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/LocalController.php" , line : 554usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/LocalController.php" , line : 576usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/LocalController.php" , line : 592usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("FrontendException") , regex : "^frontend disabled$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/AdminController.php" , line : 159usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OcsException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/AdminController.php" , line : 179usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OcsException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/AdminController.php" , line : 201usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^works only from local instance$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/AdminController.php" , line : 220usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/AdminController.php" , line : 257usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OcsException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/AdminController.php" , line : 283usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/AdminController.php" , line : 305usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OcsException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/AdminController.php" , line : 325usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/AdminController.php" , line : 345usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/AdminController.php" , line : 371usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/AdminController.php" , line : 394usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/AdminController.php" , line : 413usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/AdminController.php" , line : 435usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/AdminController.php" , line : 457usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/AdminController.php" , line : 480usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/AdminController.php" , line : 505usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Controller/AdminController.php" , line : 526usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/MountManager/CircleMountProvider.php" , line : 159usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InitiatorNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/MountManager/CircleMount.php" , line : 81usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("MountPointConstructionException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Search/GlobalScaleUsers.php" , line : 93usize , placeholders : & ["get_class($e)" , "$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Issue while search users from lookup: (.*) (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/circles/lib/Service/MaintenanceService.php" , line : 180usize , placeholders : & ["$level"] , has_meaningful_message : true , exception : None , regex : "^running maintenance \\((.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/MaintenanceService.php" , line : 210usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("MaintenanceException") , regex : "^maintenance already running$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/MemberService.php" , line : 160usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("MemberNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/GSUpstreamService.php" , line : 147usize , placeholders : & ["get_class($e)" , "$e->getMessage()" , "json_encode($event)"] , has_meaningful_message : true , exception : None , regex : "^(.*) on new event: (.*) \\- (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/GSUpstreamService.php" , line : 232usize , placeholders : & ["json_encode($result)"] , has_meaningful_message : true , exception : None , regex : "^result (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/GSUpstreamService.php" , line : 234usize , placeholders : & ["$this->get('error', $result)"] , has_meaningful_message : false , exception : Some ("GlobalScaleEventException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/GSUpstreamService.php" , line : 238usize , placeholders : & ["json_encode($updatedData)"] , has_meaningful_message : true , exception : None , regex : "^updatedEvent: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/GSUpstreamService.php" , line : 421usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RequestContentException") , regex : "^result status is not good$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/FederatedShareService.php" , line : 112usize , placeholders : & ["$share->getInstance()"] , has_meaningful_message : true , exception : Some ("FederatedShareAlreadyLockedException") , regex : "^item already locked by (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/MembersService.php" , line : 365usize , placeholders : & ["$this->l10n->t(\"This user does not exist\")"] , has_meaningful_message : false , exception : Some ("NoUserException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/MembersService.php" , line : 385usize , placeholders : & ["$this->l10n->t('Email format is not valid')"] , has_meaningful_message : false , exception : Some ("EmailAccountInvalidFormatException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/MembersService.php" , line : 409usize , placeholders : & ["$this->l10n->t(\"This contact is not available\")"] , has_meaningful_message : false , exception : Some ("NoUserException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/MembersService.php" , line : 427usize , placeholders : & ["$this->l10n->t('This group does not exist')"] , has_meaningful_message : false , exception : Some ("GroupDoesNotExistException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/MembersService.php" , line : 556usize , placeholders : & ["$this->l10n->t('You cannot edit level in a personal circle')"] , has_meaningful_message : false , exception : Some ("CircleTypeNotValidException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/PermissionService.php" , line : 79usize , placeholders : & ["$this->l10n->t('You have no permission to create a new circle')"] , has_meaningful_message : false , exception : Some ("InsufficientPermissionException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/PermissionService.php" , line : 104usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InsufficientPermissionException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/PermissionService.php" , line : 118usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("MembershipNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/GSDownstreamService.php" , line : 156usize , placeholders : & ["json_encode($event)" , "$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^issue onNewEvent: (.*) \\- (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/ConfigService.php" , line : 424usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("GSStatusException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/CircleService.php" , line : 198usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OwnerNotFoundException") , regex : "^owner not defined$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/CircleService.php" , line : 207usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("CircleNameTooShortException") , regex : "^Circle name is too short$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/CircleService.php" , line : 536usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidItemException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/CircleService.php" , line : 589usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("CircleNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/CircleService.php" , line : 623usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("CircleNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/CircleService.php" , line : 662usize , placeholders : & ["StatusCode::$MEMBER_ADD[121]"] , has_meaningful_message : false , exception : Some ("MembersLimitException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/GroupsService.php" , line : 149usize , placeholders : & ["$this->l10n->t('Group contains too many members')"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/GroupsService.php" , line : 180usize , placeholders : & ["$this->l10n->t(\"This group does not exist\")"] , has_meaningful_message : false , exception : Some ("GroupDoesNotExistException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/GroupsService.php" , line : 193usize , placeholders : & ["$this->l10n->t('This group is already linked to the circle')"] , has_meaningful_message : false , exception : Some ("MemberAlreadyExistsException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/GroupsService.php" , line : 215usize , placeholders : & ["$this->l10n->t('You cannot edit level in a personal circle')"] , has_meaningful_message : false , exception : Some ("CircleTypeNotValidException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/GroupsService.php" , line : 224usize , placeholders : & ["$this->l10n->t('Group cannot be set as owner of a circle')"] , has_meaningful_message : false , exception : Some ("GroupCannotBeOwnerException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/circles/lib/Service/OutputService.php" , line : 88usize , placeholders : & ["$message"] , has_meaningful_message : true , exception : None , regex : "^\\(Circles\\) (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/ShareTokenService.php" , line : 103usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ShareTokenNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/ShareTokenService.php" , line : 118usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ShareTokenAlreadyExistException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/RemoteDownstreamService.php" , line : 144usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("FederatedEventDSyncException") , regex : "^Circle is not from this instance$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/RemoteDownstreamService.php" , line : 150usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("FederatedEventException") , regex : "^Instance have no members in this Circle$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/RemoteDownstreamService.php" , line : 225usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("FederatedEventDSyncException") , regex : "^Could not verify Circle$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/circles/lib/Service/RemoteDownstreamService.php" , line : 266usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^failed to compare Circles$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/RemoteDownstreamService.php" , line : 291usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("FederatedEventDSyncException") , regex : "^Could not verify Member$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/circles/lib/Service/RemoteDownstreamService.php" , line : 301usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^verifyMember\\(\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/circles/lib/Service/RemoteDownstreamService.php" , line : 307usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Member not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/circles/lib/Service/RemoteDownstreamService.php" , line : 313usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^failed to compare Members$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/circles/lib/Service/RemoteDownstreamService.php" , line : 333usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^invalid origin$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/RemoteDownstreamService.php" , line : 334usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("FederatedEventException") , regex : "^invalid origin$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/ShareWrapperService.php" , line : 130usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^\\$initiator cannot be empty$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/ShareWrapperService.php" , line : 226usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidItemException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/ContactService.php" , line : 134usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ContactFormatException") , regex : "^issue with contact format USERID/ADDRESSBOOK/CONTACTID$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/ContactService.php" , line : 151usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ContactNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/ContactService.php" , line : 172usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ContactAddressBookNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/ContactService.php" , line : 190usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ContactAddressBookNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/MigrationService.php" , line : 185usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("MigrationException") , regex : "^A migration process is already running$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/MigrationService.php" , line : 665usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("MemberNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/InterfaceService.php" , line : 125usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("UnknownInterfaceException") , regex : "^interface not initialized$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/InterfaceService.php" , line : 272usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("UnknownInterfaceException") , regex : "^unknown interface$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/InterfaceService.php" , line : 360usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("UnknownInterfaceException") , regex : "^unknown configured interface$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/InterfaceService.php" , line : 409usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("UnknownInterfaceException") , regex : "^misconfigured scheme$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/CirclesService.php" , line : 188usize , placeholders : & ["$this->l10n->t('You need a specify a type of circle')"] , has_meaningful_message : false , exception : Some ("CircleTypeDisabledException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/CirclesService.php" , line : 205usize , placeholders : & ["$this->l10n->t('A circle with that name exists')"] , has_meaningful_message : false , exception : Some ("CircleAlreadyExistsException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/CirclesService.php" , line : 247usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^UserID cannot be null$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/CirclesService.php" , line : 634usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("MembersLimitException") , regex : "^This circle already reach its limit on the number of members$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/CirclesService.php" , line : 662usize , placeholders : & ["$this->l10n->t('This member is not the owner of the circle')"] , has_meaningful_message : false , exception : Some ("MemberIsNotOwnerException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/CirclesService.php" , line : 679usize , placeholders : & ["$this->l10n->t('This member is not an admin of the circle')"] , has_meaningful_message : false , exception : Some ("MemberIsNotOwnerException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/FederatedUserService.php" , line : 336usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InitiatorNotFoundException") , regex : "^Invalid initiator$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/FederatedUserService.php" , line : 362usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("SuperSessionException") , regex : "^Must initialise Super Session$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/FederatedUserService.php" , line : 525usize , placeholders : & ["$userId"] , has_meaningful_message : true , exception : Some ("FederatedUserNotFoundException") , regex : "^user (.*) not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/FederatedUserService.php" , line : 627usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("CircleNotFoundException") , regex : "^This Circle is not managed from this instance, please use \\-\\-initiator$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/FederatedUserService.php" , line : 654usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("RemoteCircleException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/FederatedUserService.php" , line : 748usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("UserTypeNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/FederatedUserService.php" , line : 1003usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("FederatedUserException") , regex : "^FederatedUser must be local$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/FederatedUserService.php" , line : 1015usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("SingleCircleNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/circles/lib/Service/FederatedUserService.php" , line : 1085usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^FederatedUser is not empty$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/FederatedUserService.php" , line : 1086usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("FederatedUserException") , regex : "^FederatedUser is not complete$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/circles/lib/Service/FederatedUserService.php" , line : 1105usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^uniqueness of SingleId could not be confirmed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/FederatedUserService.php" , line : 1109usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("FederatedUserException") , regex : "^uniqueness of SingleId could not be confirmed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/FederatedUserService.php" , line : 1195usize , placeholders : & ["3"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/FederatedUserService.php" , line : 1203usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("FederatedUserException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/FederatedUserService.php" , line : 1227usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("GroupNotFoundException") , regex : "^group not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/FederatedUserService.php" , line : 1274usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("SingleCircleNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/FederatedUserService.php" , line : 1281usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("SingleCircleNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/MembershipService.php" , line : 408usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ItemNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/DavService.php" , line : 165usize , placeholders : & ["json_encode($davCard)"] , has_meaningful_message : true , exception : None , regex : "^Deleting Card: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/DavService.php" , line : 205usize , placeholders : & ["$bookId" , "json_encode($card)"] , has_meaningful_message : true , exception : None , regex : "^generating DavCard Model from book=(.*) from (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/DavService.php" , line : 216usize , placeholders : & ["json_encode($davCard)"] , has_meaningful_message : true , exception : None , regex : "^generated DavCard Model: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/DavService.php" , line : 227usize , placeholders : & ["json_encode($davCard)"] , has_meaningful_message : true , exception : None , regex : "^Updating Card: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/DavService.php" , line : 259usize , placeholders : & ["json_encode($davCard)"] , has_meaningful_message : true , exception : None , regex : "^Managing deprecated circles memberships from DavCard Model: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/DavService.php" , line : 270usize , placeholders : & ["sizeof($members)" , "$davCard->getUniqueId()"] , has_meaningful_message : true , exception : None , regex : "^Found (.*) memberships with contactId=(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/DavService.php" , line : 276usize , placeholders : & ["$member->getMemberId()" , "$member->getCircleId()"] , has_meaningful_message : true , exception : None , regex : "^Removing membership (.*) from (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/DavService.php" , line : 317usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("MemberDoesNotExistException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/DavService.php" , line : 375usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotLocalMemberException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/DavService.php" , line : 386usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotLocalMemberException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/DavService.php" , line : 401usize , placeholders : & ["json_encode($fromCard)" , "json_encode($current)"] , has_meaningful_message : true , exception : None , regex : "^manage Circles from DavCard: (.*) \\- current: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/DavService.php" , line : 432usize , placeholders : & ["json_encode($circle)" , "$davCard->getOwner()"] , has_meaningful_message : true , exception : None , regex : "^creating new Circle: (.*), with owner=(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/DavService.php" , line : 442usize , placeholders : & ["json_encode($owner)"] , has_meaningful_message : true , exception : None , regex : "^creating new Member: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/DavService.php" , line : 457usize , placeholders : & ["json_encode($davCard)"] , has_meaningful_message : true , exception : None , regex : "^assigning Circles to DavCard Model: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/DavService.php" , line : 467usize , placeholders : & ["json_encode($davCard)"] , has_meaningful_message : true , exception : None , regex : "^assigned Circles to DavCard Model: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/DavService.php" , line : 512usize , placeholders : & ["$bookId"] , has_meaningful_message : true , exception : None , regex : "^Retrieving Owner from book:(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/DavService.php" , line : 517usize , placeholders : & ["$owner"] , has_meaningful_message : true , exception : None , regex : "^Retrieved Owner:(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/DavService.php" , line : 528usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Circles needs to be set as Contacts App Backend first$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/DavService.php" , line : 534usize , placeholders : & ["sizeof($users)"] , has_meaningful_message : true , exception : None , regex : "^initiating migration for (.*) users$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/DavService.php" , line : 536usize , placeholders : & ["$user->getUID()"] , has_meaningful_message : true , exception : None , regex : "^retrieving books for user=(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/DavService.php" , line : 539usize , placeholders : & ["$user->getUID()"] , has_meaningful_message : true , exception : None , regex : "^initiating migration for user=(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/DavService.php" , line : 551usize , placeholders : & ["sizeof($contacts)"] , has_meaningful_message : true , exception : None , regex : "^Managing Deprecated Contacts, checking (.*) known contacts in database$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/DavService.php" , line : 558usize , placeholders : & ["json_encode($contact)"] , has_meaningful_message : true , exception : None , regex : "^Contact is not deprecated: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/DavService.php" , line : 560usize , placeholders : & ["json_encode($contact)"] , has_meaningful_message : true , exception : None , regex : "^Contact is deprecated and will be removed: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/DavService.php" , line : 567usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Deprecated Contacts managed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/DavService.php" , line : 576usize , placeholders : & ["$bookId"] , has_meaningful_message : true , exception : None , regex : "^Managing Deprecated Circles, using bookId: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/DavService.php" , line : 581usize , placeholders : & ["sizeof($contacts)"] , has_meaningful_message : true , exception : None , regex : "^(.*) known members as contacts in Circles DB$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/DavService.php" , line : 593usize , placeholders : & ["json_encode($knownBooks)"] , has_meaningful_message : true , exception : None , regex : "^Known books: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/DavService.php" , line : 595usize , placeholders : & ["$bookId"] , has_meaningful_message : true , exception : None , regex : "^retrieving local Circles data for bookId=(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/DavService.php" , line : 597usize , placeholders : & ["$bookId" , "json_encode($circles)"] , has_meaningful_message : true , exception : None , regex : "^Known circles for bookId=(.*): (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/DavService.php" , line : 602usize , placeholders : & ["$bookId" , "json_encode($fromBook)"] , has_meaningful_message : true , exception : None , regex : "^Generated circles from bookId=(.*): (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/DavService.php" , line : 611usize , placeholders : & ["$circle->getUniqueId()"] , has_meaningful_message : true , exception : None , regex : "^(.*) is a deprecated Circle and will be destroyed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/DavService.php" , line : 620usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Deprecated Circles managed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/DavService.php" , line : 633usize , placeholders : & ["$bookId" , "sizeof($cards)"] , has_meaningful_message : true , exception : None , regex : "^retrieving existing circles from bookId=(.*) in (.*) cards$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/DavService.php" , line : 642usize , placeholders : & ["sizeof($circles)" , "$bookId"] , has_meaningful_message : true , exception : None , regex : "^Found (.*) Circles from book=(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/DavService.php" , line : 651usize , placeholders : & ["$bookId" , "json_encode($existing)"] , has_meaningful_message : true , exception : None , regex : "^retrieved existing circles from book=(.*): (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/DavService.php" , line : 667usize , placeholders : & ["$bookId" , "$cardUri"] , has_meaningful_message : true , exception : None , regex : "^Retrieving DavCard from book:(.*), uri:(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/DavService.php" , line : 670usize , placeholders : & ["sizeof($cards)"] , has_meaningful_message : true , exception : None , regex : "^Book contains (.*) cards$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/DavService.php" , line : 674usize , placeholders : & ["json_encode($card)"] , has_meaningful_message : true , exception : None , regex : "^Retrieved DavCard: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/DavService.php" , line : 680usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("MemberDoesNotExistException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/DavService.php" , line : 692usize , placeholders : & ["$bookId"] , has_meaningful_message : true , exception : None , regex : "^migrating book: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/DavService.php" , line : 696usize , placeholders : & ["sizeof($cards)" , "$bookId"] , has_meaningful_message : true , exception : None , regex : "^found (.*)cards from book=(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/FederatedEventService.php" , line : 213usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InitiatorNotConfirmedException") , regex : "^Initiator does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/FederatedEventService.php" , line : 218usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InitiatorNotConfirmedException") , regex : "^Initiator is not from the instance at the origin of the request$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/FederatedEventService.php" , line : 224usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InitiatorNotConfirmedException") , regex : "^Initiator must belong to the instance at the origin of the request$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/FederatedEventService.php" , line : 232usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InitiatorNotConfirmedException") , regex : "^Initiator must be a member of the Circle$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/FederatedEventService.php" , line : 249usize , placeholders : & ["$class" , "$e->getMessage()"] , has_meaningful_message : true , exception : Some ("FederatedEventException") , regex : "^ReflectionException with (.*): (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/FederatedEventService.php" , line : 253usize , placeholders : & ["$class"] , has_meaningful_message : true , exception : Some ("FederatedEventException") , regex : "^(.*) does not implements IFederatedItem$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/FederatedEventService.php" , line : 258usize , placeholders : & ["$class"] , has_meaningful_message : true , exception : Some ("FederatedEventException") , regex : "^(.*) not an IFederatedItem$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/FederatedEventService.php" , line : 315usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("FederatedEventException") , regex : "^FederatedEvent has no Circle linked$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/FederatedEventService.php" , line : 322usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("FederatedEventException") , regex : "^FederatedEvent has no Member linked$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/FederatedEventService.php" , line : 328usize , placeholders : & ["get_class($item)"] , has_meaningful_message : true , exception : Some ("FederatedEventException") , regex : "^(.*) does not implements IFederatedItemMemberOptional nor IFederatedItemMemberRequired$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/FederatedEventService.php" , line : 335usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("FederatedEventException") , regex : "^FederatedItem must be executed locally$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/FederatedEventService.php" , line : 355usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("FederatedEventException") , regex : "^FederatedItem must contains ItemId$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/FederatedEventService.php" , line : 361usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("FederatedShareBelongingException") , regex : "^ShareLock belongs to another instance$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/RemoteStreamService.php" , line : 230usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("RemoteInstanceException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/RemoteStreamService.php" , line : 290usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("RemoteInstanceException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/RemoteStreamService.php" , line : 314usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("RemoteResourceNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/RemoteStreamService.php" , line : 333usize , placeholders : & ["$instance"] , has_meaningful_message : true , exception : Some ("UnknownRemoteException") , regex : "^(.*) is set as 'unknown' in database$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/RemoteStreamService.php" , line : 377usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("SignatoryException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/RemoteStreamService.php" , line : 418usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RemoteAlreadyExistsException") , regex : "^instance is local$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/RemoteStreamService.php" , line : 434usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RemoteAlreadyExistsException") , regex : "^instance is already known$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/RemoteStreamService.php" , line : 457usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("RemoteNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/RemoteStreamService.php" , line : 490usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("SignatureException") , regex : "^invalid auth\\-signed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/RemoteStreamService.php" , line : 501usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("SignatureException") , regex : "^auth not confirmed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/RemoteStreamService.php" , line : 545usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FederatedItemException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/RemoteStreamService.php" , line : 581usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("RemoteNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/RemoteStreamService.php" , line : 588usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("RemoteUidException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/RemoteService.php" , line : 163usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("CircleNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/RemoteService.php" , line : 329usize , placeholders : & ["implode(', ', $knownInstance)"] , has_meaningful_message : true , exception : Some ("CircleNotFoundException") , regex : "^circle not found after browsing (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/RemoteService.php" , line : 405usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FederatedUserNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/RemoteService.php" , line : 412usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("FederatedUserException") , regex : "^incorrect federated user returned from instance$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/RemoteService.php" , line : 415usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("FederatedUserException") , regex : "^incorrect instance on returned federated user$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/MiscService.php" , line : 73usize , placeholders : & ["$level"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/MiscService.php" , line : 109usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("MissingKeyInArrayException") , regex : "^missing_key_in_array$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Service/MiscService.php" , line : 121usize , placeholders : & ["json_encode($data)"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/MiscService.php" , line : 159usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NoUserException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Service/MiscService.php" , line : 331usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NoUserException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Notice , path : "/apps/circles/lib/Listeners/Files/RemovingMember.php" , line : 154usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^issue while deleting user shares: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Listeners/Files/CreatingShareSendMail.php" , line : 136usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ShareWrapperNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Listeners/Examples/ExampleRequestingCircleMember.php" , line : 94usize , placeholders : & ["3"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Listeners/Examples/ExampleAddingCircleMember.php" , line : 117usize , placeholders : & ["3"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Listeners/Examples/ExampleMembershipsRemoved.php" , line : 112usize , placeholders : & ["3"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Listeners/Examples/ExampleMembershipsCreated.php" , line : 112usize , placeholders : & ["3"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/Member.php" , line : 745usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("MembershipNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/Member.php" , line : 796usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidItemException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/Member.php" , line : 855usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("MemberNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/Member.php" , line : 967usize , placeholders : & ["$all"] , has_meaningful_message : true , exception : Some ("ParseMemberLevelException") , regex : "^Available levels: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/Member.php" , line : 986usize , placeholders : & ["$all"] , has_meaningful_message : true , exception : Some ("ParseMemberLevelException") , regex : "^Available levels: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/Member.php" , line : 1007usize , placeholders : & ["$all"] , has_meaningful_message : true , exception : Some ("UserTypeNotFoundException") , regex : "^Available types: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/Circle.php" , line : 637usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OwnerNotFoundException") , regex : "^circle has no owner$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/Circle.php" , line : 802usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidItemException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/Circle.php" , line : 899usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("CircleNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/DeprecatedMember.php" , line : 42usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("CircleTypeNotValidException") , regex : "^Invalid circle type$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/DeprecatedMember.php" , line : 68usize , placeholders : & ["$this->l10n->t('You cannot join this circle')"] , has_meaningful_message : false , exception : Some ("MemberCantJoinCircleException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/DeprecatedMember.php" , line : 121usize , placeholders : & ["$this->l10n->t('This member is not a moderator')"] , has_meaningful_message : false , exception : Some ("MemberIsNotModeratorException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/DeprecatedMember.php" , line : 135usize , placeholders : & ["$this->l10n->t('Insufficient privileges')"] , has_meaningful_message : false , exception : Some ("ModeratorIsNotHighEnoughException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/DeprecatedMember.php" , line : 147usize , placeholders : & ["$this->l10n->t('This member does not exist')"] , has_meaningful_message : false , exception : Some ("MemberDoesNotExistException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/DeprecatedMember.php" , line : 162usize , placeholders : & ["$this->l10n->t('This member does not exist')"] , has_meaningful_message : false , exception : Some ("MemberDoesNotExistException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/DeprecatedMember.php" , line : 171usize , placeholders : & ["$this->l10n->t('This member is the owner of the circle')"] , has_meaningful_message : false , exception : Some ("MemberIsOwnerException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/DeprecatedMember.php" , line : 212usize , placeholders : & ["$this->l10n->t('Level cannot be changed for this type of member')"] , has_meaningful_message : false , exception : Some ("MemberTypeCantEditLevelException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/DeprecatedMember.php" , line : 225usize , placeholders : & ["$this->l10n->t(\"You are already a member of this circle\")"] , has_meaningful_message : false , exception : Some ("MemberAlreadyExistsException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/DeprecatedMember.php" , line : 231usize , placeholders : & ["$this->l10n->t(\"You have been blocked from this circle\")"] , has_meaningful_message : false , exception : Some ("MemberIsBlockedException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/DeprecatedMember.php" , line : 243usize , placeholders : & ["$this->l10n->t(\"The user is already a member of this circle\")"] , has_meaningful_message : false , exception : Some ("MemberAlreadyExistsException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/DeprecatedMember.php" , line : 249usize , placeholders : & ["$this->l10n->t(\"The user has already been invited into this circle\")"] , has_meaningful_message : false , exception : Some ("MemberAlreadyExistsException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/FederatedUser.php" , line : 353usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidItemException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/FederatedUser.php" , line : 389usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OwnerNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/FederatedUser.php" , line : 426usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FederatedUserNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/DeprecatedCircle.php" , line : 243usize , placeholders : & ["$this->l10n->t(\"This feature is not available for personal circles\")"] , has_meaningful_message : false , exception : Some ("CircleTypeNotValidException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/DeprecatedCircle.php" , line : 255usize , placeholders : & ["$this->l10n->t('The circle is not federated')"] , has_meaningful_message : false , exception : Some ("FederatedCircleNotAllowedException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/GlobalScale/GSEvent.php" , line : 410usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("JsonException") , regex : "^invalid JSON$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/GlobalScale/GSEvent.php" , line : 442usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ModelException") , regex : "^invalid GSEvent$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/Federated/RemoteInstance.php" , line : 471usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RemoteUidException") , regex : "^identity not authed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/Federated/RemoteInstance.php" , line : 549usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("RemoteNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/SharingFrame.php" , line : 269usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("SharingFrameSourceCannotBeAppCirclesException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/Membership.php" , line : 282usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidItemException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/Membership.php" , line : 306usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("MembershipNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/Mount.php" , line : 432usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("CircleNotFoundException") , regex : "^ShareWrapper has no Circle$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/Helpers/MemberHelper.php" , line : 91usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("MemberHelperException") , regex : "^unknown method call$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/Helpers/MemberHelper.php" , line : 106usize , placeholders : & ["$levelString"] , has_meaningful_message : true , exception : Some ("MemberHelperException") , regex : "^method (.*) not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/Helpers/MemberHelper.php" , line : 124usize , placeholders : & ["$levelString"] , has_meaningful_message : true , exception : Some ("MemberHelperException") , regex : "^method (.*) not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/Helpers/MemberHelper.php" , line : 128usize , placeholders : & ["$levelString"] , has_meaningful_message : true , exception : Some ("MemberLevelException") , regex : "^Member cannot be (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/Helpers/MemberHelper.php" , line : 140usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("MemberLevelException") , regex : "^Insufficient rights$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/Helpers/MemberHelper.php" , line : 152usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("MemberLevelException") , regex : "^Insufficient rights$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/Helpers/MemberHelper.php" , line : 164usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("MemberLevelException") , regex : "^Insufficient rights$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/ShareWrapper.php" , line : 722usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidItemException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/FileCacheWrapper.php" , line : 471usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidItemException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/FileCacheWrapper.php" , line : 505usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FileCacheNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/FederatedLink.php" , line : 310usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("FederatedCircleStatusUpdateException") , regex : "^The status could not be updated$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/FederatedLink.php" , line : 326usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FederatedCircleStatusUpdateException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/FederatedLink.php" , line : 343usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FederatedCircleStatusUpdateException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/FederatedLink.php" , line : 359usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FederatedCircleStatusUpdateException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/FederatedLink.php" , line : 377usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FederatedCircleStatusUpdateException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/ShareToken.php" , line : 260usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidItemException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Model/ShareToken.php" , line : 285usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ShareTokenNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Activity/ProviderSubjectLink.php" , line : 56usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FakeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Activity/ProviderSubjectLink.php" , line : 76usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FakeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Activity/ProviderSubjectLink.php" , line : 97usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FakeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Activity/ProviderSubjectLink.php" , line : 120usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FakeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Activity/ProviderSubjectLink.php" , line : 141usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FakeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Activity/ProviderSubjectLink.php" , line : 163usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FakeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Activity/ProviderSubjectLink.php" , line : 185usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FakeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Activity/ProviderSubjectLink.php" , line : 207usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FakeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Activity/ProviderSubjectLink.php" , line : 228usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FakeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Activity/ProviderSubjectLink.php" , line : 251usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FakeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Activity/ProviderSubjectLink.php" , line : 273usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FakeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Activity/Provider.php" , line : 114usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Activity/Provider.php" , line : 118usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Activity/ProviderSubjectCircle.php" , line : 54usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FakeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Activity/ProviderSubjectCircle.php" , line : 75usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FakeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Activity/ProviderSubjectMember.php" , line : 58usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FakeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Activity/ProviderSubjectMember.php" , line : 80usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FakeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Activity/ProviderSubjectMember.php" , line : 108usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FakeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Activity/ProviderSubjectMember.php" , line : 131usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FakeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Activity/ProviderSubjectMember.php" , line : 154usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FakeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Activity/ProviderSubjectMember.php" , line : 181usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FakeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Activity/ProviderSubjectMember.php" , line : 217usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FakeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Activity/ProviderSubjectMember.php" , line : 246usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FakeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Activity/ProviderSubjectMember.php" , line : 270usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FakeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Activity/ProviderSubjectMember.php" , line : 301usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FakeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Activity/ProviderSubjectMember.php" , line : 319usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FakeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Activity/ProviderSubjectMember.php" , line : 342usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FakeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Activity/ProviderSubjectMember.php" , line : 366usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FakeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Activity/ProviderSubjectMember.php" , line : 388usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FakeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Activity/ProviderSubjectMember.php" , line : 409usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FakeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Activity/ProviderSubjectGroup.php" , line : 55usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FakeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Activity/ProviderSubjectGroup.php" , line : 76usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FakeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Activity/ProviderSubjectGroup.php" , line : 101usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FakeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/ShareByCircleProviderDeprecated.php" , line : 331usize , placeholders : & ["$share->getShareType()" , "$share->getToken()" , "$share->getShareType()" , "$share->getSharedWith()" , "$share->getPermissions()"] , has_meaningful_message : true , exception : None , regex : "^Creating share \\(1/4\\) \\- type: (.*) \\- token: (.*) \\- type: (.*) \\- with: (.*) \\- permissions: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/ShareByCircleProviderDeprecated.php" , line : 338usize , placeholders : & ["json_encode($qb->getSQL())"] , has_meaningful_message : true , exception : None , regex : "^Share creation \\(2/4\\) : (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/ShareByCircleProviderDeprecated.php" , line : 341usize , placeholders : & ["json_encode($result)"] , has_meaningful_message : true , exception : None , regex : "^Share creation result \\(3/4\\) : (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/ShareByCircleProviderDeprecated.php" , line : 344usize , placeholders : & ["$id"] , has_meaningful_message : true , exception : None , regex : "^Share created ID \\(4/4\\) : (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/ShareByCircleProviderDeprecated.php" , line : 385usize , placeholders : & ["3"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/ShareByCircleProviderDeprecated.php" , line : 476usize , placeholders : & ["3"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/ShareByCircleProviderDeprecated.php" , line : 486usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ShareNotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/ShareByCircleProviderDeprecated.php" , line : 503usize , placeholders : & ["3"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/ShareByCircleProviderDeprecated.php" , line : 587usize , placeholders : & ["3"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/ShareByCircleProviderDeprecated.php" , line : 590usize , placeholders : & ["$token"] , has_meaningful_message : true , exception : None , regex : "^Opening share by token '\\#(.*)'$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/ShareByCircleProviderDeprecated.php" , line : 610usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^data is false \\- checking personal token$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/ShareByCircleProviderDeprecated.php" , line : 614usize , placeholders : & ["$token"] , has_meaningful_message : true , exception : None , regex : "^Share '\\#(.*)' not found\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/ShareByCircleProviderDeprecated.php" , line : 615usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ShareNotFound") , regex : "^Share not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/ShareByCircleProviderDeprecated.php" , line : 622usize , placeholders : & ["$token" , "json_encode($data)"] , has_meaningful_message : true , exception : None , regex : "^Share Object '\\#(.*)' not created\\. (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/ShareByCircleProviderDeprecated.php" , line : 625usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ShareNotFound") , regex : "^Share not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/ShareByCircleProviderDeprecated.php" , line : 669usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ShareNotFound") , regex : "^personal check not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/ShareByCircleProviderDeprecated.php" , line : 676usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Exception") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/ShareByCircleProviderDeprecated.php" , line : 679usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ShareNotFound") , regex : "^invalid token$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/circles/lib/ShareByCircleProviderDeprecated.php" , line : 834usize , placeholders : & ["sprintf($message, $share_src, $share->getSharedWith())"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/GlobalScale/CircleUpdate.php" , line : 67usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("GlobalScaleDSyncException") , regex : "^Member is not Owner$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/GlobalScale/FileShare.php" , line : 88usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^issue while FileShare: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/GlobalScale/FileShare.php" , line : 261usize , placeholders : & ["1"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/GlobalScale/FileShare.php" , line : 278usize , placeholders : & ["$circleName" , "$email" , "$fileName" , "$link"] , has_meaningful_message : true , exception : None , regex : "^Sending mail to circle '(.*)': (.*) file: (.*) \\- link: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/GlobalScale/FileShare.php" , line : 319usize , placeholders : & ["$circleName" , "$email"] , has_meaningful_message : true , exception : None , regex : "^Sending password mail to circle '(.*)': (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/GlobalScale/FileShare.php" , line : 450usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ShareNotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/GlobalScale/AGlobalScaleEvent.php" , line : 216usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("GlobalScaleEventException") , regex : "^GSEvent cannot be checked$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/GlobalScale/AGlobalScaleEvent.php" , line : 231usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("GlobalScaleDSyncException") , regex : "^Viewer seems DSync$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/GlobalScale/GlobalSync.php" , line : 117usize , placeholders : & ["json_encode($member)" , "json_encode($knownMember)"] , has_meaningful_message : true , exception : None , regex : "^updating member :(.*) from (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/GlobalScale/GlobalSync.php" , line : 123usize , placeholders : & ["json_encode($member)"] , has_meaningful_message : true , exception : None , regex : "^creating member :(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/GlobalScale/GlobalSync.php" , line : 141usize , placeholders : & ["json_encode($knownItem)"] , has_meaningful_message : true , exception : None , regex : "^removing deprecated member :(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/GlobalScale/GlobalSync.php" , line : 167usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("MemberDoesNotExistException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/GlobalScale/MemberAdd.php" , line : 245usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Failed to send mail about existing share (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/GlobalScale/MemberAdd.php" , line : 395usize , placeholders : & ["$email"] , has_meaningful_message : true , exception : None , regex : "^Sending password mail about existing files to '(.*)'$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/FederatedItems/CircleConfig.php" , line : 160usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("FederatedItemBadRequestException") , regex : "^Configuration value is not valid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/FederatedItems/CircleLeave.php" , line : 150usize , placeholders : & ["StatusCode::$CIRCLE_LEAVE[120]"] , has_meaningful_message : false , exception : Some ("MemberNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/FederatedItems/CircleLeave.php" , line : 155usize , placeholders : & ["StatusCode::$CIRCLE_LEAVE[121]"] , has_meaningful_message : false , exception : Some ("MemberNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/FederatedItems/CircleLeave.php" , line : 253usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("MemberNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/FederatedItems/MemberLevel.php" , line : 111usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("FederatedItemBadRequestException") , regex : "^This level cannot be edited$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/FederatedItems/MemberLevel.php" , line : 116usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("FederatedItemBadRequestException") , regex : "^invalid level$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/FederatedItems/MemberLevel.php" , line : 120usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("FederatedItemBadRequestException") , regex : "^This member already have the selected level$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/FederatedItems/CircleCreate.php" , line : 127usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("FederatedEventDSyncException") , regex : "^Circle already exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/FederatedItems/CircleCreate.php" , line : 135usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("FederatedEventDSyncException") , regex : "^Owner already exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/FederatedItems/CircleEdit.php" , line : 106usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("CircleNameTooShortException") , regex : "^Circle name is too short$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/FederatedItems/MemberDisplayName.php" , line : 108usize , placeholders : & ["StatusCode::$MEMBER_DISPLAY_NAME[120]"] , has_meaningful_message : false , exception : Some ("FederatedItemBadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/FederatedItems/SingleMemberAdd.php" , line : 326usize , placeholders : & ["StatusCode::$MEMBER_ADD[120]"] , has_meaningful_message : false , exception : Some ("FederatedItemBadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/FederatedItems/SingleMemberAdd.php" , line : 332usize , placeholders : & ["StatusCode::$MEMBER_ADD[132]"] , has_meaningful_message : false , exception : Some ("FederatedItemBadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/FederatedItems/SingleMemberAdd.php" , line : 336usize , placeholders : & ["StatusCode::$MEMBER_ADD[125]"] , has_meaningful_message : false , exception : Some ("FederatedItemBadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/FederatedItems/SingleMemberAdd.php" , line : 342usize , placeholders : & ["StatusCode::$MEMBER_ADD[131]"] , has_meaningful_message : false , exception : Some ("FederatedItemBadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/FederatedItems/SingleMemberAdd.php" , line : 346usize , placeholders : & ["StatusCode::$MEMBER_ADD[128]"] , has_meaningful_message : false , exception : Some ("FederatedItemBadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/FederatedItems/SingleMemberAdd.php" , line : 351usize , placeholders : & ["StatusCode::$MEMBER_ADD[126]"] , has_meaningful_message : false , exception : Some ("FederatedItemBadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/FederatedItems/SingleMemberAdd.php" , line : 357usize , placeholders : & ["StatusCode::$MEMBER_ADD[127]"] , has_meaningful_message : false , exception : Some ("FederatedItemBadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/FederatedItems/SingleMemberAdd.php" , line : 407usize , placeholders : & ["StatusCode::$MEMBER_ADD[123]"] , has_meaningful_message : false , exception : Some ("FederatedItemBadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/FederatedItems/SingleMemberAdd.php" , line : 411usize , placeholders : & ["StatusCode::$MEMBER_ADD[122]"] , has_meaningful_message : false , exception : Some ("FederatedItemBadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/FederatedItems/SingleMemberAdd.php" , line : 439usize , placeholders : & ["StatusCode::$MEMBER_ADD[129]"] , has_meaningful_message : false , exception : Some ("FederatedItemBadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/FederatedItems/SingleMemberAdd.php" , line : 444usize , placeholders : & ["StatusCode::$MEMBER_ADD[130]"] , has_meaningful_message : false , exception : Some ("FederatedItemBadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/FederatedItems/CircleDestroy.php" , line : 105usize , placeholders : & ["StatusCode::$CIRCLE_DESTROY[120]"] , has_meaningful_message : false , exception : Some ("FederatedItemBadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/FederatedItems/CircleJoin.php" , line : 290usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Blocked$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/FederatedItems/CircleJoin.php" , line : 293usize , placeholders : & ["StatusCode::$CIRCLE_JOIN[123]"] , has_meaningful_message : false , exception : Some ("MemberAlreadyExistsException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/FederatedItems/CircleJoin.php" , line : 304usize , placeholders : & ["StatusCode::$CIRCLE_JOIN[122]"] , has_meaningful_message : false , exception : Some ("MemberAlreadyExistsException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/FederatedItems/CircleJoin.php" , line : 307usize , placeholders : & ["StatusCode::$CIRCLE_JOIN[124]"] , has_meaningful_message : false , exception : Some ("FederatedItemBadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Api/v1/Circles.php" , line : 238usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Method is deprecated and not longer works$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/ShareByCircleProvider.php" , line : 212usize , placeholders : & ["$this->l10n->t('This item is already shared with this circle')"] , has_meaningful_message : false , exception : Some ("AlreadySharedException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/ShareByCircleProvider.php" , line : 237usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ShareNotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/circles/lib/ShareByCircleProvider.php" , line : 339usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Shares::move\\(\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/circles/lib/ShareByCircleProvider.php" , line : 377usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Shares::move\\(\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/ShareByCircleProvider.php" , line : 509usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ShareNotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/ShareByCircleProvider.php" , line : 599usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ShareNotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/ShareByCircleProvider.php" , line : 605usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ShareNotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Circles/FileSharingBroadcaster.php" , line : 139usize , placeholders : & ["1"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Circles/FileSharingBroadcaster.php" , line : 331usize , placeholders : & ["0"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Circles/FileSharingBroadcaster.php" , line : 424usize , placeholders : & ["1"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Circles/FileSharingBroadcaster.php" , line : 441usize , placeholders : & ["0"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Circles/FileSharingBroadcaster.php" , line : 482usize , placeholders : & ["0"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Circles/FileSharingBroadcaster.php" , line : 618usize , placeholders : & ["2"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Circles/FileSharingBroadcaster.php" , line : 641usize , placeholders : & ["0"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/apps/circles/lib/Circles/FileSharingBroadcaster.php" , line : 727usize , placeholders : & ["0"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/CirclesManager.php" , line : 396usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("CircleNotFoundException") , regex : "^This Circle is not managed from this instance$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Notification/Notifier.php" , line : 142usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/Notification/Notifier.php" , line : 217usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/circles/lib/Migration/ImportOwncloudCustomGroups.php" , line : 88usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Creating circles$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/circles/lib/Migration/ImportOwncloudCustomGroups.php" , line : 125usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Creating memberships$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/circles/lib/Migration/ImportOwncloudCustomGroups.php" , line : 182usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Update shares from custom groups to circles$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/lib/CirclesQueryHelper.php" , line : 104usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("FederatedUserNotFoundException") , regex : "^session not initiated$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/vendor/composer/ClassLoader.php" , line : 175usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/circles/vendor/composer/ClassLoader.php" , line : 226usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/composer/composer/ClassLoader.php" , line : 252usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/composer/composer/ClassLoader.php" , line : 307usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/composer/composer/InstalledVersions.php" , line : 161usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/composer/composer/InstalledVersions.php" , line : 182usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/composer/composer/InstalledVersions.php" , line : 203usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/composer/composer/InstalledVersions.php" , line : 224usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/composer/composer/InstalledVersions.php" , line : 241usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 315usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^Could not create non\\-existing user id$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 352usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Failed addUser attempt: User already exists\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 353usize , placeholders : & ["$this->l10nFactory->get('provisioning_api')->t('User already exists')"] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 359usize , placeholders : & ["$group"] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^group (.*) does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 362usize , placeholders : & ["$group"] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^insufficient privileges for group (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 367usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^no group specified \\(required for subadmins\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 377usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^Subadmin group does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 381usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^Cannot create subadmins for admin group$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 385usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSForbiddenException") , regex : "^No permissions to promote subadmins$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 393usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^Invalid password value$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 397usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^To send a password link to the user an email address is required\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 416usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^Required email address was not provided$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 421usize , placeholders : & ["$userid"] , has_meaningful_message : true , exception : None , regex : "^Successful addUser call with userid: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 425usize , placeholders : & ["$userid" , "$group"] , has_meaningful_message : true , exception : None , regex : "^Added userid (.*) to group (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 453usize , placeholders : & ["$email"] , has_meaningful_message : true , exception : None , regex : "^Unable to send the invitation mail to (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 466usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Failed addUser attempt with hint exception\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 473usize , placeholders : & ["$e->getHint()"] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 475usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Failed addUser attempt with ocs exeption\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 484usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Failed addUser attempt with invalid argument exeption\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 491usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 493usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Failed addUser attempt with exception\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 500usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^Bad request$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 524usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 549usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 562usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 579usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 587usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 595usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 642usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 647usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 666usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 672usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 706usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 709usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 714usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 738usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 834usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 839usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 846usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^Invalid displayname$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 858usize , placeholders : & ["$value"] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^Invalid quota value (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 865usize , placeholders : & ["$value"] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^Invalid quota value\\. (.*) is exceeding the maximum quota$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 874usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^Unlimited quota is forbidden on this instance$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 882usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^Invalid password value$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 885usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^Setting the password is not supported by the users backend$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 889usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 895usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^Invalid language$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 901usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^Invalid locale$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 912usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Cannot set primary email, because provided address is not verified$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 922usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 929usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 944usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 965usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^Invalid (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 974usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^Invalid (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 1009usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^Invalid (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 1014usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 1036usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 1040usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 1046usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 1068usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 1072usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 1078usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 1085usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 1126usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 1132usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 1153usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 1179usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 1195usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 1201usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 1204usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 1211usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 1232usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 1237usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 1242usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 1248usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 1255usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^Cannot remove yourself from the admin group$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 1259usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^Cannot remove yourself from this group as you are a SubAdmin$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 1272usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^Not viable to remove user from the last group you are SubAdmin of$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 1297usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^User does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 1301usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^Group does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 1305usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^Cannot create subadmins for admin group$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 1336usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^User does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 1340usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^Group does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 1344usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^User is not a subadmin of this group$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 1379usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 1389usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 1394usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^Email address not available$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 1401usize , placeholders : & ["$email"] , has_meaningful_message : true , exception : None , regex : "^Can't send new user mail to (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/UsersController.php" , line : 1408usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^Sending email failed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/GroupsController.php" , line : 159usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSNotFoundException") , regex : "^The requested group could not be found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/GroupsController.php" , line : 174usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSForbiddenException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/GroupsController.php" , line : 198usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^The requested group could not be found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/GroupsController.php" , line : 227usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^The requested group could not be found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/provisioning_api/lib/Controller/GroupsController.php" , line : 243usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Group name not supplied$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/GroupsController.php" , line : 244usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^Invalid group name$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/GroupsController.php" , line : 248usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^group exists$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/GroupsController.php" , line : 252usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^Not supported by backend$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/GroupsController.php" , line : 278usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^Not supported by backend$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/GroupsController.php" , line : 280usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/GroupsController.php" , line : 296usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/GroupsController.php" , line : 299usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/GroupsController.php" , line : 314usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^Group does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/AppConfigController.php" , line : 139usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^User is not logged in\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/AppConfigController.php" , line : 143usize , placeholders : & ["$this->l10n->t('Logged in user must be an administrator or have authorization to edit this setting.')"] , has_meaningful_message : false , exception : Some ("NotAdminException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/AppConfigController.php" , line : 181usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid app id given$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/AppConfigController.php" , line : 193usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given key can not be set$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/AppConfigController.php" , line : 197usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given key can not be set$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/AppConfigController.php" , line : 201usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given key can not be set$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/AppConfigController.php" , line : 208usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given key can not be set, unlimited quota is forbidden on this instance$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/AUserData.php" , line : 114usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSNotFoundException") , regex : "^User does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/AUserData.php" , line : 143usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/AUserData.php" , line : 201usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/AUserData.php" , line : 229usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSNotFoundException") , regex : "^User does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/AUserData.php" , line : 263usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^User does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/provisioning_api/lib/Controller/AUserData.php" , line : 274usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Could not load storage info for \\{user\\}$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/AppsController.php" , line : 75usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/AppsController.php" , line : 93usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^The request app was not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/AppsController.php" , line : 106usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^The request app was not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/VerificationController.php" , line : 83usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Logged in user is not mail address owner$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/VerificationController.php" , line : 102usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Logged in user is not mail address owner$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Controller/VerificationController.php" , line : 115usize , placeholders : & ["$this->l10n->t('Email was already removed from account and cannot be confirmed anymore.')"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Middleware/ProvisioningApiMiddleware.php" , line : 75usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotSubAdminException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/provisioning_api/lib/Middleware/ProvisioningApiMiddleware.php" , line : 88usize , placeholders : & ["$exception->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareController.php" , line : 361usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareController.php" , line : 365usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareController.php" , line : 375usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareController.php" , line : 422usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareController.php" , line : 625usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareController.php" , line : 725usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^Downloading more than 1 file$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareController.php" , line : 742usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^Downloading a folder$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 211usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 376usize , placeholders : & ["$this->l->t('Wrong share ID, share doesn\\'t exist')"] , has_meaningful_message : false , exception : Some ("OCSNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 388usize , placeholders : & ["$this->l->t('Wrong share ID, share doesn\\'t exist')"] , has_meaningful_message : false , exception : Some ("OCSNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 404usize , placeholders : & ["$this->l->t('Wrong share ID, share doesn\\'t exist')"] , has_meaningful_message : false , exception : Some ("OCSNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 410usize , placeholders : & ["$this->l->t('Could not delete share')"] , has_meaningful_message : false , exception : Some ("OCSNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 414usize , placeholders : & ["$this->l->t('Wrong share ID, share doesn\\'t exist')"] , has_meaningful_message : false , exception : Some ("OCSNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 425usize , placeholders : & ["$this->l->t('Could not delete share')"] , has_meaningful_message : false , exception : Some ("OCSForbiddenException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 478usize , placeholders : & ["$this->l->t('Please specify a file or folder path')"] , has_meaningful_message : false , exception : Some ("OCSNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 486usize , placeholders : & ["$this->l->t('Wrong path, file/folder does not exist')"] , has_meaningful_message : false , exception : Some ("OCSNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 503usize , placeholders : & ["$this->l->t('Could not create share')"] , has_meaningful_message : false , exception : Some ("OCSNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 507usize , placeholders : & ["$this->l->t('Invalid permissions')"] , has_meaningful_message : false , exception : Some ("OCSNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 538usize , placeholders : & ["$this->l->t('Please specify a valid user')"] , has_meaningful_message : false , exception : Some ("OCSNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 544usize , placeholders : & ["$this->l->t('Group sharing is disabled by the administrator')"] , has_meaningful_message : false , exception : Some ("OCSNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 549usize , placeholders : & ["$this->l->t('Please specify a valid group')"] , has_meaningful_message : false , exception : Some ("OCSNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 558usize , placeholders : & ["$this->l->t('Public link sharing is disabled by the administrator')"] , has_meaningful_message : false , exception : Some ("OCSNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 564usize , placeholders : & ["$this->l->t('Public upload disabled by the administrator')"] , has_meaningful_message : false , exception : Some ("OCSForbiddenException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 569usize , placeholders : & ["$this->l->t('Public upload is only possible for publicly shared folders')"] , has_meaningful_message : false , exception : Some ("OCSNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 604usize , placeholders : & ["$this->l->t('Sharing %s sending the password by Nextcloud Talk failed because Nextcloud Talk is not enabled', [$node->getPath()])"] , has_meaningful_message : false , exception : Some ("OCSForbiddenException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 616usize , placeholders : & ["$this->l->t('Invalid date, date format must be YYYY-MM-DD')"] , has_meaningful_message : false , exception : Some ("OCSNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 621usize , placeholders : & ["$this->l->t('Sharing %1$s failed because the back end does not allow shares from type %2$s', [$node->getPath(), $shareType])"] , has_meaningful_message : false , exception : Some ("OCSForbiddenException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 625usize , placeholders : & ["$this->l->t('Please specify a valid federated user ID')"] , has_meaningful_message : false , exception : Some ("OCSNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 635usize , placeholders : & ["$this->l->t('Invalid date, date format must be YYYY-MM-DD')"] , has_meaningful_message : false , exception : Some ("OCSNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 640usize , placeholders : & ["$this->l->t('Sharing %1$s failed because the back end does not allow shares from type %2$s', [$node->getPath(), $shareType])"] , has_meaningful_message : false , exception : Some ("OCSForbiddenException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 644usize , placeholders : & ["$this->l->t('Please specify a valid federated group ID')"] , has_meaningful_message : false , exception : Some ("OCSNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 654usize , placeholders : & ["$this->l->t('Invalid date, date format must be YYYY-MM-DD')"] , has_meaningful_message : false , exception : Some ("OCSNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 659usize , placeholders : & ["$this->l->t('You cannot share to a Circle if the app is not enabled')"] , has_meaningful_message : false , exception : Some ("OCSNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 666usize , placeholders : & ["$this->l->t('Please specify a valid circle')"] , has_meaningful_message : false , exception : Some ("OCSNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 674usize , placeholders : & ["$this->l->t('Sharing %s failed because the back end does not support room shares', [$node->getPath()])"] , has_meaningful_message : false , exception : Some ("OCSForbiddenException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 680usize , placeholders : & ["$this->l->t('Sharing %s failed because the back end does not support room shares', [$node->getPath()])"] , has_meaningful_message : false , exception : Some ("OCSForbiddenException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 683usize , placeholders : & ["$this->l->t('Unknown share type')"] , has_meaningful_message : false , exception : Some ("OCSBadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 697usize , placeholders : & ["$e->getHint()"] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 700usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSForbiddenException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 754usize , placeholders : & ["$this->l->t('Not a directory')"] , has_meaningful_message : false , exception : Some ("OCSBadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 837usize , placeholders : & ["$this->l->t('Wrong path, file/folder does not exist')"] , has_meaningful_message : false , exception : Some ("OCSNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 841usize , placeholders : & ["$this->l->t('Could not lock node')"] , has_meaningful_message : false , exception : Some ("OCSNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 970usize , placeholders : & ["$this->l->t('Wrong path, file/folder does not exist')"] , has_meaningful_message : false , exception : Some ("OCSNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 972usize , placeholders : & ["$this->l->t('Could not lock path')"] , has_meaningful_message : false , exception : Some ("OCSNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 976usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("SharingRightsException") , regex : "^no sharing rights on this item$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 1076usize , placeholders : & ["$this->l->t('Wrong share ID, share doesn\\'t exist')"] , has_meaningful_message : false , exception : Some ("OCSNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 1082usize , placeholders : & ["$this->l->t('Wrong share ID, share doesn\\'t exist')"] , has_meaningful_message : false , exception : Some ("OCSNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 1086usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSForbiddenException") , regex : "^You are not allowed to edit incoming shares$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 1100usize , placeholders : & ["$this->l->t('Wrong or no update parameter given')"] , has_meaningful_message : false , exception : Some ("OCSBadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 1127usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSForbiddenException") , regex : "^You are not allowed to edit link shares that you don't own$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 1151usize , placeholders : & ["$this->l->t('Share must at least have READ or CREATE permissions')"] , has_meaningful_message : false , exception : Some ("OCSBadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 1157usize , placeholders : & ["$this->l->t('Share must have READ permission if UPDATE or DELETE permission is set')"] , has_meaningful_message : false , exception : Some ("OCSBadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 1168usize , placeholders : & ["$this->l->t('Public upload disabled by the administrator')"] , has_meaningful_message : false , exception : Some ("OCSForbiddenException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 1172usize , placeholders : & ["$this->l->t('Public upload is only possible for publicly shared folders')"] , has_meaningful_message : false , exception : Some ("OCSBadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 1197usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSBadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 1210usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSBadRequestException") , regex : "^Maxmimum label length is 255$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 1217usize , placeholders : & ["$this->l->t('\"Sending the password by Nextcloud Talk\" for sharing a file or folder failed because Nextcloud Talk is not enabled.')"] , has_meaningful_message : false , exception : Some ("OCSForbiddenException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 1238usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSBadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 1248usize , placeholders : & ["$e->getHint()"] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 1250usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSBadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 1319usize , placeholders : & ["$this->l->t('Wrong share ID, share doesn\\'t exist')"] , has_meaningful_message : false , exception : Some ("OCSNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 1323usize , placeholders : & ["$this->l->t('Wrong share ID, share doesn\\'t exist')"] , has_meaningful_message : false , exception : Some ("OCSNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 1330usize , placeholders : & ["$e->getHint()"] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 1332usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSBadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 1534usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Invalid date\\. Format must be YYYY\\-MM\\-DD$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 1597usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ShareNotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 1636usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("QueryException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 1653usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("QueryException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 1714usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("SharingRightsException") , regex : "^no sharing rights on this item$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 1880usize , placeholders : & ["$attributesString"] , has_meaningful_message : true , exception : Some ("OCSBadRequestException") , regex : "^Invalid share attributes provided: \\\\\"(.*)\\\\\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 1903usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Should not happen, instanceOfStorage but getInstanceOfStorage return null$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareAPIController.php" , line : 1906usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Should not happen, instanceOfStorage but not a wrapper$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareesAPIController.php" , line : 158usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSBadRequestException") , regex : "^Invalid perPage argument$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareesAPIController.php" , line : 161usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSBadRequestException") , regex : "^Invalid page$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareesAPIController.php" , line : 169usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSBadRequestException") , regex : "^Missing itemType$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/ShareesAPIController.php" , line : 347usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSBadRequestException") , regex : "^Missing itemType$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/DeletedShareAPIController.php" , line : 117usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/DeletedShareAPIController.php" , line : 193usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSNotFoundException") , regex : "^Share not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/DeletedShareAPIController.php" , line : 197usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSNotFoundException") , regex : "^No deleted share found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/DeletedShareAPIController.php" , line : 203usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSException") , regex : "^Something went wrong$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/DeletedShareAPIController.php" , line : 220usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("QueryException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/DeletedShareAPIController.php" , line : 237usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("QueryException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/files_sharing/lib/Controller/RemoteController.php" , line : 86usize , placeholders : & ["$id"] , has_meaningful_message : true , exception : None , regex : "^Could not accept federated share with id: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/RemoteController.php" , line : 89usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSNotFoundException") , regex : "^wrong share ID, share doesn't exist\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/RemoteController.php" , line : 109usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSNotFoundException") , regex : "^wrong share ID, share doesn't exist\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/RemoteController.php" , line : 160usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSNotFoundException") , regex : "^share does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/RemoteController.php" , line : 181usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSNotFoundException") , regex : "^Share does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Controller/RemoteController.php" , line : 189usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSForbiddenException") , regex : "^Could not unshare$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Notification/Notifier.php" , line : 108usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Unhandled app or subject$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Notification/Notifier.php" , line : 117usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("AlreadyProcessedException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Notification/Notifier.php" , line : 154usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("AlreadyProcessedException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Notification/Notifier.php" , line : 158usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("AlreadyProcessedException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Notification/Notifier.php" , line : 165usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("AlreadyProcessedException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Notification/Notifier.php" , line : 170usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Temporary failure$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Notification/Notifier.php" , line : 191usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("AlreadyProcessedException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Notification/Notifier.php" , line : 196usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("AlreadyProcessedException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Notification/Notifier.php" , line : 201usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("AlreadyProcessedException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Notification/Notifier.php" , line : 206usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Temporary failure$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Notification/Notifier.php" , line : 230usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid subject$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/files_sharing/lib/Listener/ShareInteractionListener.php" , line : 71usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Share type does not allow to emit interaction event$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/files_sharing/lib/Listener/ShareInteractionListener.php" , line : 77usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Share was not created by a user, can't emit interaction event$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/files_sharing/lib/MountProvider.php" , line : 159usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Error while trying to create shared mount$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/files_sharing/lib/MountProvider.php" , line : 271usize , placeholders : & ["$share->getId()" , "$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Could not adjust share target for share (.*) to make it consistent: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Middleware/ShareInfoMiddleware.php" , line : 54usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("S2SException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Middleware/SharingCheckMiddleware.php" , line : 91usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^Sharing is disabled\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Middleware/SharingCheckMiddleware.php" , line : 96usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("S2SException") , regex : "^Federated sharing not allowed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Middleware/OCSShareAPIMiddleware.php" , line : 56usize , placeholders : & ["$this->l->t('Share API is disabled')"] , has_meaningful_message : false , exception : Some ("OCSNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/files_sharing/lib/ShareBackend/File.php" , line : 236usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^No owner found for reshare$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/files_sharing/lib/SharedMount.php" , line : 199usize , placeholders : & ["$path"] , has_meaningful_message : true , exception : None , regex : "^Can not strip userid and \"files/\" from path: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/SharedMount.php" , line : 200usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\OCA\\Files_Sharing\\Exceptions\\BrokenPath") , regex : "^Path does not start with /user/files$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Activity/Providers/PublicLinks.php" , line : 58usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Activity/Providers/PublicLinks.php" , line : 94usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Activity/Providers/RemoteShares.php" , line : 66usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Activity/Providers/RemoteShares.php" , line : 98usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Activity/Providers/RemoteShares.php" , line : 137usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Activity/Providers/Downloads.php" , line : 51usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Activity/Providers/Downloads.php" , line : 89usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Activity/Providers/Downloads.php" , line : 139usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Activity/Providers/Groups.php" , line : 85usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Activity/Providers/Groups.php" , line : 119usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Activity/Providers/Users.php" , line : 74usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Activity/Providers/Users.php" , line : 118usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Activity/Providers/Base.php" , line : 93usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/Activity/Providers/Base.php" , line : 162usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Could not generate file parameter$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/files_sharing/lib/DeleteOrphanedSharesJob.php" , line : 63usize , placeholders : & ["$deletedEntries"] , has_meaningful_message : true , exception : None , regex : "^(.*) orphaned share\\(s\\) deleted$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/External/Storage.php" , line : 226usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("StorageInvalidException") , regex : "^Remote share not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/External/Storage.php" , line : 229usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("StorageNotAvailableException") , regex : "^No nextcloud instance found at remote$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/External/Storage.php" , line : 235usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("StorageInvalidException") , regex : "^Auth error when getting remote share$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/External/Storage.php" , line : 237usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("StorageNotAvailableException") , regex : "^Failed to connect to remote instance$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/External/Storage.php" , line : 239usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("StorageNotAvailableException") , regex : "^Error while sending request to remote instance$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/External/Storage.php" , line : 325usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/External/Storage.php" , line : 340usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ForbiddenException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/External/Storage.php" , line : 343usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/External/Storage.php" , line : 348usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/lib/External/Storage.php" , line : 410usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Emergency , path : "/apps/files_sharing/lib/External/Manager.php" , line : 350usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Could not update share$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Emergency , path : "/apps/files_sharing/lib/External/Manager.php" , line : 368usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Could not create share$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Emergency , path : "/apps/files_sharing/lib/External/Manager.php" , line : 420usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Could not update share$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Emergency , path : "/apps/files_sharing/lib/External/Manager.php" , line : 440usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Could not create share$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/files_sharing/lib/External/Manager.php" , line : 609usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Mount point to remove share not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Emergency , path : "/apps/files_sharing/lib/External/Manager.php" , line : 645usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Could not update share$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Emergency , path : "/apps/files_sharing/lib/External/Manager.php" , line : 713usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Could not delete user shares$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Emergency , path : "/apps/files_sharing/lib/External/Manager.php" , line : 748usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Could not delete user shares$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Emergency , path : "/apps/files_sharing/lib/External/Manager.php" , line : 826usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Error when retrieving shares$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/composer/composer/InstalledVersions.php" , line : 161usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/composer/composer/InstalledVersions.php" , line : 182usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/composer/composer/InstalledVersions.php" , line : 203usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/composer/composer/InstalledVersions.php" , line : 224usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/composer/composer/InstalledVersions.php" , line : 241usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/composer/composer/ClassLoader.php" , line : 252usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_sharing/composer/composer/ClassLoader.php" , line : 307usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/cloud_federation_api/lib/Controller/RequestHandlerController.php" , line : 206usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/cloud_federation_api/lib/Controller/RequestHandlerController.php" , line : 295usize , placeholders : & ["$uid"] , has_meaningful_message : true , exception : None , regex : "^shareWith before, (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/cloud_federation_api/lib/Controller/RequestHandlerController.php" , line : 301usize , placeholders : & ["$uid"] , has_meaningful_message : true , exception : None , regex : "^shareWith after, (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/cloud_federation_api/composer/composer/ClassLoader.php" , line : 252usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/cloud_federation_api/composer/composer/ClassLoader.php" , line : 307usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/cloud_federation_api/composer/composer/InstalledVersions.php" , line : 161usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/cloud_federation_api/composer/composer/InstalledVersions.php" , line : 182usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/cloud_federation_api/composer/composer/InstalledVersions.php" , line : 203usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/cloud_federation_api/composer/composer/InstalledVersions.php" , line : 224usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/cloud_federation_api/composer/composer/InstalledVersions.php" , line : 241usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files/composer/composer/ClassLoader.php" , line : 252usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files/composer/composer/ClassLoader.php" , line : 307usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files/composer/composer/InstalledVersions.php" , line : 161usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files/composer/composer/InstalledVersions.php" , line : 182usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files/composer/composer/InstalledVersions.php" , line : 203usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files/composer/composer/InstalledVersions.php" , line : 224usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files/composer/composer/InstalledVersions.php" , line : 241usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/files/lib/BackgroundJob/DeleteOrphanedItems.php" , line : 116usize , placeholders : & ["$deletedEntries"] , has_meaningful_message : true , exception : None , regex : "^(.*) orphaned system tag relations deleted$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/files/lib/BackgroundJob/DeleteOrphanedItems.php" , line : 127usize , placeholders : & ["$deletedEntries"] , has_meaningful_message : true , exception : None , regex : "^(.*) orphaned user tag relations deleted$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/files/lib/BackgroundJob/DeleteOrphanedItems.php" , line : 138usize , placeholders : & ["$deletedEntries"] , has_meaningful_message : true , exception : None , regex : "^(.*) orphaned comments deleted$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/files/lib/BackgroundJob/DeleteOrphanedItems.php" , line : 149usize , placeholders : & ["$deletedEntries"] , has_meaningful_message : true , exception : None , regex : "^(.*) orphaned comment read marks deleted$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Alert , path : "/apps/files/lib/BackgroundJob/TransferOwnership.php" , line : 90usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Could not transfer ownership: Node not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Alert , path : "/apps/files/lib/BackgroundJob/TransferOwnership.php" , line : 100usize , placeholders : & ["$sourceUser"] , has_meaningful_message : true , exception : None , regex : "^Could not transfer ownership: Unknown source user (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Alert , path : "/apps/files/lib/BackgroundJob/TransferOwnership.php" , line : 106usize , placeholders : & ["$destinationUser"] , has_meaningful_message : true , exception : None , regex : "^Unknown destination user (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/files/lib/BackgroundJob/ScanFiles.php" , line : 79usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/files/lib/BackgroundJob/ScanFiles.php" , line : 121usize , placeholders : & ["$user"] , has_meaningful_message : true , exception : None , regex : "^User (.*) still has unscanned files after running background scan, background scan might be stopped prematurely$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files/lib/Notification/Notifier.php" , line : 89usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Unhandled app$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files/lib/Notification/Notifier.php" , line : 108usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Unhandled subject$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files/lib/Notification/Notifier.php" , line : 278usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Unhandled app$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files/lib/Notification/Notifier.php" , line : 308usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^User not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files/lib/Helper.php" , line : 229usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^\\$tags must be an array$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files/lib/Service/OwnershipTransferService.php" , line : 113usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("TransferOwnershipException") , regex : "^The target user is not ready to accept files\\. The user has at least to have logged in once\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files/lib/Service/OwnershipTransferService.php" , line : 147usize , placeholders : & ["$path"] , has_meaningful_message : true , exception : Some ("TransferOwnershipException") , regex : "^Unknown path provided: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files/lib/Service/OwnershipTransferService.php" , line : 156usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("TransferOwnershipException") , regex : "^Destination path does not exists or is not empty$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files/lib/Service/OwnershipTransferService.php" , line : 246usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Execution terminated\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files/lib/Service/OwnershipTransferService.php" , line : 279usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Execution terminated\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files/lib/Service/OwnershipTransferService.php" , line : 379usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("TransferOwnershipException") , regex : "^Could not transfer files\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files/lib/Activity/Helper.php" , line : 54usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^No favorites$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files/lib/Activity/Helper.php" , line : 56usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Too many favorites$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files/lib/Activity/Helper.php" , line : 77usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^No favorites$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files/lib/Activity/FavoriteProvider.php" , line : 76usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files/lib/Activity/FavoriteProvider.php" , line : 115usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files/lib/Activity/FavoriteProvider.php" , line : 145usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files/lib/Activity/Provider.php" , line : 109usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files/lib/Activity/Provider.php" , line : 163usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files/lib/Activity/Provider.php" , line : 277usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files/lib/Activity/Provider.php" , line : 393usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Could not generate file parameter$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files/lib/Activity/Provider.php" , line : 404usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidPathException") , regex : "^Path could not be split correctly$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files/lib/Activity/Provider.php" , line : 487usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^Reached the root$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files/lib/Controller/ViewController.php" , line : 428usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\OCP\\Files\\NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files/lib/Controller/ApiController.php" , line : 126usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files/lib/Controller/TemplateController.php" , line : 59usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSForbiddenException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files/lib/Controller/TemplateController.php" , line : 74usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSForbiddenException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files/lib/Command/ScanAppData.php" , line : 194usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("\\ErrorException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files/lib/Command/ScanAppData.php" , line : 273usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files/lib/Command/Scan.php" , line : 245usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("\\ErrorException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files/lib/Collaboration/Resources/ResourceProvider.php" , line : 99usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ResourceException") , regex : "^File not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/lookup_server_connector/composer/composer/InstalledVersions.php" , line : 161usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/lookup_server_connector/composer/composer/InstalledVersions.php" , line : 182usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/lookup_server_connector/composer/composer/InstalledVersions.php" , line : 203usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/lookup_server_connector/composer/composer/InstalledVersions.php" , line : 224usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/lookup_server_connector/composer/composer/InstalledVersions.php" , line : 241usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/lookup_server_connector/composer/composer/ClassLoader.php" , line : 252usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/lookup_server_connector/composer/composer/ClassLoader.php" , line : 307usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/dav/lib/BulkUpload/BulkUploadPlugin.php" , line : 75usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/dav/lib/BulkUpload/BulkUploadPlugin.php" , line : 99usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/BulkUpload/MultipartRequestParser.php" , line : 50usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^Body should be of type resource$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/BulkUpload/MultipartRequestParser.php" , line : 54usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^Content\\-Type can not be null$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/BulkUpload/MultipartRequestParser.php" , line : 75usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^Error while parsing boundary in Content\\-Type header\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/BulkUpload/MultipartRequestParser.php" , line : 86usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^Content\\-Type must be multipart/related$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/BulkUpload/MultipartRequestParser.php" , line : 90usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^Boundary is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/BulkUpload/MultipartRequestParser.php" , line : 106usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^An error occurred while checking content$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/BulkUpload/MultipartRequestParser.php" , line : 111usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Unknown error while seeking content$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/BulkUpload/MultipartRequestParser.php" , line : 161usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^Boundary not found where it should be\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/BulkUpload/MultipartRequestParser.php" , line : 179usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^An error occurred while reading headers of a part$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/BulkUpload/MultipartRequestParser.php" , line : 186usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^An error occurred while parsing headers of a part$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/BulkUpload/MultipartRequestParser.php" , line : 191usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LengthRequired") , regex : "^The Content\\-Length header must not be null\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/BulkUpload/MultipartRequestParser.php" , line : 195usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^The X\\-File\\-MD5 header must not be null\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/BulkUpload/MultipartRequestParser.php" , line : 211usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^Computed md5 hash is incorrect\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/BulkUpload/MultipartRequestParser.php" , line : 217usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Fail to read part's content\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/BulkUpload/MultipartRequestParser.php" , line : 221usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Unexpected EOF while reading stream\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Avatars/AvatarHome.php" , line : 53usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Permission denied to create a file$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Avatars/AvatarHome.php" , line : 57usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Permission denied to create a folder$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Avatars/AvatarHome.php" , line : 65usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("MethodNotAllowed") , regex : "^File format not allowed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Avatars/AvatarHome.php" , line : 68usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("MethodNotAllowed") , regex : "^Invalid image size$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Avatars/AvatarHome.php" , line : 72usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Avatars/AvatarHome.php" , line : 99usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Permission denied to delete this folder$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Avatars/AvatarHome.php" , line : 108usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Permission denied to rename this folder$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagsObjectMappingCollection.php" , line : 101usize , placeholders : & ["$tagId"] , has_meaningful_message : true , exception : Some ("PreconditionFailed") , regex : "^Tag with id (.*) does not exist, cannot assign$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagsObjectMappingCollection.php" , line : 104usize , placeholders : & ["$tagId"] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^No permission to assign tag (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagsObjectMappingCollection.php" , line : 109usize , placeholders : & ["$tagId"] , has_meaningful_message : true , exception : Some ("PreconditionFailed") , regex : "^Tag with id (.*) does not exist, cannot assign$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagsObjectMappingCollection.php" , line : 114usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Permission denied to create collections$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagsObjectMappingCollection.php" , line : 126usize , placeholders : & ["$tagName" , "$this->objectId"] , has_meaningful_message : true , exception : Some ("NotFound") , regex : "^Tag with id (.*) not present for object (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagsObjectMappingCollection.php" , line : 128usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^Invalid tag id$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagsObjectMappingCollection.php" , line : 130usize , placeholders : & ["$tagName"] , has_meaningful_message : true , exception : Some ("NotFound") , regex : "^Tag with id (.*) not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagsObjectMappingCollection.php" , line : 165usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^Invalid tag id$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagsObjectMappingCollection.php" , line : 172usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Permission denied to delete this collection$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagsObjectMappingCollection.php" , line : 180usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Permission denied to rename this collection$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagPlugin.php" , line : 168usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("UnsupportedMediaType") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagPlugin.php" , line : 172usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^Missing \"name\" attribute$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagPlugin.php" , line : 197usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^Not sufficient permissions$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagPlugin.php" , line : 208usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Conflict") , regex : "^Tag already exists$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagPlugin.php" , line : 252usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagPlugin.php" , line : 310usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagsRelationsCollection.php" , line : 92usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Permission denied to rename this collection$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagsObjectTypeCollection.php" , line : 105usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Permission denied to create nodes$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagsObjectTypeCollection.php" , line : 113usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Permission denied to create collections$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagsObjectTypeCollection.php" , line : 125usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotFound") , regex : "^Entity does not exist or is not available$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagsObjectTypeCollection.php" , line : 138usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("MethodNotAllowed") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagsObjectTypeCollection.php" , line : 152usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Permission denied to delete this collection$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagsObjectTypeCollection.php" , line : 164usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Permission denied to rename this collection$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagNode.php" , line : 108usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("MethodNotAllowed") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagNode.php" , line : 124usize , placeholders : & ["$this->tag->getId()"] , has_meaningful_message : true , exception : Some ("NotFound") , regex : "^Tag with id (.*) does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagNode.php" , line : 127usize , placeholders : & ["$this->tag->getId()"] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^No permission to update tag (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagNode.php" , line : 136usize , placeholders : & ["$this->tag->getId()"] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^No permission to update permissions for tag (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagNode.php" , line : 142usize , placeholders : & ["$this->tag->getId()"] , has_meaningful_message : true , exception : Some ("NotFound") , regex : "^Tag with id (.*) does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagNode.php" , line : 144usize , placeholders : & ["$name" , "$userVisible" , "$userAssignable"] , has_meaningful_message : true , exception : Some ("Conflict") , regex : "^Tag with the properties \"(.*)\", (.*), (.*) already exists$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagNode.php" , line : 162usize , placeholders : & ["$this->tag->getId()"] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^No permission to delete tag (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagNode.php" , line : 166usize , placeholders : & ["$this->tag->getId()"] , has_meaningful_message : true , exception : Some ("NotFound") , regex : "^Tag with id (.*) not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagNode.php" , line : 172usize , placeholders : & ["$this->tag->getId()"] , has_meaningful_message : true , exception : Some ("NotFound") , regex : "^Tag with id (.*) not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagsByIdCollection.php" , line : 90usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Cannot create tags by id$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagsByIdCollection.php" , line : 97usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Permission denied to create collections$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagsByIdCollection.php" , line : 108usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : Some ("NotFound") , regex : "^Tag with id (.*) not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagsByIdCollection.php" , line : 112usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^Invalid tag id$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagsByIdCollection.php" , line : 114usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : Some ("NotFound") , regex : "^Tag with id (.*) not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagsByIdCollection.php" , line : 142usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^Invalid tag id$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagsByIdCollection.php" , line : 149usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Permission denied to delete this collection$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagsByIdCollection.php" , line : 157usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Permission denied to rename this collection$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagMappingNode.php" , line : 142usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("MethodNotAllowed") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagMappingNode.php" , line : 159usize , placeholders : & ["$this->tag->getId()"] , has_meaningful_message : true , exception : Some ("NotFound") , regex : "^Tag with id (.*) not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagMappingNode.php" , line : 162usize , placeholders : & ["$this->tag->getId()"] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^No permission to unassign tag (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/SystemTag/SystemTagMappingNode.php" , line : 167usize , placeholders : & ["$this->tag->getId()"] , has_meaningful_message : true , exception : Some ("NotFound") , regex : "^Tag with id (.*) not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Direct/DirectFile.php" , line : 57usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Direct/DirectFile.php" , line : 87usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Direct/DirectFile.php" , line : 95usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Direct/DirectFile.php" , line : 110usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Direct/DirectHome.php" , line : 76usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Direct/DirectHome.php" , line : 80usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Direct/DirectHome.php" , line : 89usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Direct/DirectHome.php" , line : 98usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Direct/DirectHome.php" , line : 103usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("MethodNotAllowed") , regex : "^Listing members of this collection is disabled$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Direct/DirectHome.php" , line : 111usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Direct/DirectHome.php" , line : 119usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Comments/CommentsPlugin.php" , line : 162usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ReportNotSupported") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Comments/CommentsPlugin.php" , line : 225usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("UnsupportedMediaType") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Comments/CommentsPlugin.php" , line : 237usize , placeholders : & ["$actorType"] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^Invalid actor \"(.*)\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Comments/CommentsPlugin.php" , line : 247usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^Invalid input values$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Comments/CommentsPlugin.php" , line : 250usize , placeholders : & ["$msg" , "\\OCP\\Comments\\IComment::MAX_MESSAGE_LENGTH"] , has_meaningful_message : false , exception : Some ("BadRequest") , regex : "^(.*)(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Comments/EntityTypeCollection.php" , line : 73usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^\"name\" parameter must be non\\-empty string$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Comments/EntityTypeCollection.php" , line : 95usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotFound") , regex : "^Entity does not exist or is not available$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Comments/EntityTypeCollection.php" , line : 114usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("MethodNotAllowed") , regex : "^No permission to list folder contents$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Comments/RootCollection.php" , line : 94usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotAuthenticated") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Comments/RootCollection.php" , line : 122usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Cannot create comments by id$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Comments/RootCollection.php" , line : 132usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Permission denied to create collections$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Comments/RootCollection.php" , line : 150usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : Some ("NotFound") , regex : "^Entity type \"(.*)\" not found\\.\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Comments/RootCollection.php" , line : 180usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Permission denied to delete this collection$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Comments/RootCollection.php" , line : 201usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Permission denied to rename this collection$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Comments/EntityCollection.php" , line : 71usize , placeholders : & ["$property"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^\"(.*)\" parameter must be non\\-empty string$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Comments/EntityCollection.php" , line : 112usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Comments/CommentNode.php" , line : 138usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Only authors are allowed to edit their comment\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Comments/CommentNode.php" , line : 170usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("MethodNotAllowed") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Comments/CommentNode.php" , line : 200usize , placeholders : & ["$msg" , "IComment::MAX_MESSAGE_LENGTH"] , has_meaningful_message : false , exception : Some ("BadRequest") , regex : "^(.*)(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Provisioning/Apple/AppleProvisioningNode.php" , line : 53usize , placeholders : & ["self::FILENAME"] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Renaming (.*) is forbidden$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Provisioning/Apple/AppleProvisioningNode.php" , line : 67usize , placeholders : & ["self::FILENAME"] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^(.*) may not be deleted\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Provisioning/Apple/AppleProvisioningNode.php" , line : 88usize , placeholders : & ["self::FILENAME"] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^(.*)'s properties may not be altered\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/PublicAuth.php" , line : 124usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Sabre\\DAV\\Exception\\NotAuthenticated") , regex : "^Cannot authenticate over ajax calls$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/BlockLegacyClientPlugin.php" , line : 79usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Sabre\\DAV\\Exception\\Forbidden") , regex : "^Unsupported client version\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/DavAclPlugin.php" , line : 65usize , placeholders : & ["sprintf(\n\t\t\t\t\t\"%s with name '%s' could not be found\",\n\t\t\t\t\t$type,\n\t\t\t\t\t$node->getName()\n\t\t\t\t)"] , has_meaningful_message : false , exception : Some ("NotFound") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Auth.php" , line : 140usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("PasswordLoginForbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Auth.php" , line : 161usize , placeholders : & ["$class" , "$msg"] , has_meaningful_message : false , exception : Some ("ServiceUnavailable") , regex : "^(.*): (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Auth.php" , line : 220usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Sabre\\DAV\\Exception\\NotAuthenticated") , regex : "^CSRF check not passed\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Auth.php" , line : 228usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Sabre\\DAV\\Exception\\NotAuthenticated") , regex : "^2FA challenge not passed\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Auth.php" , line : 248usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Sabre\\DAV\\Exception\\NotAuthenticated") , regex : "^Cannot authenticate over ajax calls$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Principal.php" , line : 224usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Principal not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Principal.php" , line : 579usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Principal not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/ObjectTree.php" , line : 111usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Sabre\\DAV\\Exception\\ServiceUnavailable") , regex : "^filesystem not setup$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/ObjectTree.php" , line : 124usize , placeholders : & ["$ex->getMessage()"] , has_meaningful_message : false , exception : Some ("InvalidPath") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/ObjectTree.php" , line : 158usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/ObjectTree.php" , line : 161usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Sabre\\DAV\\Exception\\ServiceUnavailable") , regex : "^Storage is temporarily not available$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/ObjectTree.php" , line : 163usize , placeholders : & ["$path"] , has_meaningful_message : true , exception : Some ("\\Sabre\\DAV\\Exception\\NotFound") , regex : "^Storage (.*) is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/ObjectTree.php" , line : 165usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\Sabre\\DAV\\Exception\\Locked") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/ObjectTree.php" , line : 167usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\Sabre\\DAV\\Exception\\Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/ObjectTree.php" , line : 172usize , placeholders : & ["$path"] , has_meaningful_message : true , exception : Some ("\\Sabre\\DAV\\Exception\\NotFound") , regex : "^File with name (.*) could not be located$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/ObjectTree.php" , line : 205usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Sabre\\DAV\\Exception\\ServiceUnavailable") , regex : "^filesystem not setup$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/ObjectTree.php" , line : 216usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^No permissions to copy object\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/ObjectTree.php" , line : 226usize , placeholders : & ["$ex->getMessage()"] , has_meaningful_message : false , exception : Some ("InvalidPath") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/ObjectTree.php" , line : 232usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("\\Sabre\\DAV\\Exception\\ServiceUnavailable") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/ObjectTree.php" , line : 234usize , placeholders : & ["$ex->getMessage()"] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/ObjectTree.php" , line : 236usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("FileLocked") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/FilesReportPlugin.php" , line : 207usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^Missing filter\\-rule block in request$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/FilesReportPlugin.php" , line : 214usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("PreconditionFailed") , regex : "^Cannot filter by non\\-existing tag$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/FilesReportPlugin.php" , line : 328usize , placeholders : & ["implode(', ', $unknownTagIds)"] , has_meaningful_message : true , exception : Some ("TagNotFoundException") , regex : "^Tag with ids (.*) not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/FilesPlugin.php" , line : 227usize , placeholders : & ["$source"] , has_meaningful_message : true , exception : Some ("NotFound") , regex : "^(.*) does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/FilesPlugin.php" , line : 231usize , placeholders : & ["$source"] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^(.*) cannot be deleted$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/dav/lib/Connector/Sabre/FilesPlugin.php" , line : 466usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Inefficient fetching of metadata$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/QuotaPlugin.php" , line : 210usize , placeholders : & ["$path" , "$length" , "$freeSpace"] , has_meaningful_message : true , exception : Some ("InsufficientStorage") , regex : "^Insufficient space in (.*), (.*) required, (.*) available$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/QuotaPlugin.php" , line : 247usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("ServiceUnavailable") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/MtimeSanitizer.php" , line : 32usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^X\\-OC\\-MTime header must be an integer \\(unix timestamp\\)\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/MtimeSanitizer.php" , line : 37usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^X\\-OC\\-MTime header must be a valid positive integer$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/AppEnabledPlugin.php" , line : 85usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 142usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 145usize , placeholders : & ["$this->l10n->t('File is not updatable: %1$s', [$e->getMessage()])"] , has_meaningful_message : false , exception : Some ("ServiceUnavailable") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 179usize , placeholders : & ["$this->l10n->t('Could not write to final file, canceled by hook')"] , has_meaningful_message : false , exception : Some ("Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 204usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("FileLocked") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 265usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^\\\\OC\\\\Files\\\\Filesystem::fopen\\(\\) failed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 267usize , placeholders : & ["$this->l10n->t('Could not write file contents')"] , has_meaningful_message : false , exception : Some ("Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 279usize , placeholders : & ["$this->l10n->t(\n\t\t\t\t\t\t\t'Error while copying file to target location (copied: %1$s, expected filesize: %2$s)',\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t$this->l10n->n('%n byte', '%n bytes', $count),\n\t\t\t\t\t\t\t\t$this->l10n->n('%n byte', '%n bytes', $expected),\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t)"] , has_meaningful_message : false , exception : Some ("Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 297usize , placeholders : & ["$this->l10n->t(\n\t\t\t\t\t\t\t'Expected filesize of %1$s but read (from Nextcloud client) and wrote (to Nextcloud storage) %2$s. Could either be a network problem on the sending side or a problem writing to the storage on the server side.',\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t$this->l10n->n('%n byte', '%n bytes', $expected),\n\t\t\t\t\t\t\t\t$this->l10n->n('%n byte', '%n bytes', $count),\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t)"] , has_meaningful_message : false , exception : Some ("BadRequest") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 326usize , placeholders : & ["$this->l10n->t('Could not rename part file to final file, canceled by hook')"] , has_meaningful_message : false , exception : Some ("Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 345usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("FileLocked") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 354usize , placeholders : & ["($renameOkay ? 'true' : 'false')" , "($fileExists ? 'true' : 'false')"] , has_meaningful_message : true , exception : None , regex : "^renaming part file to final file failed \\$renameOkay: (.*), \\$fileExists: (.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 355usize , placeholders : & ["$this->l10n->t('Could not rename part file to final file')"] , has_meaningful_message : false , exception : Some ("Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 361usize , placeholders : & ["$ex->getMessage()"] , has_meaningful_message : false , exception : Some ("DAVForbiddenException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 374usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("FileLocked") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 411usize , placeholders : & ["$this->l10n->t('Failed to check file size: %1$s', [$e->getMessage()])"] , has_meaningful_message : false , exception : Some ("ServiceUnavailable") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 488usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 496usize , placeholders : & ["$this->l10n->t('Could not open file')"] , has_meaningful_message : false , exception : Some ("ServiceUnavailable") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 501usize , placeholders : & ["$this->l10n->t('Encryption not ready: %1$s', [$e->getMessage()])"] , has_meaningful_message : false , exception : Some ("ServiceUnavailable") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 503usize , placeholders : & ["$this->l10n->t('Failed to open file: %1$s', [$e->getMessage()])"] , has_meaningful_message : false , exception : Some ("ServiceUnavailable") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 505usize , placeholders : & ["$ex->getMessage()"] , has_meaningful_message : false , exception : Some ("DAVForbiddenException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 507usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("FileLocked") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 519usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 525usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 528usize , placeholders : & ["$this->l10n->t('Failed to unlink: %1$s', [$e->getMessage()])"] , has_meaningful_message : false , exception : Some ("ServiceUnavailable") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 530usize , placeholders : & ["$ex->getMessage()"] , has_meaningful_message : false , exception : Some ("DAVForbiddenException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 532usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("FileLocked") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 582usize , placeholders : & ["$this->l10n->t('Invalid chunk name')"] , has_meaningful_message : false , exception : Some ("NotImplemented") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 594usize , placeholders : & ["$this->l10n->t(\n\t\t\t\t\t\t\t'Expected filesize of %1$s but read (from Nextcloud client) and wrote (to Nextcloud storage) %2$s. Could either be a network problem on the sending side or a problem writing to the storage on the server side.',\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t$this->l10n->n('%n byte', '%n bytes', $expected),\n\t\t\t\t\t\t\t\t$this->l10n->n('%n byte', '%n bytes', $bytesWritten),\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t)"] , has_meaningful_message : false , exception : Some ("BadRequest") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 640usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^\\\\OC\\\\Files\\\\Filesystem::rename\\(\\) failed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 649usize , placeholders : & ["$this->l10n->t('Could not rename part file assembled from chunks')"] , has_meaningful_message : false , exception : Some ("Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 708usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 712usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("DAVForbiddenException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 716usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("EntityTooLarge") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 720usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("UnsupportedMediaType") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 725usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 729usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("FileLocked") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 733usize , placeholders : & ["$this->l10n->t('Encryption not ready: %1$s', [$e->getMessage()])"] , has_meaningful_message : false , exception : Some ("ServiceUnavailable") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 736usize , placeholders : & ["$this->l10n->t('Failed to write file contents: %1$s', [$e->getMessage()])"] , has_meaningful_message : false , exception : Some ("ServiceUnavailable") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 739usize , placeholders : & ["$this->l10n->t('File not found: %1$s', [$e->getMessage()])"] , has_meaningful_message : false , exception : Some ("NotFound") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/File.php" , line : 742usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("\\Sabre\\DAV\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/MaintenancePlugin.php" , line : 86usize , placeholders : & ["$this->l10n->t('System is in maintenance mode.')"] , has_meaningful_message : false , exception : Some ("ServerMaintenanceMode") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/MaintenancePlugin.php" , line : 89usize , placeholders : & ["$this->l10n->t('Upgrade needed')"] , has_meaningful_message : false , exception : Some ("ServerMaintenanceMode") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Node.php" , line : 151usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\Sabre\\DAV\\Exception\\Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Node.php" , line : 163usize , placeholders : & ["$this->path" , "$newPath"] , has_meaningful_message : true , exception : Some ("\\Sabre\\DAV\\Exception") , regex : "^Failed to rename (.*) to (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Node.php" , line : 424usize , placeholders : & ["$ex->getMessage()"] , has_meaningful_message : false , exception : Some ("InvalidPath") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/LockPlugin.php" , line : 76usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("FileLocked") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Directory.php" , line : 138usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\Sabre\\DAV\\Exception\\Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Directory.php" , line : 143usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\Sabre\\DAV\\Exception\\Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Directory.php" , line : 170usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("\\Sabre\\DAV\\Exception\\ServiceUnavailable") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Directory.php" , line : 172usize , placeholders : & ["$ex->getMessage()"] , has_meaningful_message : false , exception : Some ("InvalidPath") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Directory.php" , line : 174usize , placeholders : & ["$ex->getMessage()"] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Directory.php" , line : 176usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("FileLocked") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Directory.php" , line : 192usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\Sabre\\DAV\\Exception\\Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Directory.php" , line : 198usize , placeholders : & ["$newPath"] , has_meaningful_message : true , exception : Some ("\\Sabre\\DAV\\Exception\\Forbidden") , regex : "^Could not create directory (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Directory.php" , line : 201usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("\\Sabre\\DAV\\Exception\\ServiceUnavailable") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Directory.php" , line : 203usize , placeholders : & ["$ex->getMessage()"] , has_meaningful_message : false , exception : Some ("InvalidPath") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Directory.php" , line : 205usize , placeholders : & ["$ex->getMessage()"] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Directory.php" , line : 207usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("FileLocked") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Directory.php" , line : 224usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Directory.php" , line : 233usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("\\Sabre\\DAV\\Exception\\ServiceUnavailable") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Directory.php" , line : 235usize , placeholders : & ["$ex->getMessage()"] , has_meaningful_message : false , exception : Some ("InvalidPath") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Directory.php" , line : 237usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\Sabre\\DAV\\Exception\\Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Directory.php" , line : 242usize , placeholders : & ["$path"] , has_meaningful_message : true , exception : Some ("\\Sabre\\DAV\\Exception\\NotFound") , regex : "^File with name (.*) could not be located$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Directory.php" , line : 271usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^No read permissions$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Directory.php" , line : 275usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Locked") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Directory.php" , line : 314usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\Sabre\\DAV\\Exception\\Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Directory.php" , line : 320usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\Sabre\\DAV\\Exception\\Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Directory.php" , line : 323usize , placeholders : & ["$ex->getMessage()"] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Directory.php" , line : 325usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("FileLocked") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/dav/lib/Connector/Sabre/Directory.php" , line : 353usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^error while getting quota into$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/dav/lib/Connector/Sabre/Directory.php" , line : 356usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^error while getting quota into$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/dav/lib/Connector/Sabre/Directory.php" , line : 359usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^error while getting quota into$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Directory.php" , line : 396usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^Incompatible node types$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Directory.php" , line : 400usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ServiceUnavailable") , regex : "^filesystem not setup$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Directory.php" , line : 411usize , placeholders : & ["$sourceNode->getName()"] , has_meaningful_message : true , exception : Some ("\\Sabre\\DAV\\Exception\\Forbidden") , regex : "^Could not copy directory (.*), target exists$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Directory.php" , line : 432usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\Sabre\\DAV\\Exception\\Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Directory.php" , line : 436usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\Sabre\\DAV\\Exception\\Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Directory.php" , line : 444usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\Sabre\\DAV\\Exception\\Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Directory.php" , line : 452usize , placeholders : & ["$ex->getMessage()"] , has_meaningful_message : false , exception : Some ("InvalidPath") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Directory.php" , line : 457usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\Sabre\\DAV\\Exception\\Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Directory.php" , line : 460usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("ServiceUnavailable") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Directory.php" , line : 462usize , placeholders : & ["$ex->getMessage()"] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Directory.php" , line : 464usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("FileLocked") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Directory.php" , line : 477usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\Sabre\\DAV\\Exception\\Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Connector/Sabre/Directory.php" , line : 483usize , placeholders : & ["$ex->getMessage()"] , has_meaningful_message : false , exception : Some ("InvalidPath") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/dav/lib/Listener/ActivityUpdaterListener.php" , line : 67usize , placeholders : & ["sprintf('Activity generated for new calendar %d', $event->getCalendarId())"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/dav/lib/Listener/ActivityUpdaterListener.php" , line : 72usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Error generating activities for a new calendar: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/dav/lib/Listener/ActivityUpdaterListener.php" , line : 84usize , placeholders : & ["sprintf('Activity generated for changed calendar %d', $event->getCalendarId())"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/dav/lib/Listener/ActivityUpdaterListener.php" , line : 89usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Error generating activities for changed calendar: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/dav/lib/Listener/ActivityUpdaterListener.php" , line : 100usize , placeholders : & ["sprintf('Activity generated for changed calendar %d', $event->getCalendarId())"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/dav/lib/Listener/ActivityUpdaterListener.php" , line : 105usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Error generating activities for changed calendar: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/dav/lib/Listener/ActivityUpdaterListener.php" , line : 116usize , placeholders : & ["sprintf('Activity generated for changed calendar %d', $event->getCalendarId())"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/dav/lib/Listener/ActivityUpdaterListener.php" , line : 121usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Error generating activities for changed calendar: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/dav/lib/Listener/ActivityUpdaterListener.php" , line : 129usize , placeholders : & ["sprintf('Calendar %d was already in trashbin, skipping deletion activity', $event->getCalendarId())"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/dav/lib/Listener/ActivityUpdaterListener.php" , line : 138usize , placeholders : & ["sprintf('Activity generated for deleted calendar %d', $event->getCalendarId())"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/dav/lib/Listener/ActivityUpdaterListener.php" , line : 144usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Error generating activities for a deleted calendar: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/dav/lib/Listener/ActivityUpdaterListener.php" , line : 157usize , placeholders : & ["sprintf('Activity generated for new calendar object in calendar %d', $event->getCalendarId())"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/dav/lib/Listener/ActivityUpdaterListener.php" , line : 162usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Error generating activity for a new calendar object: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/dav/lib/Listener/ActivityUpdaterListener.php" , line : 175usize , placeholders : & ["sprintf('Activity generated for deleted calendar object %d', $event->getCalendarId())"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/dav/lib/Listener/ActivityUpdaterListener.php" , line : 180usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Error generating activity for a deleted calendar object: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/dav/lib/Listener/ActivityUpdaterListener.php" , line : 193usize , placeholders : & ["sprintf('Activity generated for a calendar object of calendar %d that is moved to trash', $event->getCalendarId())"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/dav/lib/Listener/ActivityUpdaterListener.php" , line : 198usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Error generating activity for a new calendar object: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/dav/lib/Listener/ActivityUpdaterListener.php" , line : 211usize , placeholders : & ["sprintf('Activity generated for a restore calendar object of calendar %d', $event->getCalendarId())"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/dav/lib/Listener/ActivityUpdaterListener.php" , line : 216usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Error generating activity for a restored calendar object: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/dav/lib/Listener/ActivityUpdaterListener.php" , line : 224usize , placeholders : & ["sprintf('Calendar object in calendar %d was already in trashbin, skipping deletion activity', $event->getCalendarId())"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/dav/lib/Listener/ActivityUpdaterListener.php" , line : 235usize , placeholders : & ["sprintf('Activity generated for deleted calendar object in calendar %d', $event->getCalendarId())"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/dav/lib/Listener/ActivityUpdaterListener.php" , line : 241usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Error generating activity for a deleted calendar object: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/dav/lib/Listener/CardListener.php" , line : 62usize , placeholders : & ["sprintf('Activity generated for a new card in addressbook %d', $event->getAddressBookId())"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/dav/lib/Listener/CardListener.php" , line : 67usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Error generating activities for a new card in addressbook: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/dav/lib/Listener/CardListener.php" , line : 80usize , placeholders : & ["sprintf('Activity generated for a changed card in addressbook %d', $event->getAddressBookId())"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/dav/lib/Listener/CardListener.php" , line : 85usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Error generating activities for a changed card in addressbook: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/dav/lib/Listener/CardListener.php" , line : 98usize , placeholders : & ["sprintf('Activity generated for a deleted card in addressbook %d', $event->getAddressBookId())"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/dav/lib/Listener/CardListener.php" , line : 103usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Error generating activities for a deleted card in addressbook: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/dav/lib/Listener/AddressbookListener.php" , line : 59usize , placeholders : & ["sprintf('Activity generated for new addressbook %d', $event->getAddressBookId())"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/dav/lib/Listener/AddressbookListener.php" , line : 64usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Error generating activities for a new addressbook: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/dav/lib/Listener/AddressbookListener.php" , line : 76usize , placeholders : & ["sprintf('Activity generated for changed addressbook %d', $event->getAddressBookId())"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/dav/lib/Listener/AddressbookListener.php" , line : 81usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Error generating activities for a changed addressbook: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/dav/lib/Listener/AddressbookListener.php" , line : 92usize , placeholders : & ["sprintf('Activity generated for deleted addressbook %d', $event->getAddressBookId())"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/dav/lib/Listener/AddressbookListener.php" , line : 97usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Error generating activities for a deleted addressbook: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/dav/lib/Listener/AddressbookListener.php" , line : 110usize , placeholders : & ["sprintf('Activity generated for (un)sharing addressbook %d', $event->getAddressBookId())"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/dav/lib/Listener/AddressbookListener.php" , line : 115usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Error generating activities for \\(un\\)sharing addressbook: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/dav/lib/Listener/CalendarDeletionDefaultUpdaterListener.php" , line : 65usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Default calendar needs no update because the deleted calendar does not belong to a user principal$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/dav/lib/Listener/CalendarDeletionDefaultUpdaterListener.php" , line : 72usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Default calendar needs no update because the deleted calendar is no the user's default one$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/dav/lib/Listener/CalendarDeletionDefaultUpdaterListener.php" , line : 78usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Default user calendar reset$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/dav/lib/Listener/CalendarDeletionDefaultUpdaterListener.php" , line : 81usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Error generating activities for a deleted calendar: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/dav/lib/Listener/CalendarContactInteractionListener.php" , line : 104usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Could not read calendar data for interaction events: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/dav/lib/Listener/CalendarObjectReminderUpdaterListener.php" , line : 76usize , placeholders : & ["sprintf('Reminders of calendar %d cleaned up after move into trashbin', $event->getCalendarId())"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/dav/lib/Listener/CalendarObjectReminderUpdaterListener.php" , line : 81usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Error cleaning up reminders of a calendar moved into trashbin: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/dav/lib/Listener/CalendarObjectReminderUpdaterListener.php" , line : 91usize , placeholders : & ["sprintf('Reminders of calendar %d cleaned up', $event->getCalendarId())"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/dav/lib/Listener/CalendarObjectReminderUpdaterListener.php" , line : 96usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Error cleaning up reminders of a deleted calendar: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/dav/lib/Listener/CalendarObjectReminderUpdaterListener.php" , line : 103usize , placeholders : & ["sprintf('Restoring calendar reminder objects for %d items', count($objects))"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/dav/lib/Listener/CalendarObjectReminderUpdaterListener.php" , line : 112usize , placeholders : & ["sprintf('Reminders of calendar %d restored', $event->getCalendarId())"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/dav/lib/Listener/CalendarObjectReminderUpdaterListener.php" , line : 117usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Error restoring reminders of a calendar: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/dav/lib/Listener/CalendarObjectReminderUpdaterListener.php" , line : 127usize , placeholders : & ["sprintf('Reminders of calendar object of calendar %d created', $event->getCalendarId())"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/dav/lib/Listener/CalendarObjectReminderUpdaterListener.php" , line : 132usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Error creating reminders of a calendar object: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/dav/lib/Listener/CalendarObjectReminderUpdaterListener.php" , line : 142usize , placeholders : & ["sprintf('Reminders of calendar object of calendar %d cleaned up', $event->getCalendarId())"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/dav/lib/Listener/CalendarObjectReminderUpdaterListener.php" , line : 147usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Error cleaning up reminders of a calendar object: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/dav/lib/Listener/CalendarObjectReminderUpdaterListener.php" , line : 157usize , placeholders : & ["sprintf('Reminders of restored calendar object of calendar %d deleted', $event->getCalendarId())"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/dav/lib/Listener/CalendarObjectReminderUpdaterListener.php" , line : 162usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Error deleting reminders of a calendar object: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/dav/lib/Listener/CalendarObjectReminderUpdaterListener.php" , line : 172usize , placeholders : & ["sprintf('Reminders of restored calendar object of calendar %d restored', $event->getCalendarId())"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/dav/lib/Listener/CalendarObjectReminderUpdaterListener.php" , line : 177usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Error restoring reminders of a calendar object: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/dav/lib/Listener/CalendarObjectReminderUpdaterListener.php" , line : 187usize , placeholders : & ["sprintf('Reminders of calendar object of calendar %d cleaned up', $event->getCalendarId())"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/dav/lib/Listener/CalendarObjectReminderUpdaterListener.php" , line : 192usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Error cleaning up reminders of a deleted calendar object: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/UserMigration/CalendarMigrator.php" , line : 130usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidCalendarException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/UserMigration/CalendarMigrator.php" , line : 156usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidCalendarException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/UserMigration/CalendarMigrator.php" , line : 193usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("CalendarMigratorException") , regex : "^Failed to get unique calendar URI$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/UserMigration/CalendarMigrator.php" , line : 261usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("CalendarMigratorException") , regex : "^Could not export calendars$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/UserMigration/CalendarMigrator.php" , line : 357usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidCalendarException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/UserMigration/CalendarMigrator.php" , line : 460usize , placeholders : & ["$importPath"] , has_meaningful_message : true , exception : Some ("CalendarMigratorException") , regex : "^Failed to read file \"(.*)\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/UserMigration/CalendarMigrator.php" , line : 465usize , placeholders : & ["$importPath"] , has_meaningful_message : true , exception : Some ("CalendarMigratorException") , regex : "^Invalid calendar data contained in \"(.*)\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/UserMigration/CalendarMigrator.php" , line : 470usize , placeholders : & ["$filename" , "CalendarMigrator::FILENAME_EXT"] , has_meaningful_message : true , exception : Some ("CalendarMigratorException") , regex : "^Invalid filename \"(.*)\", expected filename of the format \"<calendar_name>(.*)\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/UserMigration/ContactsMigrator.php" , line : 100usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidAddressBookException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/UserMigration/ContactsMigrator.php" , line : 135usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidAddressBookException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/UserMigration/ContactsMigrator.php" , line : 173usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ContactsMigratorException") , regex : "^Failed to get unique address book URI$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/UserMigration/ContactsMigrator.php" , line : 254usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("CalendarMigratorException") , regex : "^Could not export address book$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/UserMigration/ContactsMigrator.php" , line : 310usize , placeholders : & ["ContactsMigrator::PATH_ROOT"] , has_meaningful_message : true , exception : Some ("ContactsMigratorException") , regex : "^Failed to sort address book files in (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/UserMigration/ContactsMigrator.php" , line : 314usize , placeholders : & ["ContactsMigrator::FILENAME_EXT" , "ContactsMigrator::METADATA_EXT"] , has_meaningful_message : true , exception : Some ("ContactsMigratorException") , regex : "^Each (.*) file must have a corresponding (.*) file$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/UserMigration/ContactsMigrator.php" , line : 319usize , placeholders : & ["ContactsMigrator::FILENAME_EXT" , "ContactsMigrator::METADATA_EXT"] , has_meaningful_message : true , exception : Some ("ContactsMigratorException") , regex : "^Each (.*) file must have a corresponding (.*) file$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/UserMigration/ContactsMigrator.php" , line : 372usize , placeholders : & ["$addressBookFilename" , "ContactsMigrator::FILENAME_EXT"] , has_meaningful_message : true , exception : Some ("ContactsMigratorException") , regex : "^Invalid filename \"(.*)\", expected filename of the format \"<address_book_name>\\.(.*)\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/AppInfo/PluginManager.php" , line : 263usize , placeholders : & ["$className"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Could not load (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/AppInfo/PluginManager.php" , line : 276usize , placeholders : & ["$className" , "ServerPlugin::class"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Sabre server plugin (.*) does not implement the (.*) interface$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/AppInfo/PluginManager.php" , line : 290usize , placeholders : & ["$className" , "Collection::class"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Sabre collection plugin (.*) does not implement the (.*) interface$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/AppInfo/PluginManager.php" , line : 304usize , placeholders : & ["$className" , "IAddressBookProvider::class"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Sabre address book plugin class (.*) does not implement the (.*) interface$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/AppInfo/PluginManager.php" , line : 318usize , placeholders : & ["$className" , "ICalendarProvider::class"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Sabre calendar plugin class (.*) does not implement the (.*) interface$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/dav/lib/CalDAV/Schedule/IMipPlugin.php" , line : 305usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Unable to deliver message to \\{failed\\}$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Integration/ExternalCalendar.php" , line : 84usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\MethodNotAllowed") , regex : "^Renaming calendars is not yet supported$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Integration/ExternalCalendar.php" , line : 91usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\MethodNotAllowed") , regex : "^Creating collections in calendar objects is not allowed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Integration/ExternalCalendar.php" , line : 115usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Provided calendar uri was not app\\-generated$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/PublicCalendar.php" , line : 40usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotFound") , regex : "^Calendar object not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/PublicCalendar.php" , line : 43usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotFound") , regex : "^Calendar object not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Calendar.php" , line : 119usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Calendar.php" , line : 274usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Calendar.php" , line : 310usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotFound") , regex : "^Calendar object not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Calendar.php" , line : 314usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotFound") , regex : "^Calendar object not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Calendar.php" , line : 420usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("UnsupportedLimitOnInitialSyncException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/dav/lib/CalDAV/Calendar.php" , line : 448usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Could not move calendar object: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/CalendarImpl.php" , line : 157usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("CalendarException") , regex : "^Could not write to calendar as URI parameter is missing$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/CalendarImpl.php" , line : 175usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : Some ("CalendarException") , regex : "^Could not create new calendar event: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/CachedSubscription.php" , line : 134usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotFound") , regex : "^Calendar object not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/CachedSubscription.php" , line : 177usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("MethodNotAllowed") , regex : "^Creating objects in cached subscription is not allowed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/CachedSubscription.php" , line : 206usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("UnsupportedLimitOnInitialSyncException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/CalDavBackend.php" , line : 634usize , placeholders : & ["$uri"] , has_meaningful_message : true , exception : Some ("NotFound") , regex : "^Node with name '(.*)' could not be found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/CalDavBackend.php" , line : 818usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("CalendarException") , regex : "^URI too long\\. Calendar not created$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/CalDavBackend.php" , line : 834usize , placeholders : & ["$sccs"] , has_meaningful_message : true , exception : Some ("DAV\\Exception") , regex : "^The (.*) property must be of type: \\\\Sabre\\\\CalDAV\\\\Property\\\\SupportedCalendarComponentSet$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/CalDavBackend.php" , line : 995usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^Calendar data that was just written can't be read back\\. Check your database configuration\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/CalDavBackend.php" , line : 1274usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^Calendar object with uid already exists in this calendar collection\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/CalDavBackend.php" , line : 1288usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^Deleted calendar object with uid already exists in this calendar collection\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/CalDavBackend.php" , line : 1460usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/CalDavBackend.php" , line : 1533usize , placeholders : & ["$newUri" , "$calendarId"] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^A calendar object with URI (.*) already exists in calendar (.*), therefore this object can't be moved into the trashbin$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/CalDavBackend.php" , line : 1576usize , placeholders : & ["$id" , "$restoreUri"] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Can not restore calendar (.*) because a calendar object with the URI (.*) already exists$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/CalDavBackend.php" , line : 1603usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^Calendar object data that was just written can't be read back\\. Check your database configuration\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/CalDavBackend.php" , line : 2485usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^The \\{http://calendarserver\\.org/ns/\\}source property is required when creating subscriptions$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/CalDavBackend.php" , line : 2817usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^Calendar objects must have a VJOURNAL, VEVENT or VTODO component$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/CalDavBackend.php" , line : 3186usize , placeholders : & ["$uri"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Calendarobject does not exists: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Trashbin/DeletedCalendarObjectsCollection.php" , line : 57usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotImplemented") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Trashbin/DeletedCalendarObjectsCollection.php" , line : 62usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Trashbin/DeletedCalendarObjectsCollection.php" , line : 72usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Trashbin/DeletedCalendarObjectsCollection.php" , line : 75usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^The calendar object you're trying to restore is not marked as deleted$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Trashbin/DeletedCalendarObjectsCollection.php" , line : 87usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Trashbin/DeletedCalendarObjectsCollection.php" , line : 91usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Trashbin/DeletedCalendarObjectsCollection.php" , line : 105usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Trashbin/DeletedCalendarObjectsCollection.php" , line : 113usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Trashbin/RestoreTarget.php" , line : 39usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Trashbin/RestoreTarget.php" , line : 43usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Trashbin/RestoreTarget.php" , line : 47usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Trashbin/RestoreTarget.php" , line : 68usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Trashbin/RestoreTarget.php" , line : 76usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Trashbin/TrashbinHome.php" , line : 63usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Permission denied to create files in the trashbin$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Trashbin/TrashbinHome.php" , line : 67usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Permission denied to create a directory in the trashbin$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Trashbin/TrashbinHome.php" , line : 81usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Trashbin/TrashbinHome.php" , line : 102usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Permission denied to delete the trashbin$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Trashbin/TrashbinHome.php" , line : 110usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Permission denied to rename the trashbin$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Trashbin/TrashbinHome.php" , line : 118usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Trashbin/DeletedCalendarObject.php" , line : 74usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Trashbin/DeletedCalendarObject.php" , line : 82usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/dav/lib/CalDAV/WebcalCaching/RefreshWebcalService.php" , line : 160usize , placeholders : & ["$subscriptionId"] , has_meaningful_message : true , exception : None , regex : "^Subscription (.*) could not be refreshed due to a parsing error$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/dav/lib/CalDAV/WebcalCaching/RefreshWebcalService.php" , line : 255usize , placeholders : & ["$subscriptionId"] , has_meaningful_message : true , exception : None , regex : "^Subscription (.*) could not be parsed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/dav/lib/CalDAV/WebcalCaching/RefreshWebcalService.php" , line : 265usize , placeholders : & ["$subscriptionId"] , has_meaningful_message : true , exception : None , regex : "^Subscription (.*) could not be parsed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/dav/lib/CalDAV/WebcalCaching/RefreshWebcalService.php" , line : 276usize , placeholders : & ["$subscriptionId"] , has_meaningful_message : true , exception : None , regex : "^Subscription (.*) could not be parsed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Search/Xml/Filter/LimitFilter.php" , line : 43usize , placeholders : & ["SearchPlugin::NS_Nextcloud"] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^The \\{(.*)\\}limit has illegal value$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Search/Xml/Filter/CompFilter.php" , line : 46usize , placeholders : & ["SearchPlugin::NS_Nextcloud"] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^The \\{(.*)\\}comp\\-filter requires a valid name attribute$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Search/Xml/Filter/PropFilter.php" , line : 46usize , placeholders : & ["SearchPlugin::NS_Nextcloud"] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^The \\{(.*)\\}prop\\-filter requires a valid name attribute$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Search/Xml/Filter/ParamFilter.php" , line : 47usize , placeholders : & ["SearchPlugin::NS_Nextcloud"] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^The \\{(.*)\\}param\\-filter requires a valid property attribute$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Search/Xml/Filter/ParamFilter.php" , line : 50usize , placeholders : & ["SearchPlugin::NS_Nextcloud"] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^The \\{(.*)\\}param\\-filter requires a valid parameter attribute$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Search/Xml/Filter/SearchTermFilter.php" , line : 42usize , placeholders : & ["SearchPlugin::NS_Nextcloud"] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^The \\{(.*)\\}search\\-term has illegal value$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Search/Xml/Filter/OffsetFilter.php" , line : 43usize , placeholders : & ["SearchPlugin::NS_Nextcloud"] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^The \\{(.*)\\}offset has illegal value$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Search/Xml/Request/CalendarSearchReport.php" , line : 147usize , placeholders : & ["SearchPlugin::NS_Nextcloud"] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^The \\{(.*)\\}filter element is required for this request$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Search/Xml/Request/CalendarSearchReport.php" , line : 153usize , placeholders : & ["SearchPlugin::NS_Nextcloud" , "SearchPlugin::NS_Nextcloud" , "SearchPlugin::NS_Nextcloud"] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^\\{(.*)\\}prop\\-filter or \\{(.*)\\}param\\-filter given without any \\{(.*)\\}comp\\-filter$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Search/Xml/Request/CalendarSearchReport.php" , line : 157usize , placeholders : & ["SearchPlugin::NS_Nextcloud"] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^\\{(.*)\\}search\\-term is required for this request$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Search/Xml/Request/CalendarSearchReport.php" , line : 161usize , placeholders : & ["SearchPlugin::NS_Nextcloud" , "SearchPlugin::NS_Nextcloud"] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^At least one\\{(.*)\\}prop\\-filter or \\{(.*)\\}param\\-filter is required for this request$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Activity/Provider/Todo.php" , line : 41usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Activity/Provider/Todo.php" , line : 73usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Activity/Provider/Todo.php" , line : 144usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Activity/Provider/Calendar.php" , line : 88usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Activity/Provider/Calendar.php" , line : 146usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Activity/Provider/Calendar.php" , line : 275usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Activity/Provider/Event.php" , line : 85usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Activity/Provider/Event.php" , line : 125usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Activity/Provider/Event.php" , line : 157usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Activity/Provider/Event.php" , line : 224usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/dav/lib/CalDAV/ICSExportPlugin/ICSExportPlugin.php" , line : 81usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Invalid refresh interval for exported calendar, falling back to default value \\.\\.\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/CachedSubscriptionObject.php" , line : 57usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("MethodNotAllowed") , regex : "^Creating objects in a cached subscription is not allowed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/CachedSubscriptionObject.php" , line : 64usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("MethodNotAllowed") , regex : "^Deleting objects in a cached subscription is not allowed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/dav/lib/CalDAV/ResourceBooking/AbstractPrincipalBackend.php" , line : 419usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Could not search resources: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/dav/lib/CalDAV/ResourceBooking/AbstractPrincipalBackend.php" , line : 537usize , placeholders : & ["$this->dbTableName" , "$row['id']"] , has_meaningful_message : true , exception : None , regex : "^group_restrictions field could not be parsed for (.*)::(.*), denying access to resource$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/CalendarHome.php" , line : 90usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("MethodNotAllowed") , regex : "^The resource you tried to create has a reserved name$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/CalendarHome.php" , line : 196usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : Some ("NotFound") , regex : "^Node with name '(.*)' could not be found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Reminder/ReminderService.php" , line : 794usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\TypeError") , regex : "^Multiple master objects$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/dav/lib/CalDAV/Reminder/NotificationProvider/EmailProvider.php" , line : 130usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Email address \\{address\\} for reminder notification is incorrect$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/dav/lib/CalDAV/Reminder/NotificationProvider/EmailProvider.php" , line : 145usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Unable to deliver message to \\{failed\\}$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Reminder/Notifier.php" , line : 107usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Notification not from this app$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Reminder/Notifier.php" , line : 119usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Unknown subject$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Reminder/Notifier.php" , line : 229usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("AlreadyProcessedException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Reminder/NotificationProviderManager.php" , line : 64usize , placeholders : & ["$type"] , has_meaningful_message : false , exception : Some ("NotificationProvider\\ProviderNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Reminder/NotificationProviderManager.php" , line : 66usize , placeholders : & ["$type"] , has_meaningful_message : false , exception : Some ("NotificationTypeDoesNotExistException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CalDAV/Reminder/NotificationProviderManager.php" , line : 79usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid notification provider registered$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/dav/lib/Migration/RemoveClassifiedEventActivity.php" , line : 61usize , placeholders : & ["$deletedEvents"] , has_meaningful_message : true , exception : None , regex : "^Removed (.*) activity entries$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/dav/lib/Migration/FixBirthdayCalendarComponent.php" , line : 60usize , placeholders : & ["$updated"] , has_meaningful_message : true , exception : None , regex : "^(.*) birthday calendars updated\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/dav/lib/Migration/BuildCalendarSearchIndexBackgroundJob.php" , line : 73usize , placeholders : & ["$offset" , "$stopAt"] , has_meaningful_message : true , exception : None , regex : "^Building calendar index \\((.*)/(.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/dav/lib/Migration/BuildCalendarSearchIndexBackgroundJob.php" , line : 84usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Building calendar index done$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/dav/lib/Migration/BuildCalendarSearchIndexBackgroundJob.php" , line : 90usize , placeholders : & ["$offset"] , has_meaningful_message : true , exception : None , regex : "^New building calendar index job scheduled with offset (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/dav/lib/Migration/BuildCalendarSearchIndex.php" , line : 72usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Repair step already executed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/dav/lib/Migration/BuildCalendarSearchIndex.php" , line : 83usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Add background job$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/dav/lib/Migration/RegisterBuildReminderIndexBackgroundJob.php" , line : 83usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Repair step already executed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/dav/lib/Migration/RegisterBuildReminderIndexBackgroundJob.php" , line : 94usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Add background job$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/dav/lib/Migration/BuildSocialSearchIndex.php" , line : 69usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Repair step already executed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/dav/lib/Migration/BuildSocialSearchIndex.php" , line : 83usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Add background job$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/dav/lib/Migration/RemoveOrphanEventsAndContacts.php" , line : 57usize , placeholders : & ["sprintf('%d events without a calendar have been cleaned up', $orphanItems)"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/dav/lib/Migration/RemoveOrphanEventsAndContacts.php" , line : 59usize , placeholders : & ["sprintf('%d properties without an events have been cleaned up', $orphanItems)"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/dav/lib/Migration/RemoveOrphanEventsAndContacts.php" , line : 61usize , placeholders : & ["sprintf('%d changes without a calendar have been cleaned up', $orphanItems)"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/dav/lib/Migration/RemoveOrphanEventsAndContacts.php" , line : 64usize , placeholders : & ["sprintf('%d cached events without a calendar subscription have been cleaned up', $orphanItems)"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/dav/lib/Migration/RemoveOrphanEventsAndContacts.php" , line : 66usize , placeholders : & ["sprintf('%d changes without a calendar subscription have been cleaned up', $orphanItems)"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/dav/lib/Migration/RemoveOrphanEventsAndContacts.php" , line : 69usize , placeholders : & ["sprintf('%d contacts without an addressbook have been cleaned up', $orphanItems)"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/dav/lib/Migration/RemoveOrphanEventsAndContacts.php" , line : 71usize , placeholders : & ["sprintf('%d properties without a contact have been cleaned up', $orphanItems)"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/dav/lib/Migration/RemoveOrphanEventsAndContacts.php" , line : 73usize , placeholders : & ["sprintf('%d changes without an addressbook have been cleaned up', $orphanItems)"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/dav/lib/Migration/CalDAVRemoveEmptyValue.php" , line : 79usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Calendar object for calendar \\{cal\\} with uri \\{uri\\} still invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/dav/lib/Migration/CalDAVRemoveEmptyValue.php" , line : 95usize , placeholders : & ["sprintf('%d events could not be updated, see log file for more information', $warnings)"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/dav/lib/Migration/CalDAVRemoveEmptyValue.php" , line : 98usize , placeholders : & ["sprintf('Updated %d events', $count)"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/dav/lib/Migration/BuildSocialSearchIndexBackgroundJob.php" , line : 72usize , placeholders : & ["$offset" , "$stopAt"] , has_meaningful_message : true , exception : None , regex : "^Indexing social profile data \\((.*)/(.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/dav/lib/Migration/BuildSocialSearchIndexBackgroundJob.php" , line : 77usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^All contacts with social profiles indexed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/dav/lib/Migration/BuildSocialSearchIndexBackgroundJob.php" , line : 83usize , placeholders : & ["$offset"] , has_meaningful_message : true , exception : None , regex : "^New social profile indexing job scheduled with offset (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/dav/lib/Migration/RemoveDeletedUsersCalendarSubscriptions.php" , line : 78usize , placeholders : & ["sprintf('%d calendar subscriptions without an user have been cleaned up', count($this->orphanSubscriptionIds))"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/dav/lib/Migration/RegenerateBirthdayCalendars.php" , line : 63usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Repair step already executed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/dav/lib/Migration/RegenerateBirthdayCalendars.php" , line : 67usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Adding background jobs to regenerate birthday calendar$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/dav/lib/Migration/ChunkCleanup.php" , line : 67usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Cleanup not required$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/dav/lib/Migration/RefreshWebcalJobRegistrar.php" , line : 83usize , placeholders : & ["$count"] , has_meaningful_message : true , exception : None , regex : "^Added (.*) background jobs to update webcal calendars$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/dav/lib/BackgroundJob/RefreshWebcalJob.php" , line : 99usize , placeholders : & ["$subscriptionId"] , has_meaningful_message : true , exception : None , regex : "^Subscription (.*) could not be refreshed, refreshrate in database is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/dav/lib/BackgroundJob/BuildReminderIndexBackgroundJob.php" , line : 88usize , placeholders : & ["$offset" , "$stopAt"] , has_meaningful_message : true , exception : None , regex : "^Building calendar reminder index \\((.*)/(.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/dav/lib/BackgroundJob/BuildReminderIndexBackgroundJob.php" , line : 93usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Building calendar reminder index done$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/dav/lib/BackgroundJob/BuildReminderIndexBackgroundJob.php" , line : 99usize , placeholders : & ["$offset"] , has_meaningful_message : true , exception : None , regex : "^Scheduled a new BuildReminderIndexBackgroundJob with offset (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Traits/PrincipalProxyTrait.php" , line : 51usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Principal not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Traits/PrincipalProxyTrait.php" , line : 86usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Principal not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Traits/PrincipalProxyTrait.php" , line : 117usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Setting members of the group is not supported yet$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Traits/PrincipalProxyTrait.php" , line : 122usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Principal not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Traits/PrincipalProxyTrait.php" , line : 137usize , placeholders : & ["$prefix"] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Invalid member group prefix: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Traits/PrincipalProxyTrait.php" , line : 142usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Principal not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/DAV/GroupPrincipalBackend.php" , line : 172usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Setting members of the group is not supported yet$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/DAV/ViewOnlyPlugin.php" , line : 100usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Access to this resource has been denied because it is in view\\-only mode\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/DAV/SystemPrincipalBackend.php" , line : 151usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Sabre\\DAV\\Exception") , regex : "^Principal not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/DAV/SystemPrincipalBackend.php" , line : 169usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Sabre\\DAV\\Exception") , regex : "^Principal not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/DAV/SystemPrincipalBackend.php" , line : 187usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Sabre\\DAV\\Exception") , regex : "^Setting members of the group is not supported yet$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Files/Sharing/FilesDropPlugin.php" , line : 75usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("MethodNotAllowed") , regex : "^Only PUT is allowed on files drop$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Files/Sharing/PublicLinkCheckPlugin.php" , line : 62usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Files/FileSearchBackend.php" , line : 174usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Searching more than one folder is not supported$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Files/FileSearchBackend.php" , line : 179usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Using uri's as scope is not supported, please use a path relative to the search arbiter instead$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Files/FileSearchBackend.php" , line : 183usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Search is only supported on directories$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Files/FileSearchBackend.php" , line : 314usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid search value for '\\{http://owncloud\\.org/ns\\}owner\\-id', only the current user id is allowed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Files/FileSearchBackend.php" , line : 355usize , placeholders : & ["$trimmedType"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid number of arguments for (.*) operation$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Files/FileSearchBackend.php" , line : 358usize , placeholders : & ["$trimmedType"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid argument 1 for (.*) operation, expected property$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Files/FileSearchBackend.php" , line : 361usize , placeholders : & ["$trimmedType"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid argument 2 for (.*) operation, expected literal$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Files/FileSearchBackend.php" , line : 367usize , placeholders : & ["$trimmedType" , "$operator->type"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Unsupported operation (.*) \\((.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Files/FileSearchBackend.php" , line : 392usize , placeholders : & ["$property->name"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Unsupported property for search or order: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Files/FileSearchBackend.php" , line : 447usize , placeholders : & ["$propertyName"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^searching by '(.*)' is only allowed with a literal value$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Files/FileSearchBackend.php" , line : 450usize , placeholders : & ["$propertyName"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^searching by '(.*)' is not allowed inside a '\\{DAV:\\}or' or '\\{DAV:\\}not'$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Files/FileSearchBackend.php" , line : 453usize , placeholders : & ["$propertyName" , "$comparison"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^searching by '(.*)' is only allowed inside a '(.*)'$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Files/FilesHome.php" , line : 52usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Permission denied to delete home folder$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Files/FilesHome.php" , line : 61usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Permission denied to rename this folder$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Files/RootCollection.php" , line : 56usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Home does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Controller/DirectController.php" , line : 98usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Controller/DirectController.php" , line : 102usize , placeholders : & ["(60 * 60 * 24)"] , has_meaningful_message : true , exception : Some ("OCSBadRequestException") , regex : "^Expiration time should be greater than 0 and less than or equal to (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Controller/DirectController.php" , line : 107usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSBadRequestException") , regex : "^Direct download only works for files$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Controller/DirectController.php" , line : 114usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSForbiddenException") , regex : "^Permission denied to download file$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Upload/AssemblyStream.php" , line : 159usize , placeholders : & ["$this->currentNodeRead" , "$currentNodeSize"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Stream from assembly node shorter than expected, got (.*) bytes, expected (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Upload/AssemblyStream.php" , line : 256usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Invalid context, \"(.*)\" options not set$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Upload/AssemblyStream.php" , line : 261usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Invalid context, nodes not set$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Upload/ChunkingPlugin.php" , line : 69usize , placeholders : & ["$destination"] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^The given destination (.*) is a directory\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Upload/ChunkingPlugin.php" , line : 128usize , placeholders : & ["$expectedSize" , "$actualSize"] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^Chunks on server do not sum up to (.*) but to (.*) bytes$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Upload/UploadHome.php" , line : 47usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Permission denied to create file \\(filename (.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Upload/UploadHome.php" , line : 81usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Permission denied to rename this folder$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Upload/UploadFolder.php" , line : 49usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Permission denied to create file \\(filename (.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Upload/UploadFolder.php" , line : 91usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Permission denied to rename this folder$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Upload/FutureFile.php" , line : 58usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Permission denied to put into this file$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Upload/FutureFile.php" , line : 114usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Forbidden") , regex : "^Permission denied to rename this file$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Command/ListCalendars.php" , line : 67usize , placeholders : & ["$user"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^User <(.*)> is unknown\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Command/DeleteCalendar.php" , line : 104usize , placeholders : & ["$user"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^User <(.*)> is unknown\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Command/DeleteCalendar.php" , line : 115usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Please specify a calendar name or \\-\\-birthday$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Command/DeleteCalendar.php" , line : 124usize , placeholders : & ["$user" , "$name"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^User <(.*)> has no calendar named <(.*)>\\. You can run occ dav:list\\-calendars to list calendars URIs for this user\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Command/CreateCalendar.php" , line : 80usize , placeholders : & ["$user"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^User <(.*)> in unknown\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Command/CreateAddressBook.php" , line : 69usize , placeholders : & ["$user"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^User <(.*)> in unknown\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Command/MoveCalendar.php" , line : 122usize , placeholders : & ["$userOrigin"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^User <(.*)> is unknown\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Command/MoveCalendar.php" , line : 126usize , placeholders : & ["$userDestination"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^User <(.*)> is unknown\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Command/MoveCalendar.php" , line : 135usize , placeholders : & ["$userOrigin" , "$name"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^User <(.*)> has no calendar named <(.*)>\\. You can run occ dav:list\\-calendars to list calendars URIs for this user\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Command/MoveCalendar.php" , line : 146usize , placeholders : & ["$userDestination" , "$name"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Unable to find a suitable calendar name for <(.*)> with initial name <(.*)>\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Command/MoveCalendar.php" , line : 149usize , placeholders : & ["$userDestination" , "$name"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^User <(.*)> already has a calendar named <(.*)>\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Command/MoveCalendar.php" , line : 229usize , placeholders : & ["$userDestination" , "$userOrGroup" , "$calendar['uri']"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^User <(.*)> is not part of the group <(.*)> with whom the calendar <(.*)> was shared\\. You may use \\-f to move the calendar while deleting this share\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Command/MoveCalendar.php" , line : 240usize , placeholders : & ["$calendar['uri']" , "$userDestination"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The calendar <(.*)> is already shared to user <(.*)>\\.You may use \\-f to move the calendar while deleting this share\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Command/SyncBirthdayCalendar.php" , line : 80usize , placeholders : & ["$user"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^User <(.*)> in unknown\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/Command/SyncBirthdayCalendar.php" , line : 119usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Birthday calendars are disabled$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CardDAV/UserAddressBooks.php" , line : 91usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("MethodNotAllowed") , regex : "^The resource you tried to create has a reserved name$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CardDAV/CardDavBackend.php" , line : 420usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^URI too long\\. Address book not created$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CardDAV/CardDavBackend.php" , line : 440usize , placeholders : & ["$property"] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^Unknown property: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CardDAV/CardDavBackend.php" , line : 674usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Sabre\\DAV\\Exception\\BadRequest") , regex : "^VCard object with uid already exists in this addressbook collection\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CardDAV/CardDavBackend.php" , line : 1200usize , placeholders : & ["$id"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Card does not exists: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CardDAV/CardDavBackend.php" , line : 1338usize , placeholders : & ["$uri"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Card does not exists: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CardDAV/CardDavBackend.php" , line : 1396usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^vCards on CardDAV servers MUST have a UID property$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CardDAV/CardDavBackend.php" , line : 1399usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BadRequest") , regex : "^vCard can not be empty$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CardDAV/Activity/Provider/Card.php" , line : 78usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CardDAV/Activity/Provider/Card.php" , line : 102usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CardDAV/Activity/Provider/Card.php" , line : 134usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CardDAV/Activity/Provider/Addressbook.php" , line : 76usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CardDAV/Activity/Provider/Addressbook.php" , line : 122usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CardDAV/Activity/Provider/Addressbook.php" , line : 189usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CardDAV/PhotoCache.php" , line : 88usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CardDAV/PhotoCache.php" , line : 207usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^Avatar not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CardDAV/AddressBook.php" , line : 82usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CardDAV/AddressBook.php" , line : 160usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotFound") , regex : "^Card not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CardDAV/AddressBook.php" , line : 188usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CardDAV/AddressBook.php" , line : 201usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("Forbidden") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CardDAV/AddressBook.php" , line : 227usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("UnsupportedLimitOnInitialSyncException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CardDAV/Integration/ExternalAddressBook.php" , line : 83usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\MethodNotAllowed") , regex : "^Renaming address books is not yet supported$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CardDAV/Integration/ExternalAddressBook.php" , line : 90usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DAV\\Exception\\MethodNotAllowed") , regex : "^Creating collections in address book objects is not allowed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/lib/CardDAV/Integration/ExternalAddressBook.php" , line : 116usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Provided address book uri was not app\\-generated$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/dav/lib/CardDAV/SyncService.php" , line : 102usize , placeholders : & ["$url"] , has_meaningful_message : true , exception : None , regex : "^Authorization failed, remove address book: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/appinfo/v1/publicwebdav.php" , line : 79usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\Sabre\\DAV\\Exception\\NotAuthenticated") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/composer/composer/InstalledVersions.php" , line : 161usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/composer/composer/InstalledVersions.php" , line : 182usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/composer/composer/InstalledVersions.php" , line : 203usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/composer/composer/InstalledVersions.php" , line : 224usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/composer/composer/InstalledVersions.php" , line : 241usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/composer/composer/ClassLoader.php" , line : 252usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dav/composer/composer/ClassLoader.php" , line : 307usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/updatenotification/lib/Notification/Notifier.php" , line : 114usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Unknown app id$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/updatenotification/lib/Notification/Notifier.php" , line : 122usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Update checked worked again$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/updatenotification/lib/Notification/Notifier.php" , line : 172usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("AlreadyProcessedException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/updatenotification/composer/composer/ClassLoader.php" , line : 252usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/updatenotification/composer/composer/ClassLoader.php" , line : 307usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/updatenotification/composer/composer/InstalledVersions.php" , line : 161usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/updatenotification/composer/composer/InstalledVersions.php" , line : 182usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/updatenotification/composer/composer/InstalledVersions.php" , line : 203usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/updatenotification/composer/composer/InstalledVersions.php" , line : 224usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/updatenotification/composer/composer/InstalledVersions.php" , line : 241usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/recommendations/lib/Controller/SettingsController.php" , line : 64usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Not logged in$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/recommendations/lib/Controller/SettingsController.php" , line : 82usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Not logged in$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/recommendations/lib/Controller/RecommendationController.php" , line : 65usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Not logged in$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/recommendations/lib/Controller/RecommendationController.php" , line : 84usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Not logged in$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Config/SimpleSubstitutionTrait.php" , line : 67usize , placeholders : & ["sprintf(\n\t\t\t\t'Invalid placeholder %s, only [a-z0-9] are allowed', $this->sanitizedPlaceholder\n\t\t\t)"] , has_meaningful_message : false , exception : Some ("\\RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Config/SimpleSubstitutionTrait.php" , line : 72usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Invalid empty placeholder$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Config/ConfigAdapter.php" , line : 83usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid object store$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Service/LegacyStoragesService.php" , line : 64usize , placeholders : & ["$storageOptions['backend']"] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^Invalid backend (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Service/LegacyStoragesService.php" , line : 74usize , placeholders : & ["$storageOptions['authMechanism']"] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^Invalid authentication mechanism (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/files_external/lib/Service/LegacyStoragesService.php" , line : 146usize , placeholders : & ["$rootMountPath"] , has_meaningful_message : true , exception : None , regex : "^Could not parse mount point \"(.*)\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Service/BackendService.php" , line : 326usize , placeholders : & ["sprintf(\n\t\t\t\t'Invalid placeholder %s, only [a-z0-9] are allowed', $placeholder\n\t\t\t)"] , has_meaningful_message : false , exception : Some ("\\RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Service/BackendService.php" , line : 331usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Invalid empty placeholder$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Service/BackendService.php" , line : 334usize , placeholders : & ["sprintf('A handler is already registered for %s', $placeholder)"] , has_meaningful_message : false , exception : Some ("\\RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Service/BackendService.php" , line : 345usize , placeholders : & ["sprintf(\n\t\t\t\t\t'Handler for %s is not an instance of IConfigHandler', $placeholder\n\t\t\t\t)"] , has_meaningful_message : false , exception : Some ("\\RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Service/StoragesService.php" , line : 169usize , placeholders : & ["$id"] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^Storage with ID \"(.*)\" not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Service/StoragesService.php" , line : 176usize , placeholders : & ["$id"] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^Storage with ID \"(.*)\" not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Service/StoragesService.php" , line : 400usize , placeholders : & ["$id"] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^Storage with ID \"(.*)\" not found while updating storage$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Service/StoragesService.php" , line : 406usize , placeholders : & ["$id"] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^Storage with id \"(.*)\" cannot be edited due to missing backend$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Service/StoragesService.php" , line : 485usize , placeholders : & ["$id"] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^Storage with ID \"(.*)\" not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Service/UserGlobalStoragesService.php" , line : 90usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\DomainException") , regex : "^UserGlobalStoragesService writing disallowed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Service/UserGlobalStoragesService.php" , line : 94usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\DomainException") , regex : "^UserGlobalStoragesService writing disallowed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Service/UserGlobalStoragesService.php" , line : 101usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\DomainException") , regex : "^UserGlobalStoragesService writing disallowed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Backend/SMB.php" , line : 79usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^user or password is not set$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Backend/SMB.php" , line : 94usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^invalid authentication backend$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Backend/SMB.php" , line : 124usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InsufficientDataForMeaningfulAnswerException") , regex : "^No session credentials saved$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Backend/SMB.php" , line : 130usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^unknown authentication backend$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Storage/SFTP.php" , line : 94usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^no authentication parameters specified$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Storage/SFTP.php" , line : 106usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^no authentication parameters specified$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Storage/SFTP.php" , line : 134usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Host public key does not match known key$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Storage/SFTP.php" , line : 151usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Login failed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/files_external/lib/Lib/Storage/Swift.php" , line : 141usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Storage/Swift.php" , line : 169usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("StorageBadConfigException") , regex : "^API Key or password, Username, Bucket and Region have to be configured\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/files_external/lib/Lib/Storage/Swift.php" , line : 235usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/files_external/lib/Lib/Storage/Swift.php" , line : 279usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/files_external/lib/Lib/Storage/Swift.php" , line : 317usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/files_external/lib/Lib/Storage/Swift.php" , line : 340usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/files_external/lib/Lib/Storage/Swift.php" , line : 394usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/files_external/lib/Lib/Storage/Swift.php" , line : 418usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/files_external/lib/Lib/Storage/Swift.php" , line : 505usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/files_external/lib/Lib/Storage/Swift.php" , line : 521usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Storage/Swift.php" , line : 560usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^failed to remove original$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Storage/SFTPReadStream.php" , line : 72usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Invalid context, \"(.*)\" options not set$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Storage/SFTPReadStream.php" , line : 77usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Invalid context, session not set$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Storage/SMB.php" , line : 103usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Invalid configuration, no host provided$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Storage/SMB.php" , line : 112usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Invalid configuration, no credentials provided$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Storage/SMB.php" , line : 216usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageAuthException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Critical , path : "/apps/files_external/lib/Lib/Storage/SMB.php" , line : 248usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Storage/SMB.php" , line : 249usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotPermittedException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/files_external/lib/Lib/Storage/SMB.php" , line : 268usize , placeholders : & ["$file->getName()"] , has_meaningful_message : true , exception : None , regex : "^Hiding non readable entry (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/files_external/lib/Lib/Storage/SMB.php" , line : 274usize , placeholders : & ["$file->getName()"] , has_meaningful_message : true , exception : None , regex : "^hiding hidden file (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Storage/SMB.php" , line : 287usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Storage/SMB.php" , line : 433usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Storage/SMB.php" , line : 517usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("EntityTooLargeException") , regex : "^not enough available space to create file$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Storage/SMB.php" , line : 520usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Storage/SMB.php" , line : 547usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Storage/SMB.php" , line : 560usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("EntityTooLargeException") , regex : "^not enough available space to create file$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Storage/SMB.php" , line : 563usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Storage/SMB.php" , line : 660usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Storage/SMB.php" , line : 675usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Storage/SFTPWriteStream.php" , line : 72usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Invalid context, \"(.*)\" options not set$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Storage/SFTPWriteStream.php" , line : 77usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Invalid context, session not set$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Storage/FTP.php" , line : 65usize , placeholders : & ["self::class"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Creating (.*) storage failed, required parameters not set$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Storage/FTP.php" , line : 84usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("StorageNotAvailableException") , regex : "^Failed to create ftp connection$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Storage/FTP.php" , line : 88usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("StorageNotAvailableException") , regex : "^Could not set UTF\\-8 mode$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/files_external/lib/Lib/Storage/FTP.php" , line : 119usize , placeholders : & ["$path"] , has_meaningful_message : true , exception : None , regex : "^Unable to get last modified date for ftp folder \\((.*)\\), failed to list folder contents$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Storage/FTP.php" , line : 128usize , placeholders : & ["$currentDir"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Invalid date format for directory: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/files_external/lib/Lib/Storage/FTP.php" , line : 132usize , placeholders : & ["$path"] , has_meaningful_message : true , exception : None , regex : "^Unable to get last modified date for ftp folder \\((.*)\\), folder contents doesn't include current folder$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Storage/FtpConnection.php" , line : 41usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Failed to connect to ftp$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Storage/FtpConnection.php" , line : 45usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Failed to connect to login to ftp$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Storage/FtpConnection.php" , line : 151usize , placeholders : & ["$item"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Metadata can't be parsed from item '(.*)' , not enough parts\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Storage/FtpConnection.php" , line : 209usize , placeholders : & ["$item"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Metadata can't be parsed from item '(.*)' , not enough parts\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Auth/Password/UserGlobalAuth.php" , line : 74usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InsufficientDataForMeaningfulAnswerException") , regex : "^No credentials saved$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Auth/Password/LoginCredentials.php" , line : 98usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("CredentialsUnavailableException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Auth/Password/LoginCredentials.php" , line : 108usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InsufficientDataForMeaningfulAnswerException") , regex : "^No login credentials saved$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Auth/Password/LoginCredentials.php" , line : 117usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InsufficientDataForMeaningfulAnswerException") , regex : "^No login credentials saved$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Auth/Password/LoginCredentials.php" , line : 127usize , placeholders : & ["$user->getUID()"] , has_meaningful_message : true , exception : Some ("InsufficientDataForMeaningfulAnswerException") , regex : "^Custom ldap attribute not set for user (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Auth/Password/LoginCredentials.php" , line : 131usize , placeholders : & ["$user->getUID()"] , has_meaningful_message : true , exception : Some ("InsufficientDataForMeaningfulAnswerException") , regex : "^Custom ldap attribute configured but user (.*) is not an ldap user$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Auth/Password/UserProvided.php" , line : 76usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InsufficientDataForMeaningfulAnswerException") , regex : "^No credentials saved$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Auth/Password/UserProvided.php" , line : 82usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InsufficientDataForMeaningfulAnswerException") , regex : "^No credentials saved$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Auth/Password/GlobalAuth.php" , line : 77usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InsufficientDataForMeaningfulAnswerException") , regex : "^No credentials saved$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Auth/Password/SessionCredentials.php" , line : 57usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InsufficientDataForMeaningfulAnswerException") , regex : "^No session credentials saved$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Auth/PublicKey/RSA.php" , line : 63usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^unable to load private key$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Lib/Auth/PublicKey/RSAPrivateKey.php" , line : 61usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^unable to load private key$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Migration/Version1015Date20211104103506.php" , line : 58usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Could not fetch existing mounts for migration$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/files_external/lib/Migration/Version1015Date20211104103506.php" , line : 72usize , placeholders : & ["$mount['mount_id']" , "$newId"] , has_meaningful_message : true , exception : None , regex : "^Migrated s3 storage id for mount with id (.*) to (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/files_external/lib/Migration/Version1015Date20211104103506.php" , line : 74usize , placeholders : & ["$mount['mount_id']"] , has_meaningful_message : true , exception : None , regex : "^Failed to migrate external s3 storage id for mount with id (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/files_external/lib/Command/Notify.php" , line : 251usize , placeholders : & ["$path"] , has_meaningful_message : true , exception : None , regex : "^Failed updating parent for \"(.*)\" while trying to register change\\. It may not exist in the filecache\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Command/ListCommand.php" , line : 269usize , placeholders : & ["$userId"] , has_meaningful_message : true , exception : Some ("NoUserException") , regex : "^user (.*) not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Command/Import.php" , line : 218usize , placeholders : & ["$userId"] , has_meaningful_message : true , exception : Some ("NoUserException") , regex : "^user (.*) not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/lib/Command/Create.php" , line : 216usize , placeholders : & ["$userId"] , has_meaningful_message : true , exception : Some ("NoUserException") , regex : "^user (.*) not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/streams/src/Wrapper.php" , line : 40usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Invalid context, source not set$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/streams/src/IteratorDirectory.php" , line : 48usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Invalid context, iterator or array not set$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/streams/src/IteratorDirectory.php" , line : 109usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^\\$source should be an Iterator or array$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/streams/src/WrapperHandler.php" , line : 87usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Invalid stream source$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/streams/src/WrapperHandler.php" , line : 110usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Invalid context, \"(.*)\" options not set$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/streams/src/CountWrapper.php" , line : 64usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid or missing callback$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/streams/src/UrlCallback.php" , line : 133usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^stat is not supported due to php bug 50526$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/AnonymousAuth.php" , line : 45usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Failed to set smbclient options for anonymous auth$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/AbstractShare.php" , line : 27usize , placeholders : & ["$char"] , has_meaningful_message : true , exception : Some ("InvalidPathException") , regex : "^Invalid path, \"(.*)\" is not allowed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Native/NativeState.php" , line : 373usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Failed to free smb state$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Native/NativeFileInfo.php" , line : 55usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Invalid attribute response$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Native/NativeFileInfo.php" , line : 58usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Invalid attribute response$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Native/NativeFileInfo.php" , line : 61usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Invalid attribute response$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Native/NativeStream.php" , line : 56usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Failed to register stream wrapper$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Native/NativeStream.php" , line : 67usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Failed to unregister stream wrapper$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Native/NativeStream.php" , line : 92usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^context not set$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Native/NativeStream.php" , line : 96usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^invalid context set$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Native/NativeStream.php" , line : 101usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^invalid context set$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Native/NativeStream.php" , line : 106usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^invalid context set$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Native/NativeShare.php" , line : 227usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidPathException") , regex : "^Invalid target path: Filename cannot be empty$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Native/NativeShare.php" , line : 241usize , placeholders : & ["$target" , "$reason"] , has_meaningful_message : true , exception : Some ("InvalidResourceException") , regex : "^Failed opening local file \"(.*)\" for writing: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Native/NativeShare.php" , line : 321usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid value for attribute$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Native/NativeShare.php" , line : 350usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DependencyException") , regex : "^smbclient not found in path for notify command$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/System.php" , line : 33usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Cant find file descriptor path$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Wrapped/RawConnection.php" , line : 60usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ConnectException") , regex : "^Authentication not set before connecting$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Wrapped/RawConnection.php" , line : 82usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ConnectionException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Wrapped/Server.php" , line : 51usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Backend not available$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Wrapped/Server.php" , line : 66usize , placeholders : & ["(string)$connection->readLine()"] , has_meaningful_message : false , exception : Some ("ConnectionException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Wrapped/Server.php" , line : 85usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ConnectionRefusedException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Wrapped/Connection.php" , line : 57usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ConnectionRefusedException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Wrapped/Connection.php" , line : 75usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ConnectionException") , regex : "^Connection not valid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Wrapped/Connection.php" , line : 98usize , placeholders : & ["$promptLine"] , has_meaningful_message : true , exception : Some ("ConnectException") , regex : "^Unknown error \\((.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Wrapped/Connection.php" , line : 102usize , placeholders : & ["$error"] , has_meaningful_message : true , exception : Some ("ConnectException") , regex : "^Unknown error \\((.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Wrapped/Connection.php" , line : 104usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ConnectException") , regex : "^Unknown error$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Wrapped/Share.php" , line : 93usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Backend not available$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Wrapped/Share.php" , line : 111usize , placeholders : & ["(string)$connection->readLine()"] , has_meaningful_message : false , exception : Some ("ConnectionException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Wrapped/Share.php" , line : 144usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ConnectionException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Wrapped/Share.php" , line : 271usize , placeholders : & ["$path"] , has_meaningful_message : false , exception : Some ("InvalidTypeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Wrapped/Share.php" , line : 357usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Failed to wrap file output$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Wrapped/Share.php" , line : 391usize , placeholders : & ["$target"] , has_meaningful_message : false , exception : Some ("InvalidRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Wrapped/Share.php" , line : 404usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DependencyException") , regex : "^php\\-libsmbclient is required for append$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Wrapped/Share.php" , line : 444usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DependencyException") , regex : "^stdbuf is required for usage of the notify command$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Wrapped/Share.php" , line : 540usize , placeholders : & ["(string)$connection->readLine()"] , has_meaningful_message : false , exception : Some ("ConnectionException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Wrapped/Parser.php" , line : 83usize , placeholders : & ["$path"] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Wrapped/Parser.php" , line : 89usize , placeholders : & ["$localPath"] , has_meaningful_message : true , exception : Some ("InvalidResourceException") , regex : "^Failed opening local file \"(.*)\" for writing$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Wrapped/Parser.php" , line : 107usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("AuthenticationException") , regex : "^Invalid login$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Wrapped/Parser.php" , line : 110usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidHostException") , regex : "^Invalid hostname$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Wrapped/Parser.php" , line : 113usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidHostException") , regex : "^Connection unsuccessful$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Wrapped/Parser.php" , line : 116usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidHostException") , regex : "^Connection refused$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Wrapped/Parser.php" , line : 119usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NoLoginServerException") , regex : "^No login server$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Wrapped/Parser.php" , line : 122usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("AccessDeniedException") , regex : "^Access denied$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/Wrapped/Parser.php" , line : 157usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Malformed state response from server$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/KerberosAuth.php" , line : 51usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Failed to set smbclient options for kerberos auth$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/KerberosApacheAuth.php" , line : 104usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DependencyException") , regex : "^Ensure php\\-krb5 is installed\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/KerberosApacheAuth.php" , line : 109usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^No kerberos ticket cache environment variable \\(KRB5CCNAME\\) found\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/icewind/smb/src/ServerFactory.php" , line : 83usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DependencyException") , regex : "^No valid backend available, ensure smbclient is in the path or php\\-smbclient is installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/composer/InstalledVersions.php" , line : 159usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/composer/InstalledVersions.php" , line : 180usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/composer/InstalledVersions.php" , line : 201usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/composer/InstalledVersions.php" , line : 222usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/composer/InstalledVersions.php" , line : 239usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/composer/ClassLoader.php" , line : 252usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/files_external/3rdparty/composer/ClassLoader.php" , line : 307usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_status/composer/composer/InstalledVersions.php" , line : 161usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_status/composer/composer/InstalledVersions.php" , line : 182usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_status/composer/composer/InstalledVersions.php" , line : 203usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_status/composer/composer/InstalledVersions.php" , line : 224usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_status/composer/composer/InstalledVersions.php" , line : 241usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_status/composer/composer/ClassLoader.php" , line : 252usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_status/composer/composer/ClassLoader.php" , line : 307usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_status/lib/Controller/UserStatusController.php" , line : 86usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSNotFoundException") , regex : "^No status for the current user$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_status/lib/Controller/UserStatusController.php" , line : 106usize , placeholders : & ["$this->userId" , "$statusType"] , has_meaningful_message : true , exception : None , regex : "^New user\\-status for \"(.*)\" was rejected due to an invalid status type \"(.*)\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_status/lib/Controller/UserStatusController.php" , line : 107usize , placeholders : & ["$ex->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSBadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_status/lib/Controller/UserStatusController.php" , line : 126usize , placeholders : & ["$this->userId" , "$clearAt"] , has_meaningful_message : true , exception : None , regex : "^New user\\-status for \"(.*)\" was rejected due to an invalid clearAt value \"(.*)\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_status/lib/Controller/UserStatusController.php" , line : 127usize , placeholders : & ["$ex->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSBadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_status/lib/Controller/UserStatusController.php" , line : 129usize , placeholders : & ["$this->userId" , "$messageId"] , has_meaningful_message : true , exception : None , regex : "^New user\\-status for \"(.*)\" was rejected due to an invalid message\\-id \"(.*)\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_status/lib/Controller/UserStatusController.php" , line : 130usize , placeholders : & ["$ex->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSBadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_status/lib/Controller/UserStatusController.php" , line : 156usize , placeholders : & ["$this->userId" , "$clearAt"] , has_meaningful_message : true , exception : None , regex : "^New user\\-status for \"(.*)\" was rejected due to an invalid clearAt value \"(.*)\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_status/lib/Controller/UserStatusController.php" , line : 157usize , placeholders : & ["$ex->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSBadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_status/lib/Controller/UserStatusController.php" , line : 159usize , placeholders : & ["$this->userId" , "$statusIcon"] , has_meaningful_message : true , exception : None , regex : "^New user\\-status for \"(.*)\" was rejected due to an invalid icon value \"(.*)\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_status/lib/Controller/UserStatusController.php" , line : 160usize , placeholders : & ["$ex->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSBadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/user_status/lib/Controller/UserStatusController.php" , line : 162usize , placeholders : & ["$this->userId"] , has_meaningful_message : true , exception : None , regex : "^New user\\-status for \"(.*)\" was rejected due to a too long status message\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_status/lib/Controller/UserStatusController.php" , line : 163usize , placeholders : & ["$ex->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSBadRequestException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_status/lib/Controller/StatusesController.php" , line : 83usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("OCSNotFoundException") , regex : "^No status for the requested userId$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_status/lib/Service/StatusService.php" , line : 197usize , placeholders : & ["$status"] , has_meaningful_message : true , exception : Some ("InvalidStatusTypeException") , regex : "^Status\\-type \"(.*)\" is not supported$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_status/lib/Service/StatusService.php" , line : 238usize , placeholders : & ["$messageId"] , has_meaningful_message : true , exception : Some ("InvalidMessageIdException") , regex : "^Message\\-Id \"(.*)\" is not supported$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_status/lib/Service/StatusService.php" , line : 243usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidClearAtException") , regex : "^ClearAt is in the past$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_status/lib/Service/StatusService.php" , line : 272usize , placeholders : & ["$status"] , has_meaningful_message : true , exception : Some ("InvalidStatusTypeException") , regex : "^Status\\-type \"(.*)\" is not supported$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_status/lib/Service/StatusService.php" , line : 276usize , placeholders : & ["$messageId"] , has_meaningful_message : true , exception : Some ("InvalidMessageIdException") , regex : "^Message\\-Id \"(.*)\" is not supported$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_status/lib/Service/StatusService.php" , line : 338usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidStatusIconException") , regex : "^Status\\-Icon is longer than one character$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_status/lib/Service/StatusService.php" , line : 342usize , placeholders : & ["self::MAXIMUM_MESSAGE_LENGTH"] , has_meaningful_message : true , exception : Some ("StatusMessageTooLongException") , regex : "^Message is longer than supported length of (.*) characters$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/user_status/lib/Service/StatusService.php" , line : 346usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidClearAtException") , regex : "^ClearAt is in the past$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/survey_client/lib/BackgroundJobs/MonthlyReport.php" , line : 51usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Error while sending usage statistic$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/survey_client/lib/Notifier.php" , line : 77usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federation/lib/TrustedServers.php" , line : 244usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("HintException") , regex : "^Remote server version is too low\\. 9\\.0 is required\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federation/lib/DbHandler.php" , line : 95usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("HintException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federation/lib/DbHandler.php" , line : 129usize , placeholders : & ["$id"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^No Server found with ID: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federation/lib/DbHandler.php" , line : 206usize , placeholders : & ["$url"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^No token found for: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/federation/lib/BackgroundJob/RequestSharedSecret.php" , line : 179usize , placeholders : & ["$target"] , has_meaningful_message : true , exception : None , regex : "^(.*) refused to ask for a shared secret\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/federation/lib/BackgroundJob/RequestSharedSecret.php" , line : 181usize , placeholders : & ["$target" , "$status" , "$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^(.*) responded with a (.*) containing: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/federation/lib/BackgroundJob/RequestSharedSecret.php" , line : 185usize , placeholders : & ["$target"] , has_meaningful_message : true , exception : None , regex : "^Could not connect to (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/federation/lib/BackgroundJob/GetSharedSecret.php" , line : 182usize , placeholders : & ["$target"] , has_meaningful_message : true , exception : None , regex : "^(.*) refused to exchange a shared secret with you\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/federation/lib/BackgroundJob/GetSharedSecret.php" , line : 184usize , placeholders : & ["$target" , "$status" , "$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^(.*) responded with a (.*) containing: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/federation/lib/BackgroundJob/GetSharedSecret.php" , line : 215usize , placeholders : & ["$target" , "$body"] , has_meaningful_message : true , exception : None , regex : "^remote server \"(.*)\"\" does not return a valid shared secret\\. Received data: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federation/lib/Controller/SettingsController.php" , line : 103usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("HintException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federation/lib/Controller/SettingsController.php" , line : 109usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("HintException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/federation/lib/Controller/OCSAuthAPIController.php" , line : 145usize , placeholders : & ["$url"] , has_meaningful_message : true , exception : None , regex : "^remote server not trusted \\((.*)\\) while requesting shared secret$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federation/lib/Controller/OCSAuthAPIController.php" , line : 146usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSForbiddenException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/apps/federation/lib/Controller/OCSAuthAPIController.php" , line : 153usize , placeholders : & ["$url"] , has_meaningful_message : true , exception : None , regex : "^remote server \\((.*)\\) presented lower token\\. We will initiate the exchange of the shared secret\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federation/lib/Controller/OCSAuthAPIController.php" , line : 157usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSForbiddenException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/federation/lib/Controller/OCSAuthAPIController.php" , line : 185usize , placeholders : & ["$url"] , has_meaningful_message : true , exception : None , regex : "^remote server not trusted \\((.*)\\) while getting shared secret$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federation/lib/Controller/OCSAuthAPIController.php" , line : 186usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSForbiddenException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/federation/lib/Controller/OCSAuthAPIController.php" , line : 191usize , placeholders : & ["$url" , "$token" , "$expectedToken"] , has_meaningful_message : true , exception : None , regex : "^remote server \\((.*)\\) didn't send a valid token \\(got \"(.*)\" but expected \"(.*)\"\\) while getting shared secret$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federation/lib/Controller/OCSAuthAPIController.php" , line : 195usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("OCSForbiddenException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federation/composer/composer/ClassLoader.php" , line : 252usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federation/composer/composer/ClassLoader.php" , line : 307usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federation/composer/composer/InstalledVersions.php" , line : 161usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federation/composer/composer/InstalledVersions.php" , line : 182usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federation/composer/composer/InstalledVersions.php" , line : 203usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federation/composer/composer/InstalledVersions.php" , line : 224usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/federation/composer/composer/InstalledVersions.php" , line : 241usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/activity/lib/Data.php" , line : 183usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Invalid user$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/activity/lib/Data.php" , line : 289usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Invalid since$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/activity/lib/NotificationGenerator.php" , line : 115usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/activity/lib/NotificationGenerator.php" , line : 120usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/activity/lib/Controller/APIv2Controller.php" , line : 157usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidFilterException") , regex : "^Invalid filter$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/activity/lib/Controller/APIv2Controller.php" , line : 177usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Not logged in$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/activity/lib/AppInfo/Application.php" , line : 77usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\OC\\DatabaseException") , regex : "^Invalid database type$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/activity/lib/DigestSender.php" , line : 115usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Exception occurred while sending user digest email$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/activity/lib/DigestSender.php" , line : 215usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/activity/lib/GroupHelper.php" , line : 119usize , placeholders : & ["$event->getRichSubject()"] , has_meaningful_message : true , exception : None , regex : "^Activity \"(.*)\" was not parsed by any provider$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/activity/lib/MailQueueHandler.php" , line : 157usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Couldn't send notification email to user '\\{user\\}' \\(email address isn't set for that user\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/activity/lib/MailQueueHandler.php" , line : 168usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Failed sending activity email to user '\\{user\\}'\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/apps/activity/lib/MailQueueHandler.php" , line : 338usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Notification for user \"\\{user\\}\" not sent because the email address \"\\{email\\}\" is invalid\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/activity/lib/MailQueueHandler.php" , line : 493usize , placeholders : & ["$event->getRichSubject()"] , has_meaningful_message : true , exception : None , regex : "^Activity \"(.*)\" was not parsed by any provider$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/activity/lib/MailQueueHandler.php" , line : 494usize , placeholders : & ["$event->getRichSubject()"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Activity \"(.*)\" was not parsed by any provider$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/comments/lib/Activity/Provider.php" , line : 67usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/comments/lib/Activity/Provider.php" , line : 90usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/comments/lib/Activity/Provider.php" , line : 112usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/comments/lib/Activity/Provider.php" , line : 144usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/comments/lib/Notification/Notifier.php" , line : 91usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/comments/lib/Notification/Notifier.php" , line : 97usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Comment not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/comments/lib/Notification/Notifier.php" , line : 113usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Unsupported comment object$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/comments/lib/Notification/Notifier.php" , line : 118usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("AlreadyProcessedException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/comments/lib/Notification/Notifier.php" , line : 163usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid subject$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/comments/lib/Search/Result.php" , line : 94usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^Path not inside visible section$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/comments/lib/Search/Result.php" , line : 109usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^Comment section not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/comments/lib/Search/LegacyProvider.php" , line : 108usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^File not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/comments/composer/composer/InstalledVersions.php" , line : 161usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/comments/composer/composer/InstalledVersions.php" , line : 182usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/comments/composer/composer/InstalledVersions.php" , line : 203usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/comments/composer/composer/InstalledVersions.php" , line : 224usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/comments/composer/composer/InstalledVersions.php" , line : 241usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/comments/composer/composer/ClassLoader.php" , line : 252usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/comments/composer/composer/ClassLoader.php" , line : 307usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/photos/lib/Controller/PageController.php" , line : 144usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/systemtags/composer/composer/InstalledVersions.php" , line : 161usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/systemtags/composer/composer/InstalledVersions.php" , line : 182usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/systemtags/composer/composer/InstalledVersions.php" , line : 203usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/systemtags/composer/composer/InstalledVersions.php" , line : 224usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/systemtags/composer/composer/InstalledVersions.php" , line : 241usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/systemtags/composer/composer/ClassLoader.php" , line : 252usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/systemtags/composer/composer/ClassLoader.php" , line : 307usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/systemtags/lib/Activity/Provider.php" , line : 84usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/systemtags/lib/Activity/Provider.php" , line : 166usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/systemtags/lib/Activity/Provider.php" , line : 273usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/sharebymail/composer/composer/ClassLoader.php" , line : 252usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/sharebymail/composer/composer/ClassLoader.php" , line : 307usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/sharebymail/composer/composer/InstalledVersions.php" , line : 161usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/sharebymail/composer/composer/InstalledVersions.php" , line : 182usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/sharebymail/composer/composer/InstalledVersions.php" , line : 203usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/sharebymail/composer/composer/InstalledVersions.php" , line : 224usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/sharebymail/composer/composer/InstalledVersions.php" , line : 241usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/sharebymail/lib/Activity.php" , line : 95usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/sharebymail/lib/Activity.php" , line : 193usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/sharebymail/lib/Activity.php" , line : 276usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/sharebymail/lib/Activity.php" , line : 310usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/apps/sharebymail/lib/ShareByMailProvider.php" , line : 181usize , placeholders : & ["sprintf($message, $share->getNode()->getName(), $shareWith)"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/sharebymail/lib/ShareByMailProvider.php" , line : 182usize , placeholders : & ["$message_t"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/sharebymail/lib/ShareByMailProvider.php" , line : 227usize , placeholders : & ["$this->l->t(\"We cannot send you the auto-generated password. Please set a valid email address in your personal settings and try again.\")"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/apps/sharebymail/lib/ShareByMailProvider.php" , line : 352usize , placeholders : & ["$share->getSharedWith()"] , has_meaningful_message : true , exception : None , regex : "^Failed to send share by mail\\. Got an invalid email address (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/sharebymail/lib/ShareByMailProvider.php" , line : 384usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("HintException") , regex : "^Failed to send share by mail$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/sharebymail/lib/ShareByMailProvider.php" , line : 615usize , placeholders : & ["$this->l->t(\"We cannot send you the auto-generated password. Please set a valid email address in your personal settings and try again.\")"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/sharebymail/lib/ShareByMailProvider.php" , line : 829usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("GenericShareException") , regex : "^not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/sharebymail/lib/ShareByMailProvider.php" , line : 904usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ShareNotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/sharebymail/lib/ShareByMailProvider.php" , line : 910usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ShareNotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/sharebymail/lib/ShareByMailProvider.php" , line : 999usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ShareNotFound") , regex : "^Share not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/sharebymail/lib/ShareByMailProvider.php" , line : 1005usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ShareNotFound") , regex : "^Share not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/sharebymail/lib/ShareByMailProvider.php" , line : 1091usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidShare") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/sharebymail/lib/ShareByMailProvider.php" , line : 1097usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidShare") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dashboard/lib/Service/BackgroundService.php" , line : 154usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Invalid image file$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dashboard/lib/Service/BackgroundService.php" , line : 161usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^The given file name is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/apps/dashboard/lib/Service/BackgroundService.php" , line : 168usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^The given color is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/remote.php" , line : 67usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("ServiceUnavailable") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/remote.php" , line : 69usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("\\Sabre\\DAV\\Exception\\NotFound") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/remote.php" , line : 74usize , placeholders : & ["$class" , "$msg"] , has_meaningful_message : false , exception : Some ("ServiceUnavailable") , regex : "^(.*): (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/remote.php" , line : 128usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RemoteException") , regex : "^Service unavailable$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/remote.php" , line : 134usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RemoteException") , regex : "^Path not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/remote.php" , line : 144usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RemoteException") , regex : "^Path not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/remote.php" , line : 163usize , placeholders : & ["$app"] , has_meaningful_message : true , exception : Some ("RemoteException") , regex : "^App not installed: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 173usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Could not find config\\.php\\. Is this file in the \"updater\" subfolder of Nextcloud\\?$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 188usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Could not read data directory from config\\.php\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 413usize , placeholders : & ["$unexpectedElements"] , has_meaningful_message : false , exception : Some ("UpdateException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 435usize , placeholders : & ["$notWritablePaths"] , has_meaningful_message : false , exception : Some ("UpdateException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 459usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Could not find config\\.php\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 470usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Could not write to config\\.php$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 495usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Could not create backup folder location$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 524usize , placeholders : & ["$backupFolderLocation" , "dirname($fileName)"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Could not create folder: (.*)/(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 554usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 607usize , placeholders : & ["curl_error($curl)"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Could not do request to updater server: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 618usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Could not parse updater server XML response$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 622usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Could not JSON encode updater server response$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 626usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Could not JSON decode updater server response\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 648usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Could not mkdir storage location$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 667usize , placeholders : & ["curl_error($ch)"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Curl error: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 696usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 718usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^There are more files than the downloaded archive in the downloads/ folder\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 738usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^No signature specified for defined update$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 779usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Signature of update is not valid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 800usize , placeholders : & ["$versionFile"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^OC_Version not found in (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 817usize , placeholders : & ["($zip->getStatusString())"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Error during unpacking zipfile: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 822usize , placeholders : & ["$downloadedFilePath"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Can't unlink (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 825usize , placeholders : & ["$zipState"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Can't handle ZIP file\\. Error code is: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 832usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Downloaded version is lower than installed version$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 862usize , placeholders : & ["$file"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Can't create parent directory for entry point: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 867usize , placeholders : & ["$file"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Can't replace entry point: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 912usize , placeholders : & ["$folder"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Could not rmdir (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 926usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^core/shipped\\.json is not available$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 931usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^core/shipped\\.json is not available in the new release$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 950usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Could not unlink sample config$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 961usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Could not delete themes README$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 1003usize , placeholders : & ["$path"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Could not unlink: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 1008usize , placeholders : & ["$path"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Could not rmdir: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 1046usize , placeholders : & ["$this->baseDir" , "dirname($fileName)"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Could not mkdir (.*)/\\.\\./(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 1051usize , placeholders : & ["sprintf(\n\t\t\t\t\t\t\t'Could not rename %s to %s',\n\t\t\t\t\t\t\t$path,\n\t\t\t\t\t\t\t$this->baseDir . '/../' . $fileName\n\t\t\t\t\t\t)"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 1063usize , placeholders : & ["$path"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Could not rmdir (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 1108usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Could not rmdir \\$storagelocation$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 1112usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Could not rmdir \\.step$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 1134usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Could not create \\$updaterDir$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 1139usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Could not create \\.step$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 1145usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Could not write to \\.step$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 1179usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Could not read from \\.step$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 1184usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Can't decode \\.step JSON data$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 1204usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Could not delete \\.step$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/updater/index.php" , line : 1233usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 1247usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogException") , regex : "^Could not open updater\\.log$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 1264usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LogException") , regex : "^Could not write to updater\\.log$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/updater/index.php" , line : 1278usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/updater/index.php" , line : 1312usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^\\[info\\] request to updater$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/updater/index.php" , line : 1334usize , placeholders : & ["$stepNumber" , "$stepState"] , has_meaningful_message : true , exception : None , regex : "^\\[info\\] Step (.*) is in state \"(.*)\"\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/updater/index.php" , line : 1347usize , placeholders : & ["$_POST['step']"] , has_meaningful_message : true , exception : None , regex : "^\\[info\\] POST request for step \"(.*)\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 1351usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Not authenticated$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/updater/index.php" , line : 1356usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Invalid step$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/updater/index.php" , line : 1404usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^\\[error\\] POST request failed with UpdateException$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/updater/index.php" , line : 1419usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^\\[error\\] POST request failed with other exception$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/updater/index.php" , line : 1435usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^\\[info\\] show HTML page$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Session/Internal.php" , line : 62usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Failed to start session$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Session/Internal.php" , line : 166usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("SessionNotAvailableException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Session/Internal.php" , line : 175usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^The session cannot be reopened \\- reopen\\(\\) is ony to be used in unit testing\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Session/Internal.php" , line : 185usize , placeholders : & ["$errorString"] , has_meaningful_message : false , exception : Some ("\\ErrorException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Session/Internal.php" , line : 194usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("SessionNotAvailableException") , regex : "^Session has been closed \\- no further changes to the session are allowed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Session/Memory.php" , line : 107usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("SessionNotAvailableException") , regex : "^Memory session does not have an ID$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Session/Memory.php" , line : 124usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Session has been closed \\- no further changes to the session are allowed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Command/CronBus.php" , line : 60usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid command$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Command/CronBus.php" , line : 74usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid command$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Command/ClosureJob.php" , line : 33usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid serialized callable$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Command/CommandJob.php" , line : 37usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid serialized command$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Command/CallableJob.php" , line : 32usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid serialized callable$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Command/QueueBus.php" , line : 60usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Trying to push a command which serialized form can not be stored in the database \\(>4000 character\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Updater/ChangesMapper.php" , line : 55usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DoesNotExistException") , regex : "^Changes info is not present$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Updater/ChangesCheck.php" , line : 60usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DoesNotExistException") , regex : "^Unable to decode changes info$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Updater/ChangesCheck.php" , line : 105usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Unexpected return code \\{code\\} from changelog server$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Cache/File.php" , line : 65usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\OC\\ForbiddenException") , regex : "^Can\\\\t get cache storage, user not logged in$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Cache/File.php" , line : 196usize , placeholders : & ["$file"] , has_meaningful_message : true , exception : None , regex : "^Could not cleanup locked chunk \"(.*)\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Cache/File.php" , line : 198usize , placeholders : & ["$file"] , has_meaningful_message : true , exception : None , regex : "^Could not cleanup forbidden chunk \"(.*)\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Cache/File.php" , line : 200usize , placeholders : & ["$file"] , has_meaningful_message : true , exception : None , regex : "^Could not cleanup locked chunk \"(.*)\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/IntegrityCheck/Helpers/FileAccessHelper.php" , line : 68usize , placeholders : & ["$filename"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Failed to write into (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/IntegrityCheck/Helpers/FileAccessHelper.php" , line : 87usize , placeholders : & ["$path"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Directory (.*) does not exist\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/IntegrityCheck/Helpers/AppLocator.php" , line : 47usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^App not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/IntegrityCheck/Checker.php" , line : 266usize , placeholders : & ["$appInfoDir"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^(.*) is not writable$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/IntegrityCheck/Checker.php" , line : 295usize , placeholders : & ["$coreDir"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^(.*) is not writable$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/IntegrityCheck/Checker.php" , line : 336usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidSignatureException") , regex : "^Signature data not found\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/IntegrityCheck/Checker.php" , line : 354usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidSignatureException") , regex : "^Certificate is not valid\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/IntegrityCheck/Checker.php" , line : 358usize , placeholders : & ["sprintf('Certificate is not valid for required scope. (Requested: %s, current: CN=%s)', $certificateCN, $x509->getDN(true)['CN'])"] , has_meaningful_message : false , exception : Some ("InvalidSignatureException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/IntegrityCheck/Checker.php" , line : 371usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidSignatureException") , regex : "^Signature could not get verified\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/IntegrityCheck/Checker.php" , line : 416usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Invalid behaviour in file hash comparison experienced\\. Please report this error to the developers\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/FullTextSearch/FullTextSearchManager.php" , line : 103usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("FullTextSearchAppNotAvailableException") , regex : "^No IProviderService registered$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/FullTextSearch/FullTextSearchManager.php" , line : 116usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("FullTextSearchAppNotAvailableException") , regex : "^No IIndexService registered$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/FullTextSearch/FullTextSearchManager.php" , line : 129usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("FullTextSearchAppNotAvailableException") , regex : "^No ISearchService registered$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Group/Manager.php" , line : 247usize , placeholders : & ["$groupId"] , has_meaningful_message : true , exception : None , regex : "^Group \"(.*)\" was returned by search but not found through direct access$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Group/Manager.php" , line : 280usize , placeholders : & ["$uid" , "$groupId"] , has_meaningful_message : true , exception : None , regex : "^User \"(.*)\" belongs to deleted group: \"(.*)\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Lockdown/Filesystem/NullCache.php" , line : 66usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\OC\\ForbiddenException") , regex : "^This request is not allowed to access the filesystem$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Lockdown/Filesystem/NullCache.php" , line : 70usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\OC\\ForbiddenException") , regex : "^This request is not allowed to access the filesystem$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Lockdown/Filesystem/NullCache.php" , line : 74usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\OC\\ForbiddenException") , regex : "^This request is not allowed to access the filesystem$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Lockdown/Filesystem/NullCache.php" , line : 90usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\OC\\ForbiddenException") , regex : "^This request is not allowed to access the filesystem$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Lockdown/Filesystem/NullCache.php" , line : 94usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\OC\\ForbiddenException") , regex : "^This request is not allowed to access the filesystem$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Lockdown/Filesystem/NullCache.php" , line : 98usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\OC\\ForbiddenException") , regex : "^This request is not allowed to access the filesystem$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Lockdown/Filesystem/NullCache.php" , line : 130usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\OC\\ForbiddenException") , regex : "^This request is not allowed to access the filesystem$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Lockdown/Filesystem/NullStorage.php" , line : 41usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\OC\\ForbiddenException") , regex : "^This request is not allowed to access the filesystem$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Lockdown/Filesystem/NullStorage.php" , line : 45usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\OC\\ForbiddenException") , regex : "^This request is not allowed to access the filesystem$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Lockdown/Filesystem/NullStorage.php" , line : 61usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\OC\\ForbiddenException") , regex : "^This request is not allowed to access the filesystem$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Lockdown/Filesystem/NullStorage.php" , line : 69usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\OC\\ForbiddenException") , regex : "^This request is not allowed to access the filesystem$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Lockdown/Filesystem/NullStorage.php" , line : 105usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\OC\\ForbiddenException") , regex : "^This request is not allowed to access the filesystem$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Lockdown/Filesystem/NullStorage.php" , line : 109usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\OC\\ForbiddenException") , regex : "^This request is not allowed to access the filesystem$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Lockdown/Filesystem/NullStorage.php" , line : 113usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\OC\\ForbiddenException") , regex : "^This request is not allowed to access the filesystem$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Lockdown/Filesystem/NullStorage.php" , line : 117usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\OC\\ForbiddenException") , regex : "^This request is not allowed to access the filesystem$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Lockdown/Filesystem/NullStorage.php" , line : 121usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\OC\\ForbiddenException") , regex : "^This request is not allowed to access the filesystem$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Lockdown/Filesystem/NullStorage.php" , line : 125usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\OC\\ForbiddenException") , regex : "^This request is not allowed to access the filesystem$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Lockdown/Filesystem/NullStorage.php" , line : 129usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\OC\\ForbiddenException") , regex : "^This request is not allowed to access the filesystem$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Lockdown/Filesystem/NullStorage.php" , line : 133usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\OC\\ForbiddenException") , regex : "^This request is not allowed to access the filesystem$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Lockdown/Filesystem/NullStorage.php" , line : 141usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\OC\\ForbiddenException") , regex : "^This request is not allowed to access the filesystem$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Lockdown/Filesystem/NullStorage.php" , line : 165usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\OC\\ForbiddenException") , regex : "^This request is not allowed to access the filesystem$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Lockdown/Filesystem/NullStorage.php" , line : 169usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\OC\\ForbiddenException") , regex : "^This request is not allowed to access the filesystem$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Updater.php" , line : 122usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Could not cleanup CAN_INSTALL from your config folder\\. Please remove this file manually\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Updater.php" , line : 129usize , placeholders : & ["$installedVersion" , "$currentVersion"] , has_meaningful_message : true , exception : None , regex : "^starting upgrade from (.*) to (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Updater.php" , line : 135usize , placeholders : & ["$exception->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Updater.php" , line : 141usize , placeholders : & ["$exception->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Updater.php" , line : 234usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Updates between multiple major versions and downgrades are unsupported\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Updater.php" , line : 242usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Updater.php" , line : 260usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Updater.php" , line : 284usize , placeholders : & ["$exception->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Updater.php" , line : 384usize , placeholders : & ["$app"] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^The files of the app \"(.*)\" were not correctly replaced before running the update$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Updater.php" , line : 428usize , placeholders : & ["$ex->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Updater.php" , line : 470usize , placeholders : & ["$event->getSubject()" , "$event->getArgument(0)" , "$event->getArgument(1)"] , has_meaningful_message : true , exception : None , regex : "^\\\\OC\\\\DB\\\\Migrator::executeSql: (.*) \\((.*) of (.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Updater.php" , line : 476usize , placeholders : & ["$event->getSubject()" , "$event->getArgument(0)" , "$event->getArgument(1)"] , has_meaningful_message : true , exception : None , regex : "^\\\\OC\\\\DB\\\\Migrator::checkTable: (.*) \\((.*) of (.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Updater.php" , line : 485usize , placeholders : & ["$event->getArgument(1)" , "$event->getArgument(0)"] , has_meaningful_message : true , exception : None , regex : "^\\\\OC\\\\Repair::startProgress: Starting \\.\\.\\. (.*) \\((.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Updater.php" , line : 492usize , placeholders : & ["$desc" , "$event->getArgument(0)"] , has_meaningful_message : true , exception : None , regex : "^\\\\OC\\\\Repair::advance: (.*) \\((.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Updater.php" , line : 496usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^\\\\OC\\\\Repair::finishProgress$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Updater.php" , line : 499usize , placeholders : & ["$event->getArgument(0)"] , has_meaningful_message : true , exception : None , regex : "^\\\\OC\\\\Repair::step: Repair step: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Updater.php" , line : 502usize , placeholders : & ["$event->getArgument(0)"] , has_meaningful_message : true , exception : None , regex : "^\\\\OC\\\\Repair::info: Repair info: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/Updater.php" , line : 505usize , placeholders : & ["$event->getArgument(0)"] , has_meaningful_message : true , exception : None , regex : "^\\\\OC\\\\Repair::warning: Repair warning: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Updater.php" , line : 508usize , placeholders : & ["$event->getArgument(0)"] , has_meaningful_message : true , exception : None , regex : "^\\\\OC\\\\Repair::error: Repair error: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Updater.php" , line : 523usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^\\\\OC\\\\Updater::maintenanceEnabled: Turned on maintenance mode$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Updater.php" , line : 526usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^\\\\OC\\\\Updater::maintenanceDisabled: Turned off maintenance mode$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Updater.php" , line : 529usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^\\\\OC\\\\Updater::maintenanceActive: Maintenance mode is kept active$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Updater.php" , line : 533usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^\\\\OC\\\\Updater::updateEnd: Update successful$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Updater.php" , line : 535usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^\\\\OC\\\\Updater::updateEnd: Update failed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Updater.php" , line : 539usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^\\\\OC\\\\Updater::dbUpgradeBefore: Updating database schema$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Updater.php" , line : 542usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^\\\\OC\\\\Updater::dbUpgrade: Updated database$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Updater.php" , line : 545usize , placeholders : & ["$app"] , has_meaningful_message : true , exception : None , regex : "^\\\\OC\\\\Updater::incompatibleAppDisabled: Disabled incompatible app: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Updater.php" , line : 548usize , placeholders : & ["$app"] , has_meaningful_message : true , exception : None , regex : "^\\\\OC\\\\Updater::checkAppStoreAppBefore: Checking for update of app \"(.*)\" in appstore$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Updater.php" , line : 551usize , placeholders : & ["$app"] , has_meaningful_message : true , exception : None , regex : "^\\\\OC\\\\Updater::upgradeAppStoreApp: Update app \"(.*)\" from appstore$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Updater.php" , line : 554usize , placeholders : & ["$app"] , has_meaningful_message : true , exception : None , regex : "^\\\\OC\\\\Updater::checkAppStoreApp: Checked for update of app \"(.*)\" in appstore$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Updater.php" , line : 557usize , placeholders : & ["$app"] , has_meaningful_message : true , exception : None , regex : "^\\\\OC\\\\Updater::appSimulateUpdate: Checking whether the database schema for <(.*)> can be updated \\(this can take a long time depending on the database size\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Updater.php" , line : 560usize , placeholders : & ["$app"] , has_meaningful_message : true , exception : None , regex : "^\\\\OC\\\\Updater::appUpgradeStarted: Updating <(.*)> \\.\\.\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Updater.php" , line : 563usize , placeholders : & ["$app" , "$version"] , has_meaningful_message : true , exception : None , regex : "^\\\\OC\\\\Updater::appUpgrade: Updated <(.*)> to (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Updater.php" , line : 566usize , placeholders : & ["$message"] , has_meaningful_message : true , exception : None , regex : "^\\\\OC\\\\Updater::failure: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Updater.php" , line : 569usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^\\\\OC\\\\Updater::setDebugLogLevel: Set log level to debug$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Updater.php" , line : 572usize , placeholders : & ["$logLevelName" , "$logLevel"] , has_meaningful_message : true , exception : None , regex : "^\\\\OC\\\\Updater::resetLogLevel: Reset log level to (.*)\\((.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Updater.php" , line : 575usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^\\\\OC\\\\Updater::startCheckCodeIntegrity: Starting code integrity check\\.\\.\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Updater.php" , line : 578usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^\\\\OC\\\\Updater::finishedCheckCodeIntegrity: Finished code integrity check$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Lock/DBLockingProvider.php" , line : 202usize , placeholders : & ["$path"] , has_meaningful_message : false , exception : Some ("LockedException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Lock/DBLockingProvider.php" , line : 247usize , placeholders : & ["$path"] , has_meaningful_message : false , exception : Some ("LockedException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Lock/DBLockingProvider.php" , line : 255usize , placeholders : & ["$path"] , has_meaningful_message : false , exception : Some ("LockedException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Lock/MemcacheLockingProvider.php" , line : 80usize , placeholders : & ["$path"] , has_meaningful_message : false , exception : Some ("LockedException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Lock/MemcacheLockingProvider.php" , line : 85usize , placeholders : & ["$path"] , has_meaningful_message : false , exception : Some ("LockedException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Lock/MemcacheLockingProvider.php" , line : 133usize , placeholders : & ["$path"] , has_meaningful_message : false , exception : Some ("LockedException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Lock/MemcacheLockingProvider.php" , line : 138usize , placeholders : & ["$path"] , has_meaningful_message : false , exception : Some ("LockedException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Setup.php" , line : 177usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Supported databases are not properly configured\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Setup.php" , line : 478usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^overwrite\\.cli\\.url is empty$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Setup.php" , line : 481usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^invalid value for overwrite\\.cli\\.url$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Activity/EventMerger.php" , line : 150usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Activity/EventMerger.php" , line : 168usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Activity/EventMerger.php" , line : 230usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Activity/Event.php" , line : 102usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given app is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Activity/Event.php" , line : 125usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given type is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Activity/Event.php" , line : 148usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given affected user is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Activity/Event.php" , line : 171usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given author user is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Activity/Event.php" , line : 215usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given subject is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Activity/Event.php" , line : 244usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given parsed subject is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Activity/Event.php" , line : 267usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given parsed subject is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Activity/Event.php" , line : 302usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given message is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Activity/Event.php" , line : 384usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given object type is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Activity/Event.php" , line : 387usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given object name is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Activity/Event.php" , line : 426usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given link is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Activity/Event.php" , line : 447usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given icon is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Activity/Manager.php" , line : 106usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given consumer does not implement the \\\\OCP\\\\Activity\\\\IConsumer interface$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Activity/Manager.php" , line : 153usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^The given event is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Activity/Manager.php" , line : 198usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid activity filter registered$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Activity/Manager.php" , line : 221usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Requested filter does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Activity/Manager.php" , line : 248usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid activity provider registered$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Activity/Manager.php" , line : 286usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid activity filter registered$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Activity/Manager.php" , line : 309usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Requested setting does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Activity/Manager.php" , line : 353usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^The given current user is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Activity/Manager.php" , line : 387usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^The token is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Activity/Manager.php" , line : 394usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^The token is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/LargeFileHelper.php" , line : 59usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^This class assumes floats to be double precision or \"better\"\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/LargeFileHelper.php" , line : 86usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^Expected int, float or base\\-10 string$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Server.php" , line : 874usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\OC\\DatabaseException") , regex : "^Invalid database type$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Server.php" , line : 997usize , placeholders : & ["$app"] , has_meaningful_message : true , exception : Some ("ServiceUnavailableException") , regex : "^The app providing the command bus \\((.*)\\) is not enabled$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Server.php" , line : 1496usize , placeholders : & ["$user->getUID()"] , has_meaningful_message : true , exception : None , regex : "^Could not cleanup avatar of (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Server.php" , line : 2395usize , placeholders : & ["$alias" , "$target"] , has_meaningful_message : true , exception : None , regex : "^The requested alias \"(.*)\" is deprecated\\. Please request \"(.*)\" directly\\. This alias will be removed in a future Nextcloud version\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Comments/Manager.php" , line : 159usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^Actor, Object and Verb information must be provided for saving$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Comments/Manager.php" , line : 164usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^Reactions can only be a single emoji$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Comments/Manager.php" , line : 243usize , placeholders : & ["$role"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^(.*) parameters must be string and not empty$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Comments/Manager.php" , line : 283usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^IDs must be translatable to a number in this implementation\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Comments/Manager.php" , line : 300usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Comments/Manager.php" , line : 936usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Parameter must be string$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Comments/Manager.php" , line : 955usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Comments/Manager.php" , line : 1009usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^Comment related with reaction not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Comments/Manager.php" , line : 1092usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("PreConditionNotMetException") , regex : "^The database does not support reactions$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Comments/Manager.php" , line : 1250usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Comments/Manager.php" , line : 1354usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^Comment to update does ceased to exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Comments/Manager.php" , line : 1429usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Comments/Manager.php" , line : 1536usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Comments/Manager.php" , line : 1569usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^String expected\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Comments/Manager.php" , line : 1572usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Displayname resolver for this type already registered$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Comments/Manager.php" , line : 1592usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^String expected\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Comments/Manager.php" , line : 1595usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^No Displayname resolver for this type registered$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Comments/Manager.php" , line : 1614usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given entity does not implement the ICommentsEntity interface$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Comments/Comment.php" , line : 91usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^String expected\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Comments/Comment.php" , line : 100usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("IllegalIDChangeException") , regex : "^Not allowed to assign a new ID to an already saved comment\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Comments/Comment.php" , line : 122usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^String expected\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Comments/Comment.php" , line : 148usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^String expected\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Comments/Comment.php" , line : 173usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Integer expected\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Comments/Comment.php" , line : 200usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^String expected\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Comments/Comment.php" , line : 204usize , placeholders : & ["$maxLength"] , has_meaningful_message : true , exception : Some ("MessageTooLongException") , regex : "^Comment message must not exceed (.*) characters$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Comments/Comment.php" , line : 272usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Non\\-empty String expected\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Comments/Comment.php" , line : 311usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^String expected\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Comments/Comment.php" , line : 397usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^String expected\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Comments/Comment.php" , line : 427usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Non empty string expected\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Repair.php" , line : 127usize , placeholders : & ["$step->getName()"] , has_meaningful_message : true , exception : None , regex : "^Exception while executing repair step (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Repair.php" , line : 150usize , placeholders : & ["$repairStep" , "$e->getMessage()"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Repair step '(.*)' can't be instantiated: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Repair.php" , line : 153usize , placeholders : & ["$repairStep"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Repair step '(.*)' is unknown$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Repair.php" , line : 160usize , placeholders : & ["$repairStep"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Repair step '(.*)' is not of type \\\\OCP\\\\Migration\\\\IRepairStep$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/AllConfig.php" , line : 257usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^Only integers, floats and strings are allowed as value$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/AllConfig.php" , line : 273usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("PreConditionNotMetException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/App/AppManager.php" , line : 243usize , placeholders : & ["print_r($enabled, true)" , "$jsonError"] , has_meaningful_message : true , exception : None , regex : "^AppManger::checkAppForUser \\- can't decode group IDs: (.*) \\- json error code: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/App/AppManager.php" , line : 276usize , placeholders : & ["print_r($enabled, true)" , "$jsonError"] , has_meaningful_message : true , exception : None , regex : "^AppManger::checkAppForUser \\- can't decode group IDs: (.*) \\- json error code: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/App/AppManager.php" , line : 359usize , placeholders : & ["$appId"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^(.*) can't be enabled for groups\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/App/AppManager.php" , line : 390usize , placeholders : & ["$appId"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^(.*) can't be disabled\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/App/AppManager.php" , line : 426usize , placeholders : & ["$appId"] , has_meaningful_message : true , exception : Some ("AppPathNotFoundException") , regex : "^Could not find path for (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/App/AppManager.php" , line : 441usize , placeholders : & ["$appId"] , has_meaningful_message : true , exception : Some ("AppPathNotFoundException") , regex : "^Could not find web path for (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/App/AppManager.php" , line : 572usize , placeholders : & ["$shippedJson"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^File not found: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/App/PlatformRepository.php" , line : 80usize , placeholders : & [] , has_meaningful_message : false , exception : None , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/App/PlatformRepository.php" , line : 211usize , placeholders : & ["$version" , "$extraMessage"] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^Invalid version string \"(.*)\"(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/App/CompareVersion.php" , line : 52usize , placeholders : & ["$actual"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^version specification (.*) is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/App/CompareVersion.php" , line : 63usize , placeholders : & ["$required"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^required version (.*) is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/App/AppStore/Bundles/BundleFetcher.php" , line : 83usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Bundle with specified identifier does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/App/AppStore/Version/VersionParser.php" , line : 78usize , placeholders : & ["sprintf(\n\t\t\t\t'Version cannot be parsed: %s',\n\t\t\t\t$versionSpec\n\t\t\t)"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/App/AppStore/Fetcher/AppFetcher.php" , line : 136usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/App/AppStore/Fetcher/Fetcher.php" , line : 206usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Could not connect to appstore: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/App/AppStore/Fetcher/Fetcher.php" , line : 209usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/RichObjectStrings/Validator.php" , line : 65usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidObjectExeption") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/RichObjectStrings/Validator.php" , line : 71usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidObjectExeption") , regex : "^Parameter is undefined$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/RichObjectStrings/Validator.php" , line : 78usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidObjectExeption") , regex : "^Parameter is malformed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/RichObjectStrings/Validator.php" , line : 91usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidObjectExeption") , regex : "^Object type is undefined$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/RichObjectStrings/Validator.php" , line : 99usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidObjectExeption") , regex : "^Object is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/L10N/L10N.php" , line : 233usize , placeholders : & ["$translationFile" , "$jsonError"] , has_meaningful_message : true , exception : None , regex : "^Failed to load (.*) \\- json error code: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/L10N/Factory.php" , line : 411usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Failed to get an IUser instance$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/L10N/Factory.php" , line : 498usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("LanguageNotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Encryption/Util.php" , line : 126usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ModuleDoesNotExistsException") , regex : "^Default encryption module missing$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Encryption/Util.php" , line : 146usize , placeholders : & ["$key"] , has_meaningful_message : false , exception : Some ("EncryptionHeaderKeyExistsException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Encryption/Util.php" , line : 153usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("EncryptionHeaderToLargeException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Encryption/Util.php" , line : 234usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^path needs to be relative to the system wide data folder and point to a user specific file$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Encryption/Keys/Storage.php" , line : 232usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ServerNotAvailableException") , regex : "^Key is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Encryption/Keys/Storage.php" , line : 247usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ServerNotAvailableException") , regex : "^Key has been modified$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Encryption/Keys/Storage.php" , line : 286usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ServerNotAvailableException") , regex : "^Could not decrypt key$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Encryption/Keys/Storage.php" , line : 291usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ServerNotAvailableException") , regex : "^Invalid encryption key$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Encryption/Keys/Storage.php" , line : 310usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ServerNotAvailableException") , regex : "^Invalid encryption key$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Encryption/Update.php" , line : 160usize , placeholders : & ["$info->getId()"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^No file found for (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Encryption/Update.php" , line : 196usize , placeholders : & ["$this->uid" , "$file"] , has_meaningful_message : true , exception : None , regex : "^Failed to update encryption module for (.*) (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Encryption/HookManager.php" , line : 60usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Inconsistent data, File unshared, but owner not found\\. Should not happen$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Encryption/Manager.php" , line : 94usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ServiceUnavailableException") , regex : "^Key Storage is not ready$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Encryption/Manager.php" , line : 129usize , placeholders : & ["$id"] , has_meaningful_message : false , exception : Some ("Exceptions\\ModuleAlreadyExistsException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Encryption/Manager.php" , line : 179usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("Exceptions\\ModuleDoesNotExistsException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Encryption/Manager.php" , line : 192usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("Exceptions\\ModuleDoesNotExistsException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Encryption/Manager.php" , line : 198usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("Exceptions\\ModuleDoesNotExistsException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Migration/SimpleOutput.php" , line : 49usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/Migration/SimpleOutput.php" , line : 57usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Search/Result/File.php" , line : 137usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Search result not in user folder$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Search/SearchComposer.php" , line : 101usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Could not load search provider dynamically: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Search/SearchComposer.php" , line : 158usize , placeholders : & ["$providerId"] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Provider (.*) is unknown$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Accounts/AccountPropertyCollection.php" , line : 61usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Provided property does not match collection name$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Accounts/AccountProperty.php" , line : 96usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Invalid scope$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Accounts/AccountProperty.php" , line : 192usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Provided verification value is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Accounts/Hooks.php" , line : 63usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Accounts/Account.php" , line : 53usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^setProperty cannot set an IAccountsPropertyCollection$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Accounts/Account.php" , line : 61usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^getProperty cannot retrieve an IAccountsPropertyCollection$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Accounts/Account.php" , line : 64usize , placeholders : & ["$property"] , has_meaningful_message : false , exception : Some ("PropertyDoesNotExistException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Accounts/Account.php" , line : 152usize , placeholders : & ["$propertyCollectionName"] , has_meaningful_message : false , exception : Some ("PropertyDoesNotExistException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Accounts/Account.php" , line : 158usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^Requested collection is not an IAccountPropertyCollection$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Accounts/AccountManager.php" , line : 161usize , placeholders : & ["self::PROPERTY_PHONE"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Accounts/AccountManager.php" , line : 176usize , placeholders : & ["self::PROPERTY_PHONE"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Accounts/AccountManager.php" , line : 188usize , placeholders : & ["self::PROPERTY_WEBSITE"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Accounts/AccountManager.php" , line : 192usize , placeholders : & ["self::PROPERTY_WEBSITE"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Accounts/AccountManager.php" , line : 205usize , placeholders : & ["$property->getName()"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Accounts/AccountManager.php" , line : 215usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^scope$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Accounts/AccountManager.php" , line : 224usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^scope$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Accounts/AccountManager.php" , line : 239usize , placeholders : & ["sprintf('sanitizePhoneNumberValue can only sanitize phone numbers, %s given', $property->getName())"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Accounts/AccountManager.php" , line : 259usize , placeholders : & ["sprintf('sanitizeWebsite can only sanitize web domains, %s given', $property->getName())"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Accounts/AccountManager.php" , line : 476usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Failed to send verification mail$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Critical , path : "/lib/private/Accounts/AccountManager.php" , line : 582usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^User data of \\{uid\\} contained invalid JSON \\(error \\{json_error\\}\\), hence falling back to a default user record$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/legacy/OC_EventSource.php" , line : 98usize , placeholders : & ["$type"] , has_meaningful_message : true , exception : Some ("BadMethodCallException") , regex : "^Type needs to be alphanumeric \\((.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/legacy/OC_Template.php" , line : 304usize , placeholders : & ["$error_msg" , "$hint"] , has_meaningful_message : false , exception : None , regex : "^(.*) (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Emergency , path : "/lib/private/legacy/OC_App.php" , line : 142usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Error during app loading: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/legacy/OC_App.php" , line : 178usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^/appinfo/app\\.php is not loaded when \\\\OCP\\\\AppFramework\\\\Bootstrap\\\\IBootstrap on the application class is used\\. Migrate everything from app\\.php to the Application class\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_App.php" , line : 182usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^/appinfo/app\\.php is deprecated, use \\\\OCP\\\\AppFramework\\\\Bootstrap\\\\IBootstrap on the application class instead\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/legacy/OC_App.php" , line : 644usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Failed to detect current app from script path$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_App.php" , line : 705usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^OC_App::registerLogIn\\(\\) is deprecated, please register your alternative login option using the registerAlternativeLogin\\(\\) on the RegistrationContext in your Application class implementing the OCP\\\\Authentication\\\\IAlternativeLogin interface$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/legacy/OC_App.php" , line : 718usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Alternative login option \\{option\\} does not implement \\{interface\\} and is therefore ignored\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/legacy/OC_App.php" , line : 1001usize , placeholders : & ["$appId"] , has_meaningful_message : true , exception : None , regex : "^The appinfo/database\\.xml file is not longer supported\\. Used in (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/legacy/OC_App.php" , line : 1213usize , placeholders : & ["$l->t('App \"%1$s\" cannot be installed because the following dependencies are not fulfilled: %2$s',\n\t\t\t\t\t[$info['name'], $missingMsg]\n\t\t\t\t)"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/legacy/OC_Image.php" , line : 96usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The first parameter in the constructor is not supported anymore\\. Please use any of the load\\* methods of the image object to load an image\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 160usize , placeholders : & ["$o"] , has_meaningful_message : true , exception : None , regex : "^OC_Image\\->widthTopLeft\\(\\) Orientation: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 184usize , placeholders : & ["$o"] , has_meaningful_message : true , exception : None , regex : "^OC_Image\\->heightTopLeft\\(\\) Orientation: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/legacy/OC_Image.php" , line : 229usize , placeholders : & ["__METHOD__"] , has_meaningful_message : true , exception : None , regex : "^(.*)\\(\\): called with no path\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/legacy/OC_Image.php" , line : 253usize , placeholders : & ["__METHOD__" , "dirname($filePath)"] , has_meaningful_message : true , exception : None , regex : "^(.*)\\(\\): Directory '(.*)' is not writable\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/legacy/OC_Image.php" , line : 256usize , placeholders : & ["__METHOD__" , "$filePath"] , has_meaningful_message : true , exception : None , regex : "^(.*)\\(\\): File '(.*)' is not writable\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/legacy/OC_Image.php" , line : 284usize , placeholders : & ["$mimeType"] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^\\\\OC_Image::_output\\(\\): \"(.*)\" is not supported when forcing a specific output format$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/legacy/OC_Image.php" , line : 302usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^\\\\OC_Image::_output\\(\\): imagexbm\\(\\) is not supported\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/legacy/OC_Image.php" , line : 340usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Supplied resource is not of type \"gd\"\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/legacy/OC_Image.php" , line : 394usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^OC_Image\\->data\\. Could not guess mime\\-type, defaulting to png$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/legacy/OC_Image.php" , line : 398usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^OC_Image\\->data\\. Error getting image data\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 433usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^OC_Image\\->fixOrientation\\(\\) Image is not a JPEG\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 437usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^OC_Image\\->fixOrientation\\(\\) Exif module not enabled\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 441usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^OC_Image\\->fixOrientation\\(\\) No image loaded\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 445usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^OC_Image\\->fixOrientation\\(\\) No readable file path set\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 461usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^OC_Image\\->fixOrientation\\(\\) Exif module not enabled\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 465usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^OC_Image\\->fixOrientation\\(\\) No image loaded\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 487usize , placeholders : & ["__METHOD__"] , has_meaningful_message : true , exception : None , regex : "^(.*)\\(\\): No image loaded$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 491usize , placeholders : & ["$o"] , has_meaningful_message : true , exception : None , regex : "^OC_Image\\->fixOrientation\\(\\) Orientation: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 538usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^OC_Image\\->fixOrientation\\(\\) Error during alpha\\-saving$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 542usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^OC_Image\\->fixOrientation\\(\\) Error during alpha\\-blending$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 546usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^OC_Image\\->fixOrientation\\(\\) Error during orientation fixing$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 584usize , placeholders : & ["$width" , "$height" , "$memory_limit"] , has_meaningful_message : true , exception : None , regex : "^Image size of (.*)x(.*) would exceed allowed memory limit of (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 657usize , placeholders : & ["$imagePath"] , has_meaningful_message : true , exception : None , regex : "^OC_Image\\->loadFromFile, GIF image not valid: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 660usize , placeholders : & ["$imagePath"] , has_meaningful_message : true , exception : None , regex : "^OC_Image\\->loadFromFile, GIF images not supported: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 671usize , placeholders : & ["$imagePath"] , has_meaningful_message : true , exception : None , regex : "^OC_Image\\->loadFromFile, JPG image not valid: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 674usize , placeholders : & ["$imagePath"] , has_meaningful_message : true , exception : None , regex : "^OC_Image\\->loadFromFile, JPG images not supported: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 688usize , placeholders : & ["$imagePath"] , has_meaningful_message : true , exception : None , regex : "^OC_Image\\->loadFromFile, PNG image not valid: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 691usize , placeholders : & ["$imagePath"] , has_meaningful_message : true , exception : None , regex : "^OC_Image\\->loadFromFile, PNG images not supported: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 701usize , placeholders : & ["$imagePath"] , has_meaningful_message : true , exception : None , regex : "^OC_Image\\->loadFromFile, XBM/XPM images not supported: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 711usize , placeholders : & ["$imagePath"] , has_meaningful_message : true , exception : None , regex : "^OC_Image\\->loadFromFile, WBMP images not supported: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 724usize , placeholders : & ["$imagePath"] , has_meaningful_message : true , exception : None , regex : "^OC_Image\\->loadFromFile, webp images not supported: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 760usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^OC_Image\\->loadFromFile, Default$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 794usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^OC_Image\\->loadFromFile, could not load$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 820usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^OC_Image\\->loadFromBase64, could not load$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/legacy/OC_Image.php" , line : 841usize , placeholders : & ["$fileName"] , has_meaningful_message : true , exception : None , regex : "^imagecreatefrombmp: Can not open (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/legacy/OC_Image.php" , line : 849usize , placeholders : & ["$fileName"] , has_meaningful_message : true , exception : None , regex : "^imagecreatefrombmp: Can not open (.*) is not a bitmap!$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/legacy/OC_Image.php" , line : 873usize , placeholders : & ["$fileName"] , has_meaningful_message : true , exception : None , regex : "^imagecreatefrombmp: Can not obtain file size of (.*) is not a bitmap!$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/legacy/OC_Image.php" , line : 899usize , placeholders : & ["$fileName" , "$meta['width']" , "$meta['height']"] , has_meaningful_message : true , exception : None , regex : "^imagecreatefrombmp: imagecreatetruecolor failed for file \"(.*)\" with dimensions (.*)x(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/legacy/OC_Image.php" , line : 918usize , placeholders : & ["$error"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/legacy/OC_Image.php" , line : 926usize , placeholders : & ["$error"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/legacy/OC_Image.php" , line : 973usize , placeholders : & ["$fileName" , "$meta['bits']"] , has_meaningful_message : true , exception : None , regex : "^imagecreatefrombmp: (.*) has (.*) bits and this is not supported!$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 995usize , placeholders : & ["__METHOD__"] , has_meaningful_message : true , exception : None , regex : "^(.*)\\(\\): No image loaded$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 1010usize , placeholders : & ["__METHOD__"] , has_meaningful_message : true , exception : None , regex : "^(.*)\\(\\): No image loaded$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 1035usize , placeholders : & ["__METHOD__"] , has_meaningful_message : true , exception : None , regex : "^(.*)\\(\\): No image loaded$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/legacy/OC_Image.php" , line : 1052usize , placeholders : & ["__METHOD__"] , has_meaningful_message : true , exception : None , regex : "^(.*)\\(\\): Requested image size not bigger than 0$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 1056usize , placeholders : & ["__METHOD__"] , has_meaningful_message : true , exception : None , regex : "^(.*)\\(\\): No image loaded$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 1063usize , placeholders : & ["__METHOD__"] , has_meaningful_message : true , exception : None , regex : "^(.*)\\(\\): Error creating true color image$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 1076usize , placeholders : & ["__METHOD__"] , has_meaningful_message : true , exception : None , regex : "^(.*)\\(\\): Error re\\-sampling process image$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 1091usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^OC_Image\\->centerCrop, No image loaded$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 1118usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^OC_Image\\->centerCrop, Error creating true color image$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 1131usize , placeholders : & ["$width" , "$height"] , has_meaningful_message : true , exception : None , regex : "^OC_Image\\->centerCrop, Error re\\-sampling process image (.*)x(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 1150usize , placeholders : & ["__METHOD__"] , has_meaningful_message : true , exception : None , regex : "^(.*)\\(\\): No image loaded$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 1170usize , placeholders : & ["__METHOD__"] , has_meaningful_message : true , exception : None , regex : "^(.*)\\(\\): No image loaded$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 1175usize , placeholders : & ["__METHOD__"] , has_meaningful_message : true , exception : None , regex : "^(.*)\\(\\): Error creating true color image$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 1188usize , placeholders : & ["__METHOD__" , "$w" , "$h"] , has_meaningful_message : true , exception : None , regex : "^(.*)\\(\\): Error re\\-sampling process image (.*)x(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 1205usize , placeholders : & ["__METHOD__"] , has_meaningful_message : true , exception : None , regex : "^(.*)\\(\\): No image loaded$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Image.php" , line : 1228usize , placeholders : & ["__METHOD__"] , has_meaningful_message : true , exception : None , regex : "^(.*)\\(\\): No image loaded$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/legacy/OC_Helper.php" , line : 514usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\OCP\\Files\\NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/legacy/OC_Helper.php" , line : 556usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Error while getting quota info, using root quota$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/legacy/OC_Files.php" , line : 172usize , placeholders : & ["$event->getErrorMessage()"] , has_meaningful_message : false , exception : Some ("\\OC\\ForbiddenException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Files.php" , line : 201usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^File given, but no Node available\\. Name \\{file\\}$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/legacy/OC_Files.php" , line : 344usize , placeholders : & ["$msg"] , has_meaningful_message : false , exception : Some ("\\OC\\ForbiddenException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/legacy/OC_Util.php" , line : 207usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^no instance id!$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/legacy/OC_Util.php" , line : 211usize , placeholders : & ["$appdata"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^username is reserved name: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/legacy/OC_Util.php" , line : 215usize , placeholders : & ["$userId" , "$skeletonDirectory" , "$userDirectory->getFullPath('/')"] , has_meaningful_message : true , exception : None , regex : "^copying skeleton for (.*) from (.*) to (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/legacy/OC_Util.php" , line : 239usize , placeholders : & ["sprintf('Could not opendir \"%s\"', $source)"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/legacy/OC_Util.php" , line : 253usize , placeholders : & ["sprintf('Could not fopen \"%s\"', $source . '/' . $file)"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/legacy/OC_Util.php" , line : 758usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Error occurred while checking PostgreSQL version, assuming >= 9$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/legacy/OC_Util.php" , line : 954usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\OCP\\HintException") , regex : "^Can't create test file to check for working \\.htaccess file\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/legacy/OC_Util.php" , line : 1122usize , placeholders : & ["$value"] , has_meaningful_message : true , exception : None , regex : "^normalizing failed for \"(.*)\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/legacy/OC_Util.php" , line : 1199usize , placeholders : & ["$installedVersion" , "$currentVersion"] , has_meaningful_message : true , exception : Some ("\\OCP\\HintException") , regex : "^Downgrading is not supported and is likely to cause unpredictable issues \\(from (.*) to (.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/legacy/OC_Util.php" , line : 1203usize , placeholders : & ["$installedVersion" , "$currentVersion"] , has_meaningful_message : true , exception : Some ("\\OCP\\HintException") , regex : "^Downgrading is not supported and is likely to cause unpredictable issues \\(from (.*) to (.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/legacy/OC_DB.php" , line : 57usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : Some ("\\OC\\DatabaseException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/legacy/OC_DB.php" , line : 112usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("\\OC\\DatabaseException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/legacy/OC_DB.php" , line : 120usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("\\OC\\DatabaseException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/legacy/OC_DB.php" , line : 140usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("\\OC\\DatabaseException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/legacy/OC_DB.php" , line : 159usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("\\OC\\DatabaseException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/legacy/OC_User.php" , line : 177usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("LoginException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Diagnostics/EventLogger.php" , line : 134usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Http/IpUtils.php" , line : 116usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Unable to check Ipv6\\. Check that PHP was not compiled with option \"disable\\-ipv6\"\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Http/WellKnown/RequestManager.php" , line : 95usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^Well known handlers requested before the apps had been fully registered$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Http/WellKnown/RequestManager.php" , line : 99usize , placeholders : & ["count($registrations)"] , has_meaningful_message : true , exception : None , regex : "^(.*) well known handlers registered$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Http/WellKnown/RequestManager.php" , line : 110usize , placeholders : & ["$class"] , has_meaningful_message : true , exception : None , regex : "^Well known handler (.*) is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Http/WellKnown/RequestManager.php" , line : 117usize , placeholders : & ["$class"] , has_meaningful_message : true , exception : None , regex : "^Could not load well known handler (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/Http/Client/LocalAddressChecker.php" , line : 68usize , placeholders : & ["$ip"] , has_meaningful_message : true , exception : None , regex : "^Host (.*) was not connected to because it violates local access rules$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Http/Client/LocalAddressChecker.php" , line : 69usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LocalServerException") , regex : "^Host violates local access rules$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/Http/Client/LocalAddressChecker.php" , line : 76usize , placeholders : & ["$uri"] , has_meaningful_message : true , exception : None , regex : "^Could not detect any host in (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Http/Client/LocalAddressChecker.php" , line : 77usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LocalServerException") , regex : "^Could not detect any host$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/Http/Client/LocalAddressChecker.php" , line : 90usize , placeholders : & ["$host"] , has_meaningful_message : true , exception : None , regex : "^Host (.*) was not connected to because it violates local access rules$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Http/Client/LocalAddressChecker.php" , line : 91usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LocalServerException") , regex : "^Host violates local access rules$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/Http/Client/LocalAddressChecker.php" , line : 96usize , placeholders : & ["$host"] , has_meaningful_message : true , exception : None , regex : "^Host (.*) was not connected to because it violates local access rules$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Http/Client/LocalAddressChecker.php" , line : 97usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("LocalServerException") , regex : "^Host violates local access rules$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Config.php" , line : 229usize , placeholders : & ["sprintf('Could not acquire a shared lock on the config file %s', $file)"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Config.php" , line : 258usize , placeholders : & ["sprintf('Configuration was not read or initialized correctly, not overwriting %s', $this->configFilePath)"] , has_meaningful_message : false , exception : Some ("HintException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Config.php" , line : 275usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("HintException") , regex : "^Can't write into config directory!$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Config.php" , line : 285usize , placeholders : & ["$this->configDir"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^(.*) does not have enough space for writing the config file! Not writing it back!$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Config.php" , line : 291usize , placeholders : & ["sprintf('Could not acquire an exclusive lock on the config file %s', $this->configFilePath)"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Config.php" , line : 311usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("HintException") , regex : "^Config is set to be read\\-only via option \"config_is_read_only\"\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/UserStatus/Manager.php" , line : 99usize , placeholders : & ["$this->providerClass" , "$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Could not load user\\-status \"(.*)\" provider dynamically: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Template/TemplateFileLocator.php" , line : 46usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Empty template name$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Template/TemplateFileLocator.php" , line : 56usize , placeholders : & ["$template"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^template file not found: template:(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Template/ResourceLocator.php" , line : 81usize , placeholders : & ["$e->getResourcePath()"] , has_meaningful_message : true , exception : None , regex : "^Could not find resource file \"(.*)\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Template/ResourceLocator.php" , line : 90usize , placeholders : & ["$e->getResourcePath()"] , has_meaningful_message : true , exception : None , regex : "^Could not find resource file in theme \"(.*)\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Template/ResourceLocator.php" , line : 168usize , placeholders : & ["$file"] , has_meaningful_message : false , exception : Some ("ResourceNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Template/ResourceLocator.php" , line : 178usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^ResourceLocator can not find a web root \\(root: \\{root\\}, file: \\{file\\}, webRoot: \\{webRoot\\}, throw: \\{throw\\}\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Template/ResourceLocator.php" , line : 190usize , placeholders : & ["$file"] , has_meaningful_message : false , exception : Some ("ResourceNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Template/CSSResourceLocator.php" , line : 72usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Could not find resource \\{resource\\} to load$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/Template/CSSResourceLocator.php" , line : 113usize , placeholders : & ["$root" , "$file"] , has_meaningful_message : true , exception : None , regex : "^Failed to compile and/or save (.*)/(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Template/CSSResourceLocator.php" , line : 132usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^ResourceLocator can not find a web root \\(root: \\{root\\}, file: \\{file\\}, webRoot: \\{webRoot\\}, throw: \\{throw\\}\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Template/CSSResourceLocator.php" , line : 141usize , placeholders : & ["$file"] , has_meaningful_message : false , exception : Some ("ResourceNotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Template/JSCombiner.php" , line : 124usize , placeholders : & ["$fileName"] , has_meaningful_message : true , exception : None , regex : "^JSCombiner: deps file empty: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Template/JSCombiner.php" , line : 199usize , placeholders : & ["$fileName"] , has_meaningful_message : true , exception : None , regex : "^JSCombiner: successfully cached: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Template/JSCombiner.php" , line : 202usize , placeholders : & ["$fileName"] , has_meaningful_message : true , exception : None , regex : "^JSCombiner: unable to cache: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Template/SCSSCacher.php" , line : 141usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^SCSSCacher::process ordinary check follows$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Template/SCSSCacher.php" , line : 157usize , placeholders : & ["$lockKey"] , has_meaningful_message : true , exception : None , regex : "^SCSSCacher::process could not get lock for (.*) and will wait 10 seconds for cached file to be available$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Template/SCSSCacher.php" , line : 162usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^SCSSCacher::process check in while loop follows$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Template/SCSSCacher.php" , line : 165usize , placeholders : & ["$app" , "$fileNameCSS" , "$retry"] , has_meaningful_message : true , exception : None , regex : "^SCSSCacher::process cached file for app '(.*)' and file '(.*)' is now available after (.*) s\\. Moving on\\.\\.\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Template/SCSSCacher.php" , line : 171usize , placeholders : & ["$lockKey"] , has_meaningful_message : true , exception : None , regex : "^SCSSCacher::process Giving up scss caching for (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Template/SCSSCacher.php" , line : 175usize , placeholders : & ["$lockKey"] , has_meaningful_message : true , exception : None , regex : "^SCSSCacher::process Lock acquired for (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Template/SCSSCacher.php" , line : 185usize , placeholders : & ["$lockKey"] , has_meaningful_message : true , exception : None , regex : "^SCSSCacher::process Lock removed for (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Template/SCSSCacher.php" , line : 223usize , placeholders : & ["$fileNameCSS"] , has_meaningful_message : true , exception : None , regex : "^SCSSCacher::isCached (.*) isCachedCache is expired or unset$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Template/SCSSCacher.php" , line : 229usize , placeholders : & ["$app"] , has_meaningful_message : true , exception : None , regex : "^SCSSCacher::isCached app data folder for (.*) could not be fetched$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Template/SCSSCacher.php" , line : 250usize , placeholders : & ["$fileNameCSS" , "$file"] , has_meaningful_message : true , exception : None , regex : "^SCSSCacher::isCached (.*) is not considered as cached due to deps file (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Template/SCSSCacher.php" , line : 255usize , placeholders : & ["$fileNameCSS"] , has_meaningful_message : true , exception : None , regex : "^SCSSCacher::isCached (.*) dependencies successfully cached for 5 minutes$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Template/SCSSCacher.php" , line : 260usize , placeholders : & ["$fileNameCSS" , "$cacheValue"] , has_meaningful_message : true , exception : None , regex : "^SCSSCacher::isCached (.*) is not considered as cached cacheValue: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Template/SCSSCacher.php" , line : 263usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^SCSSCacher::isCached NotFoundException (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Template/SCSSCacher.php" , line : 283usize , placeholders : & ["json_encode($this->config->getAppValue('core', 'theming.variables'))" , "json_encode($injectedVariables)"] , has_meaningful_message : true , exception : None , regex : "^SCSSCacher::variablesChanged storedVariables: (.*) currentInjectedVariables: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Template/SCSSCacher.php" , line : 340usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Template/SCSSCacher.php" , line : 362usize , placeholders : & ["$webDir" , "$fileNameSCSS"] , has_meaningful_message : true , exception : None , regex : "^SCSSCacher::cache (.*)/(.*) compiled and successfully cached$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Template/SCSSCacher.php" , line : 366usize , placeholders : & ["$fileNameSCSS"] , has_meaningful_message : true , exception : None , regex : "^SCSSCacher::cache unable to cache: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Template/SCSSCacher.php" , line : 377usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^SCSSCacher::resetCache$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Template/SCSSCacher.php" , line : 379usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^SCSSCacher::resetCache Locked$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Template/SCSSCacher.php" , line : 382usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^SCSSCacher::resetCache Lock acquired$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Template/SCSSCacher.php" , line : 395usize , placeholders : & ["$file->getName()"] , has_meaningful_message : true , exception : None , regex : "^SCSSCacher::resetCache unable to delete file: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Template/SCSSCacher.php" , line : 399usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^SCSSCacher::resetCache css cache cleared!$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Template/SCSSCacher.php" , line : 401usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^SCSSCacher::resetCache Locking removed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Template/SCSSCacher.php" , line : 431usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Template/IconsCacher.php" , line : 129usize , placeholders : & ["$location"] , has_meaningful_message : true , exception : None , regex : "^Failed to get icon file (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Template/JSResourceLocator.php" , line : 103usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Could not find resource \\{resource\\} to load$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/Search.php" , line : 68usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Ignoring Unknown search provider$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/InitialStateService.php" , line : 72usize , placeholders : & ["$key" , "$appName"] , has_meaningful_message : true , exception : None , regex : "^Invalid (.*) data provided to provideInitialState by (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/InitialStateService.php" , line : 93usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Lazy initial state provider for \\{key\\} took \\{duration\\} seconds\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/InitialStateService.php" , line : 121usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Could not load initial state provider dynamically: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/InitialStateService.php" , line : 130usize , placeholders : & ["$initialState->getService()"] , has_meaningful_message : true , exception : None , regex : "^Initial state provider is not an InitialStateProvider instance: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/RemoveLinkShares.php" , line : 227usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Sending notifications to admins and affected users$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/RemoveLinkShares.php" , line : 233usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^No need to remove link shares\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/RemoveLinkShares.php" , line : 237usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Removing potentially over exposing link shares$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/RemoveLinkShares.php" , line : 239usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Removed potentially over exposing link shares$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/OldGroupMembershipShares.php" , line : 95usize , placeholders : & ["$deletedEntries"] , has_meaningful_message : true , exception : None , regex : "^Removed (.*) shares where user is not a member of the group anymore$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/CleanTags.php" , line : 85usize , placeholders : & ["sprintf('%d tags of deleted users have been removed.', $this->deletedTags)"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/CleanTags.php" , line : 206usize , placeholders : & ["sprintf($repairInfo, count($orphanItems))"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/RepairDavShares.php" , line : 114usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Repaired principal for dav share \\{id\\} from \\{old\\} to \\{new\\}$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/RepairDavShares.php" , line : 118usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Could not repair principal for dav share \\{id\\} from \\{old\\} to \\{new\\}: \\{message\\}$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/RepairDavShares.php" , line : 132usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Repaired DAV group shares$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/RepairDavShares.php" , line : 134usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Invalid shares might be left in the database, running \"occ dav:remove\\-invalid\\-shares\" can remove them\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/MoveUpdaterStepFile.php" , line : 56usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^\\.step file exists$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/MoveUpdaterStepFile.php" , line : 63usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^\\.step\\-previous\\-update removed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/MoveUpdaterStepFile.php" , line : 65usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^\\.step\\-previous\\-update can't be removed \\- abort move of \\.step file$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/MoveUpdaterStepFile.php" , line : 72usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^\\.step file moved to \\.step\\-previous\\-update$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/Repair/MoveUpdaterStepFile.php" , line : 74usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^\\.step file can't be moved$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/Repair/NC21/ValidatePhoneNumber.php" , line : 59usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Can not validate phone numbers without `default_phone_region` being set in the config file$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/NC21/ValidatePhoneNumber.php" , line : 86usize , placeholders : & ["$numUpdated" , "$numRemoved"] , has_meaningful_message : true , exception : None , regex : "^Updated (.*) entries and cleaned (.*) invalid phone numbers$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/Owncloud/CleanPreviewsBackgroundJob.php" , line : 68usize , placeholders : & ["$uid"] , has_meaningful_message : true , exception : None , regex : "^User no longer exists, skip user (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/Owncloud/CleanPreviewsBackgroundJob.php" , line : 71usize , placeholders : & ["$uid"] , has_meaningful_message : true , exception : None , regex : "^Started preview cleanup for (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/Owncloud/CleanPreviewsBackgroundJob.php" , line : 76usize , placeholders : & ["$uid"] , has_meaningful_message : true , exception : None , regex : "^New preview cleanup scheduled for (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/Owncloud/CleanPreviewsBackgroundJob.php" , line : 78usize , placeholders : & ["$uid"] , has_meaningful_message : true , exception : None , regex : "^Preview cleanup done for (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/Owncloud/InstallCoreBundle.php" , line : 73usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Successfully installed core app bundle\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/Repair/Owncloud/InstallCoreBundle.php" , line : 75usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Could not install core app bundle: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/Owncloud/MoveAvatarsBackgroundJob.php" , line : 61usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Started migrating avatars to AppData folder$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/Owncloud/MoveAvatarsBackgroundJob.php" , line : 63usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^All avatars migrated to AppData folder$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/Owncloud/MoveAvatarsBackgroundJob.php" , line : 68usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^No legacy avatars available, skipping migration$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Repair/Owncloud/MoveAvatarsBackgroundJob.php" , line : 85usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Failed to open old avatar file for reading$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Repair/Owncloud/MoveAvatarsBackgroundJob.php" , line : 90usize , placeholders : & ["$uid"] , has_meaningful_message : true , exception : None , regex : "^Failed to migrate avatar for user (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/Owncloud/MoveAvatarsBackgroundJob.php" , line : 95usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^\\{amount\\} avatars migrated$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Repair/Owncloud/MoveAvatarsBackgroundJob.php" , line : 110usize , placeholders : & ["$path"] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^(.*)/avatar\\.jpg\\|png$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/Owncloud/MigrateOauthTables.php" , line : 51usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^oauth2_clients table does not exist\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/Owncloud/MigrateOauthTables.php" , line : 55usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Update the oauth2_access_tokens table schema\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/Owncloud/MigrateOauthTables.php" , line : 77usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Update the oauth2_clients table schema\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/Owncloud/MigrateOauthTables.php" , line : 100usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Move identifier column's data to the new client_identifier column\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/Owncloud/MigrateOauthTables.php" , line : 117usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Drop the identifier column\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/Owncloud/MoveAvatars.php" , line : 60usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Repair step already executed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/Owncloud/MoveAvatars.php" , line : 64usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Avatars are disabled$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/Owncloud/MoveAvatars.php" , line : 66usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Add background job$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/Owncloud/UpdateLanguageCodes.php" , line : 85usize , placeholders : & ["$affectedRows" , "$oldCode" , "$newCode"] , has_meaningful_message : true , exception : None , regex : "^Changed (.*) setting\\(s\\) from \"(.*)\" to \"(.*)\" in preferences table\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/ClearGeneratedAvatarCache.php" , line : 65usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Avatar cache cleared$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/Repair/ClearGeneratedAvatarCache.php" , line : 67usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Unable to clear the avatar cache$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Repair/NC16/CleanupCardDAVPhotoCache.php" , line : 73usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Failed to fetch directory listing in CleanupCardDAVPhotoCache$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/NC16/CleanupCardDAVPhotoCache.php" , line : 85usize , placeholders : & ["count($folders)"] , has_meaningful_message : true , exception : None , regex : "^Delete (.*) \"photo\\.\" files$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Repair/NC16/CleanupCardDAVPhotoCache.php" , line : 92usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/Repair/NC16/CleanupCardDAVPhotoCache.php" , line : 93usize , placeholders : & ["$folder->getName()"] , has_meaningful_message : true , exception : None , regex : "^Could not delete file \"dav\\-photocache/(.*)/photo\\.\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/NC11/FixMountStorages.php" , line : 73usize , placeholders : & ["$entriesUpdated"] , has_meaningful_message : true , exception : None , regex : "^(.*) mounts updated$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/NC11/FixMountStorages.php" , line : 77usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^No mounts updated$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/RepairMimeTypes.php" , line : 225usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Fixed image mime types$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/RepairMimeTypes.php" , line : 229usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Fixed windows program mime types$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/RepairMimeTypes.php" , line : 233usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Fixed geospatial mime types$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/RepairMimeTypes.php" , line : 237usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Fixed internet\\-shortcut mime types$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/RepairMimeTypes.php" , line : 241usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Fixed streaming mime types$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/RepairMimeTypes.php" , line : 245usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Fixed visio mime types$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/RepairMimeTypes.php" , line : 249usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Fixed comicbook mime types$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/RepairMimeTypes.php" , line : 253usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Fixed OpenDocument template mime types$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/RepairMimeTypes.php" , line : 257usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Fixed orgmode mime types$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/RepairMimeTypes.php" , line : 261usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Fixed Flat OpenDocument mime types$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/RepairInvalidShares.php" , line : 72usize , placeholders : & ["$updatedEntries"] , has_meaningful_message : true , exception : None , regex : "^Fixed file share permissions for (.*) shares$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/RepairInvalidShares.php" , line : 108usize , placeholders : & ["$deletedEntries"] , has_meaningful_message : true , exception : None , regex : "^Removed (.*) shares where the parent did not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/Collation.php" , line : 73usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Not a mysql database \\-> nothing to do$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/Collation.php" , line : 81usize , placeholders : & ["$table"] , has_meaningful_message : true , exception : None , regex : "^Change row format for (.*) \\.\\.\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Repair/Collation.php" , line : 87usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/Collation.php" , line : 93usize , placeholders : & ["$table"] , has_meaningful_message : true , exception : None , regex : "^Change collation for (.*) \\.\\.\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Repair/Collation.php" , line : 99usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/Collation.php" , line : 106usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^All tables already have the correct collation \\-> nothing to do$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/ClearFrontendCaches.php" , line : 60usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Image cache cleared$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/ClearFrontendCaches.php" , line : 63usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^SCSS cache cleared$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/ClearFrontendCaches.php" , line : 66usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^JS cache cleared$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/Repair/ClearFrontendCaches.php" , line : 68usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Unable to clear the frontend cache$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Repair/NC20/ShippedDashboardEnable.php" , line : 49usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Removed old dashboard app config$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Notification/Manager.php" , line : 124usize , placeholders : & ["$exception->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Notification/Manager.php" , line : 148usize , placeholders : & ["$appClass"] , has_meaningful_message : true , exception : None , regex : "^Failed to load notification app class: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Notification/Manager.php" , line : 156usize , placeholders : & ["$appClass" , "IApp::class"] , has_meaningful_message : true , exception : None , regex : "^Notification app class (.*) is not implementing (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Notification/Manager.php" , line : 180usize , placeholders : & ["$notifierService->getService()"] , has_meaningful_message : true , exception : None , regex : "^Failed to load notification notifier class: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Notification/Manager.php" , line : 188usize , placeholders : & ["$notifierService->getService()" , "INotifier::class"] , has_meaningful_message : true , exception : None , regex : "^Notification notifier class (.*) is not implementing (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Notification/Manager.php" , line : 208usize , placeholders : & ["$notifierClass"] , has_meaningful_message : true , exception : None , regex : "^Failed to load notification notifier class: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Notification/Manager.php" , line : 216usize , placeholders : & ["$notifierClass" , "INotifier::class"] , has_meaningful_message : true , exception : None , regex : "^Notification notifier class (.*) is not implementing (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Notification/Manager.php" , line : 330usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given notification is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Notification/Manager.php" , line : 381usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given notification has been processed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Notification/Manager.php" , line : 385usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given notification has not been handled$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Notification/Manager.php" , line : 390usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given notification has not been handled$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Notification/Notification.php" , line : 134usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given app name is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Notification/Notification.php" , line : 156usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given user id is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Notification/Notification.php" , line : 178usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given date time is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Notification/Notification.php" , line : 201usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given object type is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Notification/Notification.php" , line : 206usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given object id is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Notification/Notification.php" , line : 237usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given subject is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Notification/Notification.php" , line : 270usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given parsed subject is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Notification/Notification.php" , line : 293usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given parsed subject is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Notification/Notification.php" , line : 327usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given message is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Notification/Notification.php" , line : 360usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given parsed message is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Notification/Notification.php" , line : 383usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given parsed message is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Notification/Notification.php" , line : 416usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given link is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Notification/Notification.php" , line : 438usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given icon is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Notification/Notification.php" , line : 468usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given action is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Notification/Notification.php" , line : 473usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The notification already has a primary action$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Notification/Notification.php" , line : 499usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given parsed action is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Notification/Notification.php" , line : 504usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The notification already has a primary action$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Notification/Action.php" , line : 65usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given label is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Notification/Action.php" , line : 87usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given parsed label is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Notification/Action.php" , line : 128usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given link is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Notification/Action.php" , line : 137usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given request type is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Mail/Mailer.php" , line : 199usize , placeholders : & ["$logMessage"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Mail/Mailer.php" , line : 201usize , placeholders : & ["$mailLogger->dump()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DB/ConnectionFactory.php" , line : 107usize , placeholders : & ["$type"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Unsupported type: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DB/ResultAdapter.php" , line : 56usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Fetch mode needs to be assoc, num or column\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DB/MigrationService.php" , line : 249usize , placeholders : & ["$version"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Cannot load a migrations with the name '(.*)' because it is a reserved number$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DB/MigrationService.php" , line : 396usize , placeholders : & ["$version"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Version (.*) is unknown\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DB/MigrationService.php" , line : 429usize , placeholders : & ["$version" , "$this->getApp()" , "PHP_EOL" , "$e->getMessage()"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Database error when running migration (.*) for app (.*)(.*)(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DB/MigrationService.php" , line : 501usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Not a valid migration$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DB/MigrationService.php" , line : 507usize , placeholders : & ["$class"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Migration step '(.*)' is unknown$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DB/MigrationService.php" , line : 583usize , placeholders : & ["$table->getName()"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Table name \"(.*)\" is too long\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DB/MigrationService.php" , line : 592usize , placeholders : & ["$table->getName()" , "$thing->getName()"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Column name \"(.*)\"\\.\"(.*)\" is too long\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DB/MigrationService.php" , line : 597usize , placeholders : & ["$table->getName()" , "$thing->getName()"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Column \"(.*)\"\\.\"(.*)\" is NotNull, but has empty string or null as default\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DB/MigrationService.php" , line : 601usize , placeholders : & ["$table->getName()" , "$thing->getName()"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Column \"(.*)\"\\.\"(.*)\" is type Bool and also NotNull, so it can not store \"false\"\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DB/MigrationService.php" , line : 613usize , placeholders : & ["$table->getName()" , "$thing->getName()"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Column \"(.*)\"\\.\"(.*)\" is type String, but exceeding the 4\\.000 length limit\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DB/MigrationService.php" , line : 619usize , placeholders : & ["$table->getName()" , "$thing->getName()"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Index name \"(.*)\"\\.\"(.*)\" is too long\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DB/MigrationService.php" , line : 625usize , placeholders : & ["$table->getName()" , "$thing->getName()"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Foreign key name \"(.*)\"\\.\"(.*)\" is too long\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DB/MigrationService.php" , line : 650usize , placeholders : & ["$table->getName()"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Primary index name on \"(.*)\" is too long\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DB/MigrationService.php" , line : 653usize , placeholders : & ["$table->getName()"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Primary index name on \"(.*)\" is too long\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/DB/MigrationService.php" , line : 658usize , placeholders : & ["$table->getName()"] , has_meaningful_message : true , exception : None , regex : "^Table \"(.*)\" has no primary key and therefor will not behave sane in clustered setups\\. This will throw an exception and not be installable in a future version of Nextcloud\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DB/MigrationService.php" , line : 665usize , placeholders : & ["$sequence->getName()"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Sequence name \"(.*)\" is too long\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DB/Connection.php" , line : 95usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^adapter not set$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DB/Connection.php" , line : 98usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^tablePrefix not set$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DB/Connection.php" , line : 139usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Failed to connect to the database: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/DB/Connection.php" , line : 170usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Doctrine QueryBuilder retrieved in \\{backtrace\\}$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/DB/Connection.php" , line : 183usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Doctrine ExpressionBuilder retrieved in \\{backtrace\\}$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DB/Connection.php" , line : 422usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("PreConditionNotMetException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DB/Connection.php" , line : 440usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Can not lock a new table until the previous lock is released\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DB/AdapterOCI8.php" , line : 30usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Oracle requires a table name to be passed into lastInsertId\\(\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/DB/QueryBuilder/QueryBuilder.php" , line : 217usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^DB QueryBuilder: '\\{query\\}'$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/DB/QueryBuilder/QueryBuilder.php" , line : 222usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^DB QueryBuilder: '\\{query\\}' with parameters: \\{params\\}$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/DB/QueryBuilder/QueryBuilder.php" , line : 230usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^DB QueryBuilder: error trying to log SQL query$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/DB/QueryBuilder/QueryBuilder.php" , line : 245usize , placeholders : & ["$exception->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/DB/QueryBuilder/QueryBuilder.php" , line : 265usize , placeholders : & ["$exception->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/DB/QueryBuilder/QueryBuilder.php" , line : 274usize , placeholders : & ["$exception->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DB/QueryBuilder/QueryBuilder.php" , line : 290usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Invalid query type, expected SELECT query$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DB/QueryBuilder/QueryBuilder.php" , line : 303usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Invalid return type for query$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DB/QueryBuilder/QueryBuilder.php" , line : 323usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Invalid query type, expected INSERT, DELETE or UPDATE statement$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DB/QueryBuilder/QueryBuilder.php" , line : 333usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Invalid return type for statement$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DB/QueryBuilder/QueryBuilder.php" , line : 1294usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Invalid call to getLastInsertId without using insert\\(\\) before\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DB/QueryBuilder/QuoteHelper.php" , line : 61usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Only strings, Literals and Parameters are allowed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DB/PreparedStatement.php" , line : 99usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^You have to execute the prepared statement before accessing the results$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/BackgroundJob/Job.php" , line : 53usize , placeholders : & ["get_class($this)" , "$this->getId()"] , has_meaningful_message : true , exception : None , regex : "^Run (.*) job with ID (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/BackgroundJob/Job.php" , line : 57usize , placeholders : & ["get_class($this)" , "$this->getId()" , "$timeTaken"] , has_meaningful_message : true , exception : None , regex : "^Finished (.*) job with ID (.*) in (.*) seconds$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/BackgroundJob/JobList.php" , line : 77usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Background job arguments can't exceed 4000 characters \\(json encoded\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Talk/Broker.php" , line : 66usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^Not all apps have been registered yet$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Talk/Broker.php" , line : 82usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Talk backend \\{class\\} could not be loaded: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Talk/Broker.php" , line : 100usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NoBackendException") , regex : "^The Talk broker has no registered backend$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/TemplateLayout.php" , line : 390usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^\\$filePath is not under the \\\\OC::\\$SERVERROOT$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Share.php" , line : 121usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^String expected\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Share.php" , line : 125usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("IllegalIDChangeException") , regex : "^Not allowed to assign a new internal id to a share$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Share.php" , line : 154usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^String expected\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Share.php" , line : 158usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("IllegalIDChangeException") , regex : "^Not allowed to assign a new provider id to a share$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Share.php" , line : 181usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Share.php" , line : 194usize , placeholders : & ["$this->fileId"] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^Node for share not found, fileid: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Share.php" , line : 228usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Share.php" , line : 272usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Share.php" , line : 290usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Share.php" , line : 308usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Share.php" , line : 438usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Share.php" , line : 459usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 190usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Passwords are enforced for link and mail shares$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 200usize , placeholders : & ["$e->getHint()"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 217usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^SharedWith is not a valid user$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 222usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^SharedWith is not a valid group$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 227usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^SharedWith should be empty$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 231usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^SharedWith should not be empty$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 235usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^SharedWith should not be empty$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 239usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^SharedWith should not be empty$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 244usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^SharedWith is not a valid circle$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 250usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^unknown share type$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 255usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^SharedBy should be set$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 261usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Cannot share with yourself$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 266usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Path should be set$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 272usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Path should be either a file or a folder$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 282usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^You cannot share your root folder$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 288usize , placeholders : & ["$message_t"] , has_meaningful_message : false , exception : Some ("GenericShareException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 293usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A share requires permissions$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 307usize , placeholders : & ["$share->getNode()->getId()"] , has_meaningful_message : true , exception : Some ("GenericShareException") , regex : "^Could not get proper share mount for (.*)\\. Failing since else the next calls are called with null$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 316usize , placeholders : & ["$userMountPointId"] , has_meaningful_message : true , exception : Some ("GenericShareException") , regex : "^Could not get proper user mount for (.*)\\. Failing since else the next calls are called with null$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 347usize , placeholders : & ["$message_t"] , has_meaningful_message : false , exception : Some ("GenericShareException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 357usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Shares need at least read permissions$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 363usize , placeholders : & ["$message_t"] , has_meaningful_message : false , exception : Some ("GenericShareException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 367usize , placeholders : & ["$message_t"] , has_meaningful_message : false , exception : Some ("GenericShareException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 394usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("GenericShareException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 431usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Expiration date is enforced$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 439usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("GenericShareException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 453usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 481usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("GenericShareException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 507usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Expiration date is enforced$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 515usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("GenericShareException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 529usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 555usize , placeholders : & ["$message_t"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 579usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("AlreadySharedException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 590usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("AlreadySharedException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 606usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Group sharing is now allowed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 614usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Sharing is only allowed within your own groups$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 635usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("AlreadySharedException") , regex : "^Path is already shared with this group$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 649usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Link sharing is not allowed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 655usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Public upload is not allowed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 691usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Path contains files shared with you$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 705usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Sharing is disabled$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 709usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Sharing is disabled for you$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 793usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Cannot share with the share owner$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 813usize , placeholders : & ["$event->getArgument('error')"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Share20/Manager.php" , line : 857usize , placeholders : & ["$emailAddress" , "$share->getId()"] , has_meaningful_message : true , exception : None , regex : "^Sent share notification to (.*) for share with ID (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Share20/Manager.php" , line : 859usize , placeholders : & ["$share->getSharedWith()"] , has_meaningful_message : true , exception : None , regex : "^Share notification not sent to (.*) because email address is not set\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Share20/Manager.php" , line : 862usize , placeholders : & ["$share->getSharedWith()"] , has_meaningful_message : true , exception : None , regex : "^Share notification not sent to (.*) because user could not be found\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Share20/Manager.php" , line : 865usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Share notification not sent because mailsend is false\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Share20/Manager.php" , line : 949usize , placeholders : & ["implode(', ', $failedRecipients)"] , has_meaningful_message : true , exception : None , regex : "^Share notification mail could not be sent to: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Share20/Manager.php" , line : 953usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Share notification mail could not be sent$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 972usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Share does not have a full id$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 977usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Cannot change share type$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 983usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Can only update recipient on user shares$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 989usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Cannot share with the share owner$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 1024usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Cannot enable sending the password by Talk with an empty password$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 1034usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Cannot enable sending the password by Talk without setting a new password$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 1037usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Cannot disable sending the password by Talk without setting a new password$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 1119usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Share provider does not support accepting$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 1228usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Share does not have a full id$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 1283usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Cannot change target of link share$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 1287usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid recipient$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 1293usize , placeholders : & ["$share->getSharedWith()"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Group \"(.*)\" does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 1297usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid recipient$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 1330usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^invalid path$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 1444usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ShareNotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 1452usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ShareNotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 1486usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ShareNotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 1538usize , placeholders : & ["$this->l->t('The requested share does not exist anymore')"] , has_meaningful_message : false , exception : Some ("ShareNotFound") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/Manager.php" , line : 1557usize , placeholders : & ["$this->l->t('The requested share does not exist anymore')"] , has_meaningful_message : false , exception : Some ("ShareNotFound") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/ProviderFactory.php" , line : 301usize , placeholders : & ["$id"] , has_meaningful_message : true , exception : Some ("ProviderException") , regex : "^No provider with id \\.(.*) found\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/ProviderFactory.php" , line : 332usize , placeholders : & ["$shareType"] , has_meaningful_message : true , exception : Some ("ProviderException") , regex : "^No share provider for share type (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/DefaultShareProvider.php" , line : 182usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^invalid share type!$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/DefaultShareProvider.php" , line : 239usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ShareNotFound") , regex : "^Newly created share could not be found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/DefaultShareProvider.php" , line : 362usize , placeholders : & ["$share->getSharedWith()"] , has_meaningful_message : true , exception : Some ("ProviderException") , regex : "^Group \"(.*)\" does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/DefaultShareProvider.php" , line : 366usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ProviderException") , regex : "^Recipient not in receiving group$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/DefaultShareProvider.php" , line : 396usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ProviderException") , regex : "^Recipient does not match$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/DefaultShareProvider.php" , line : 401usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ProviderException") , regex : "^Invalid shareType$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/DefaultShareProvider.php" , line : 488usize , placeholders : & ["$share->getSharedWith()"] , has_meaningful_message : true , exception : Some ("ProviderException") , regex : "^Group \"(.*)\" does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/DefaultShareProvider.php" , line : 533usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ProviderException") , regex : "^Recipient does not match$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/DefaultShareProvider.php" , line : 539usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ProviderException") , regex : "^Invalid shareType$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/DefaultShareProvider.php" , line : 802usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ShareNotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/DefaultShareProvider.php" , line : 808usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ShareNotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/DefaultShareProvider.php" , line : 1001usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("BackendError") , regex : "^Invalid backend$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/DefaultShareProvider.php" , line : 1031usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ShareNotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share20/DefaultShareProvider.php" , line : 1037usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ShareNotFound") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/lib/private/Log.php" , line : 105usize , placeholders : & ["ILogger::FATAL"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/lib/private/Log.php" , line : 119usize , placeholders : & ["ILogger::ERROR"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/lib/private/Log.php" , line : 132usize , placeholders : & ["ILogger::ERROR"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/lib/private/Log.php" , line : 144usize , placeholders : & ["ILogger::ERROR"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/lib/private/Log.php" , line : 158usize , placeholders : & ["ILogger::WARN"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/lib/private/Log.php" , line : 169usize , placeholders : & ["ILogger::INFO"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/lib/private/Log.php" , line : 182usize , placeholders : & ["ILogger::INFO"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/lib/private/Log.php" , line : 193usize , placeholders : & ["ILogger::DEBUG"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Log.php" , line : 316usize , placeholders : & ["$exception->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Failed to load ExceptionSerializer serializer while trying to log (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Log.php" , line : 382usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Log implementation has no path$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Settings/Manager.php" , line : 133usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Settings/Manager.php" , line : 141usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Settings/Manager.php" , line : 201usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Settings/Manager.php" , line : 207usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Remote/Instance.php" , line : 115usize , placeholders : & ["$this->url"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^refusing to connect to remote instance\\((.*)\\) over http that was previously accessible over https$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Remote/Instance.php" , line : 130usize , placeholders : & ["$this->url"] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^Remote server not found at address (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Remote/Api/OCS.php" , line : 51usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Remote/Api/OCS.php" , line : 53usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ForbiddenException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Remote/Api/OCS.php" , line : 59usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Invalid ocs response$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Remote/Api/OCS.php" , line : 62usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ForbiddenException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Remote/Api/OCS.php" , line : 65usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Remote/Api/OCS.php" , line : 68usize , placeholders : & ["$response['ocs']['meta']['message']"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Unknown ocs error (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Remote/Api/OCS.php" , line : 83usize , placeholders : & ["$type" , "$key"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Invalid (.*) response, expected field (.*) not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Remote/Api/ApiBase.php" , line : 93usize , placeholders : & ["$method"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid method (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Preview/Generator.php" , line : 130usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^Cannot read file$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Preview/Generator.php" , line : 155usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^Cached preview size 0, invalid!$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Preview/Generator.php" , line : 166usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^Max preview size 0, invalid!$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Preview/Generator.php" , line : 201usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Preview/Generator.php" , line : 211usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Preview/Generator.php" , line : 216usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^Cached preview size 0, invalid!$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Preview/Generator.php" , line : 292usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Preview/Generator.php" , line : 361usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Preview/Generator.php" , line : 368usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Preview/Generator.php" , line : 505usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Failed to generate preview, failed to load image$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Preview/Generator.php" , line : 536usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Preview/Generator.php" , line : 596usize , placeholders : & ["$mimeType"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Not a valid mimetype: \"(.*)\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Preview/Bitmap.php" , line : 47usize , placeholders : & ["$file->getPath()"] , has_meaningful_message : true , exception : None , regex : "^Failed to get thumbnail for: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Preview/Bitmap.php" , line : 58usize , placeholders : & ["$file->getPath()"] , has_meaningful_message : true , exception : None , regex : "^File: (.*) Imagick says:$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Preview/Imaginary.php" , line : 74usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Imaginary preview provider is enabled, but no url is configured\\. Please provide the url of your imaginary server to the 'preview_imaginary_url' config variable\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Preview/Imaginary.php" , line : 119usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Imaginary preview generation failed: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Preview/Imaginary.php" , line : 126usize , placeholders : & ["json_decode($response->getBody())['message']"] , has_meaningful_message : true , exception : None , regex : "^Imaginary preview generation failed: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Preview/Movie.php" , line : 160usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Movie preview generation failed Output: \\{output\\}$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Preview/HEIC.php" , line : 67usize , placeholders : & ["$file->getPath()"] , has_meaningful_message : true , exception : None , regex : "^Failed to get thumbnail for: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Preview/HEIC.php" , line : 79usize , placeholders : & ["$file->getPath()"] , has_meaningful_message : true , exception : None , regex : "^File: (.*) Imagick says:$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Setup/OCI.php" , line : 71usize , placeholders : & ["$this->trans->t('Oracle connection could not be established')"] , has_meaningful_message : false , exception : Some ("\\OC\\DatabaseSetupException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Setup/OCI.php" , line : 78usize , placeholders : & ["$this->trans->t('Oracle username and/or password not valid')"] , has_meaningful_message : false , exception : Some ("\\OC\\DatabaseSetupException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/Setup/PostgreSQL.php" , line : 85usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Error trying to connect as \"postgres\", assuming database is setup and tables need to be created$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Setup/PostgreSQL.php" , line : 101usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Setup/PostgreSQL.php" , line : 104usize , placeholders : & ["$this->trans->t('PostgreSQL username and/or password not valid')"] , has_meaningful_message : false , exception : Some ("\\OC\\DatabaseSetupException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Setup/PostgreSQL.php" , line : 116usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Error while trying to create database$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Setup/PostgreSQL.php" , line : 125usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Error while trying to restrict database permissions$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Setup/PostgreSQL.php" , line : 169usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Error while trying to create database user$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Setup/MySQL.php" , line : 66usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Setup/MySQL.php" , line : 69usize , placeholders : & ["$this->trans->t('MySQL username and/or password not valid')"] , has_meaningful_message : false , exception : Some ("\\OC\\DatabaseSetupException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Setup/MySQL.php" , line : 86usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Database creation failed\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Setup/MySQL.php" , line : 98usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Could not automatically grant privileges, this can be ignored if database user already had privileges\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Setup/MySQL.php" , line : 128usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Database user creation failed\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Setup/MySQL.php" , line : 192usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Can not create a new MySQL user, will continue with the provided user\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Profiler/FileProfilerStorage.php" , line : 49usize , placeholders : & ["sprintf('Unable to create the storage directory (%s).', $this->folder)"] , has_meaningful_message : false , exception : Some ("\\RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Profiler/FileProfilerStorage.php" , line : 133usize , placeholders : & ["sprintf('Unable to create the storage directory (%s).', $dir)"] , has_meaningful_message : false , exception : Some ("\\RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Authentication/TwoFactorAuth/ProviderManager.php" , line : 52usize , placeholders : & ["$providerId"] , has_meaningful_message : false , exception : Some ("InvalidProviderException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Alert , path : "/lib/private/Authentication/TwoFactorAuth/Manager.php" , line : 217usize , placeholders : & ["$providerId"] , has_meaningful_message : true , exception : None , regex : "^two\\-factor auth provider '(.*)' failed to load$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Alert , path : "/lib/private/Authentication/TwoFactorAuth/Manager.php" , line : 226usize , placeholders : & ["count($missing)"] , has_meaningful_message : true , exception : None , regex : "^(.*) two\\-factor auth providers failed to load$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/Authentication/TwoFactorAuth/Manager.php" , line : 322usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^could not publish activity$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Authentication/TwoFactorAuth/ProviderLoader.php" , line : 73usize , placeholders : & ["$class"] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Could not load two\\-factor auth provider (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Authentication/TwoFactorAuth/ProviderLoader.php" , line : 87usize , placeholders : & ["$provider->getService()"] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Could not load two\\-factor auth provider (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Authentication/LoginCredentials/Store.php" , line : 87usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("CredentialsUnavailableException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Authentication/LoginCredentials/Store.php" , line : 101usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^could not get login credentials because session is unavailable$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Authentication/LoginCredentials/Store.php" , line : 103usize , placeholders : & ["$ex->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^could not get login credentials because the token is invalid: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Authentication/LoginCredentials/Store.php" , line : 106usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^could not get login credentials because the token has no password$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Authentication/LoginCredentials/Store.php" , line : 121usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("CredentialsUnavailableException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Authentication/Token/RemoteWipe.php" , line : 121usize , placeholders : & ["$dbToken->getUID()"] , has_meaningful_message : true , exception : None , regex : "^user (.*) started a remote wipe$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Authentication/Token/RemoteWipe.php" , line : 149usize , placeholders : & ["$dbToken->getUID()"] , has_meaningful_message : true , exception : None , regex : "^user (.*) finished a remote wipe$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Authentication/Token/Manager.php" , line : 88usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Token conflict handled, but UIDs do not match\\. This should not happen$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Authentication/Token/Manager.php" , line : 221usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidTokenException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Authentication/Token/Manager.php" , line : 233usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidTokenException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Authentication/Token/PublicKeyTokenMapper.php" , line : 89usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DoesNotExistException") , regex : "^token does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Authentication/Token/PublicKeyTokenMapper.php" , line : 111usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DoesNotExistException") , regex : "^token does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Authentication/Token/PublicKeyTokenProvider.php" , line : 114usize , placeholders : & ["$ex->getMessage()"] , has_meaningful_message : true , exception : Some ("InvalidTokenException") , regex : "^Token does not exist: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Authentication/Token/PublicKeyTokenProvider.php" , line : 123usize , placeholders : & ["$ex->getMessage()"] , has_meaningful_message : true , exception : Some ("InvalidTokenException") , regex : "^Token does not exist: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Authentication/Token/PublicKeyTokenProvider.php" , line : 128usize , placeholders : & ["$token"] , has_meaningful_message : false , exception : Some ("ExpiredTokenException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Authentication/Token/PublicKeyTokenProvider.php" , line : 132usize , placeholders : & ["$token"] , has_meaningful_message : false , exception : Some ("WipeTokenException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Authentication/Token/PublicKeyTokenProvider.php" , line : 137usize , placeholders : & ["$token"] , has_meaningful_message : false , exception : Some ("TokenPasswordExpiredException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Authentication/Token/PublicKeyTokenProvider.php" , line : 147usize , placeholders : & ["$tokenId" , "$ex->getMessage()"] , has_meaningful_message : true , exception : Some ("InvalidTokenException") , regex : "^Token with ID (.*) does not exist: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Authentication/Token/PublicKeyTokenProvider.php" , line : 151usize , placeholders : & ["$token"] , has_meaningful_message : false , exception : Some ("ExpiredTokenException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Authentication/Token/PublicKeyTokenProvider.php" , line : 155usize , placeholders : & ["$token"] , has_meaningful_message : false , exception : Some ("WipeTokenException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Authentication/Token/PublicKeyTokenProvider.php" , line : 160usize , placeholders : & ["$token"] , has_meaningful_message : false , exception : Some ("TokenPasswordExpiredException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Authentication/Token/PublicKeyTokenProvider.php" , line : 173usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidTokenException") , regex : "^Invalid token type$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Authentication/Token/PublicKeyTokenProvider.php" , line : 213usize , placeholders : & ["date('c', $olderThan)"] , has_meaningful_message : true , exception : None , regex : "^Invalidating session tokens older than (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Authentication/Token/PublicKeyTokenProvider.php" , line : 216usize , placeholders : & ["date('c', $rememberThreshold)"] , has_meaningful_message : true , exception : None , regex : "^Invalidating remembered session tokens older than (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Authentication/Token/PublicKeyTokenProvider.php" , line : 224usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidTokenException") , regex : "^Invalid token type$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Authentication/Token/PublicKeyTokenProvider.php" , line : 233usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidTokenException") , regex : "^Invalid token type$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Authentication/Token/PublicKeyTokenProvider.php" , line : 253usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidTokenException") , regex : "^Invalid token type$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Authentication/Token/PublicKeyTokenProvider.php" , line : 257usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("PasswordlessTokenException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Authentication/Token/PublicKeyTokenProvider.php" , line : 271usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidTokenException") , regex : "^Invalid token type$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Authentication/Token/PublicKeyTokenProvider.php" , line : 290usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidTokenException") , regex : "^Invalid token type$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Authentication/Token/PublicKeyTokenProvider.php" , line : 319usize , placeholders : & ["$ex->getMessage()"] , has_meaningful_message : true , exception : Some ("InvalidTokenException") , regex : "^Could not decrypt token password: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Authentication/Token/PublicKeyTokenProvider.php" , line : 365usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^OpenSSL reported a problem$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Authentication/Token/PublicKeyTokenProvider.php" , line : 370usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^OpenSSL reported a problem$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Authentication/Token/PublicKeyTokenProvider.php" , line : 382usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Trying to save a password with more than 469 characters is not supported\\. If you want to use big passwords, disable the auth\\.storeCryptedPassword option in config\\.php$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Authentication/Token/PublicKeyTokenProvider.php" , line : 402usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidTokenException") , regex : "^Invalid token type$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Critical , path : "/lib/private/Authentication/Token/PublicKeyTokenProvider.php" , line : 435usize , placeholders : & ["implode(', ', $errors)"] , has_meaningful_message : true , exception : None , regex : "^Something is wrong with your openssl setup: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/Authentication/Listeners/RemoteWipeEmailListener.php" , line : 78usize , placeholders : & ["$uid"] , has_meaningful_message : true , exception : None , regex : "^not sending a wipe started email because user <(.*)> does not exist \\(anymore\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Authentication/Listeners/RemoteWipeEmailListener.php" , line : 82usize , placeholders : & ["$uid"] , has_meaningful_message : true , exception : None , regex : "^not sending a wipe started email because user <(.*)> has no email set$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Authentication/Listeners/RemoteWipeEmailListener.php" , line : 91usize , placeholders : & ["$uid"] , has_meaningful_message : true , exception : None , regex : "^Could not send remote wipe started email to <(.*)>$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/Authentication/Listeners/RemoteWipeEmailListener.php" , line : 99usize , placeholders : & ["$uid"] , has_meaningful_message : true , exception : None , regex : "^not sending a wipe finished email because user <(.*)> does not exist \\(anymore\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Authentication/Listeners/RemoteWipeEmailListener.php" , line : 103usize , placeholders : & ["$uid"] , has_meaningful_message : true , exception : None , regex : "^not sending a wipe finished email because user <(.*)> has no email set$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Authentication/Listeners/RemoteWipeEmailListener.php" , line : 112usize , placeholders : & ["$uid"] , has_meaningful_message : true , exception : None , regex : "^Could not send remote wipe finished email to <(.*)>$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/Authentication/Listeners/RemoteWipeActivityListener.php" , line : 75usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^could not publish activity$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Authentication/Listeners/UserDeletedTokenCleanupListener.php" , line : 70usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Could not clean up auth tokens after user deletion: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Authentication/Listeners/UserDeletedFilesCleanupListener.php" , line : 58usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^User has no home storage$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Authentication/Listeners/UserDeletedFilesCleanupListener.php" , line : 71usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^UserDeletedEvent fired without matching BeforeUserDeletedEvent$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Authentication/Listeners/UserDeletedFilesCleanupListener.php" , line : 78usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Home storage has invalid cache$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Authentication/Notifications/Notifier.php" , line : 49usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Authentication/Notifications/Notifier.php" , line : 74usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Authentication/WebAuthn/Manager.php" , line : 156usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Not an authenticator attestation response$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Authentication/WebAuthn/Manager.php" , line : 219usize , placeholders : & ["$data"] , has_meaningful_message : true , exception : None , regex : "^Loading publickey credentials from: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Authentication/WebAuthn/Manager.php" , line : 227usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Not an authenticator attestation response$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/Authentication/WebAuthn/Manager.php" , line : 253usize , placeholders : & ["$id"] , has_meaningful_message : true , exception : None , regex : "^WebAuthn device (.*) does not exist, can't delete it$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/Authentication/Login/LoggedInCheckCommand.php" , line : 53usize , placeholders : & ["$loginName" , "$ip"] , has_meaningful_message : true , exception : None , regex : "^Login failed: (.*) \\(Remote IP: (.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/Authentication/Login/UserDisabledCheckCommand.php" , line : 53usize , placeholders : & ["$username" , "$ip"] , has_meaningful_message : true , exception : None , regex : "^Login failed: (.*) disabled \\(Remote IP: (.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Avatar/AvatarManager.php" , line : 114usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^user does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Avatar/AvatarManager.php" , line : 168usize , placeholders : & ["$userId"] , has_meaningful_message : true , exception : None , regex : "^No cache for the user (.*)\\. Ignoring\\.\\.\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Avatar/AvatarManager.php" , line : 179usize , placeholders : & ["$userId"] , has_meaningful_message : true , exception : None , regex : "^No cache for the user (.*)\\. Ignoring avatar deletion$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Avatar/AvatarManager.php" , line : 181usize , placeholders : & ["$userId"] , has_meaningful_message : true , exception : None , regex : "^Unable to delete user avatars for (.*)\\. gnoring avatar deletion$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Avatar/AvatarManager.php" , line : 183usize , placeholders : & ["$userId"] , has_meaningful_message : true , exception : None , regex : "^User (.*) not found\\. gnoring avatar deletion$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Avatar/UserAvatar.php" , line : 187usize , placeholders : & ["$this->l->t('Unknown filetype')"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Avatar/UserAvatar.php" , line : 191usize , placeholders : & ["$this->l->t('Invalid image')"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Avatar/UserAvatar.php" , line : 195usize , placeholders : & ["$this->l->t('Avatar image is not square')"] , has_meaningful_message : false , exception : Some ("NotSquareException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Avatar/UserAvatar.php" , line : 293usize , placeholders : & ["$this->user->getUID()"] , has_meaningful_message : true , exception : None , regex : "^Failed to save avatar for (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Avatar/UserAvatar.php" , line : 294usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Avatar/PlaceholderAvatar.php" , line : 142usize , placeholders : & ["$this->user->getUID()"] , has_meaningful_message : true , exception : None , regex : "^Failed to save avatar placeholder for (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Avatar/PlaceholderAvatar.php" , line : 143usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/SystemTag/SystemTagManager.php" , line : 104usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Tag id must be integer$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/SystemTag/SystemTagManager.php" , line : 125usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("TagNotFoundException") , regex : "^Tag id\\(s\\) not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/SystemTag/SystemTagManager.php" , line : 184usize , placeholders : & ["$tagName" , "$userVisible" , "$userAssignable"] , has_meaningful_message : true , exception : Some ("TagNotFoundException") , regex : "^Tag \\(\"(.*)\", (.*), (.*)\\) does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/SystemTag/SystemTagManager.php" , line : 209usize , placeholders : & ["$truncatedTagName" , "$userVisible" , "$userAssignable"] , has_meaningful_message : true , exception : Some ("TagAlreadyExistsException") , regex : "^Tag \\(\"(.*)\", (.*), (.*)\\) already exists$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/SystemTag/SystemTagManager.php" , line : 239usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("TagNotFoundException") , regex : "^Tag does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/SystemTag/SystemTagManager.php" , line : 265usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("TagNotFoundException") , regex : "^Tag does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/SystemTag/SystemTagManager.php" , line : 270usize , placeholders : & ["$newName" , "$userVisible" , "$userAssignable"] , has_meaningful_message : true , exception : Some ("TagAlreadyExistsException") , regex : "^Tag \\(\"(.*)\", (.*), (.*)\\) already exists$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/SystemTag/SystemTagManager.php" , line : 328usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("TagNotFoundException") , regex : "^Tag id\\(s\\) not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/SystemTag/SystemTagObjectMapper.php" , line : 119usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Limit is only allowed with a single tag$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/SystemTag/SystemTagObjectMapper.php" , line : 267usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("TagNotFoundException") , regex : "^Tags not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/Collaboration/AutoComplete/Manager.php" , line : 49usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^No sorter for ID \"\\{id\\}\", skipping$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Notice , path : "/lib/private/Collaboration/AutoComplete/Manager.php" , line : 66usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Skipping sorter which is not an instance of ISorter\\. Class name: \\{class\\}$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Notice , path : "/lib/private/Collaboration/AutoComplete/Manager.php" , line : 72usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Skipping sorter with empty ID\\. Class name: \\{class\\}$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Collaboration/Collaborators/LookupPlugin.php" , line : 99usize , placeholders : & ["$lookup['federationId']"] , has_meaningful_message : true , exception : None , regex : "^Can not parse federated cloud ID \"(.*)\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Collaboration/Collaborators/RemotePlugin.php" , line : 193usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid Federated Cloud ID$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Collaboration/Collaborators/RemoteGroupPlugin.php" , line : 91usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid Federated Cloud ID$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Collaboration/Collaborators/Search.php" , line : 111usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Provided ShareType is invalid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Collaboration/Resources/ProviderManager.php" , line : 60usize , placeholders : & ["$provider" , "$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Could not query resource provider (.*): (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Collaboration/Resources/Collection.php" , line : 131usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ResourceException") , regex : "^Already part of the collection$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Collaboration/Resources/Collection.php" , line : 148usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ResourceException") , regex : "^Already part of the collection$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Collaboration/Resources/Manager.php" , line : 81usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("CollectionException") , regex : "^Collection not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Collaboration/Resources/Manager.php" , line : 113usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("CollectionException") , regex : "^Collection not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Collaboration/Resources/Manager.php" , line : 230usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ResourceException") , regex : "^Resource not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Collaboration/Resources/Manager.php" , line : 512usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^\\\\OC\\\\Collaboration\\\\Resources\\\\Manager::registerResourceProvider is deprecated$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/AppScriptSort.php" , line : 55usize , placeholders : & ["$app->getId()"] , has_meaningful_message : true , exception : None , regex : "^Circular dependency in app scripts at app (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Calendar/Manager.php" , line : 182usize , placeholders : & ["$registration->getService()" , "$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Could not load calendar provider (.*): (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/User/Database.php" , line : 495usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^key uid is expected to be set in \\$param$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/User/Database.php" , line : 513usize , placeholders : & ["$uid"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^(.*) does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/User/User.php" , line : 213usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Only verified emails can be set as primary$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/User/Manager.php" , line : 231usize , placeholders : & ["$loginName" , "\\OC::$server->getRequest()->getRemoteAddress()"] , has_meaningful_message : true , exception : None , regex : "^Login failed: '(.*)' \\(Remote IP: '(.*)'\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/User/Manager.php" , line : 422usize , placeholders : & ["$l->t('Only the following characters are allowed in a username:'\n\t\t\t\t. ' \"a-z\", \"A-Z\", \"0-9\", and \"_.@-\\'\"')"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/User/Manager.php" , line : 428usize , placeholders : & ["$l->t('A valid username must be provided')"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/User/Manager.php" , line : 433usize , placeholders : & ["$l->t('Username contains whitespace at the beginning or at the end')"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/User/Manager.php" , line : 438usize , placeholders : & ["$l->t('Username must not consist of dots only')"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/User/Manager.php" , line : 442usize , placeholders : & ["$l->t('Username is invalid because files already exist for this user')"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/User/Manager.php" , line : 447usize , placeholders : & ["$l->t('A valid password must be provided')"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/User/Manager.php" , line : 452usize , placeholders : & ["$l->t('The username is already being used')"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/User/Manager.php" , line : 460usize , placeholders : & ["$l->t('Could not create user')"] , has_meaningful_message : false , exception : Some ("\\InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/User/Session.php" , line : 326usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\OC\\User\\NoUserException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/User/Session.php" , line : 371usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("LoginException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/User/Session.php" , line : 409usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : Some ("LoginException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/User/Session.php" , line : 445usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("PasswordLoginForbiddenException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/User/Session.php" , line : 448usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("PasswordLoginForbiddenException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/User/Session.php" , line : 461usize , placeholders : & ["$user" , "\\OC::$server->getRequest()->getRemoteAddress()"] , has_meaningful_message : true , exception : None , regex : "^Login failed: '(.*)' \\(Remote IP: '(.*)'\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/User/Session.php" , line : 485usize , placeholders : & ["$user" , "$remoteAddress"] , has_meaningful_message : true , exception : None , regex : "^Login failed: '(.*)' \\(Remote IP: '(.*)'\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/User/Session.php" , line : 542usize , placeholders : & ["$ex->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Token is not valid: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/User/Session.php" , line : 607usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("LoginException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/User/Session.php" , line : 801usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^App token login name does not match$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/User/Session.php" , line : 885usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Tried to log in \\{uid\\} but could not verify token$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/User/Session.php" , line : 900usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Could not renew session token for \\{uid\\} because the session is unavailable$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/User/Session.php" , line : 906usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Renewing session token failed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/Share/Share.php" , line : 186usize , placeholders : & ["$row['storage_id']"] , has_meaningful_message : true , exception : None , regex : "^Could not resolve mount point for (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share/Share.php" , line : 269usize , placeholders : & ["$message_t"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share/Share.php" , line : 276usize , placeholders : & ["$message_t"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Share/Share.php" , line : 282usize , placeholders : & ["$message_t"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Share/SearchResultSorter.php" , line : 58usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Sharing dialogue: cannot sort due to missing array key$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Critical , path : "/lib/private/Log/ErrorHandler.php" , line : 70usize , placeholders : & ["self::removePassword($msg)"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Critical , path : "/lib/private/Log/ErrorHandler.php" , line : 83usize , placeholders : & ["self::removePassword($msg)"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Log/Systemdlog.php" , line : 62usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("HintException") , regex : "^PHP extension php\\-systemd is not available\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Emergency , path : "/lib/private/Log/PsrLoggerAdapter.php" , line : 68usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Alert , path : "/lib/private/Log/PsrLoggerAdapter.php" , line : 93usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Critical , path : "/lib/private/Log/PsrLoggerAdapter.php" , line : 117usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Log/PsrLoggerAdapter.php" , line : 140usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/Log/PsrLoggerAdapter.php" , line : 165usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Notice , path : "/lib/private/Log/PsrLoggerAdapter.php" , line : 187usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Log/PsrLoggerAdapter.php" , line : 211usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Log/PsrLoggerAdapter.php" , line : 233usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Log/PsrLoggerAdapter.php" , line : 250usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Nextcloud allows only integer log levels$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/lib/private/Log/PsrLoggerAdapter.php" , line : 261usize , placeholders : & ["$level"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/Log/Rotate.php" , line : 46usize , placeholders : & ["$msg"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/Archive/ZIP.php" , line : 53usize , placeholders : & ["$source"] , has_meaningful_message : true , exception : None , regex : "^Error while opening archive (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Metadata/FileEventListener.php" , line : 77usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Detecting deletion of a file with possible metadata but file system setup is not setup$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Contacts/ContactsMenu/ActionProviderStore.php" , line : 72usize , placeholders : & ["$class"] , has_meaningful_message : true , exception : None , regex : "^Could not load contacts menu action provider (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Contacts/ContactsMenu/ActionProviderStore.php" , line : 79usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Could not load contacts menu action provider$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Dashboard/Manager.php" , line : 55usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Dashboard widget with this id has already been registered$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Dashboard/Manager.php" , line : 112usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Dashboard widget \\{widget\\} took \\{duration\\} seconds to load\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Dashboard/DashboardManager.php" , line : 121usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DashboardAppNotAvailableException") , regex : "^No IWidgetsService registered$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Dashboard/DashboardManager.php" , line : 134usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("DashboardAppNotAvailableException") , regex : "^No IEventsService registered$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Support/Subscription/Registry.php" , line : 99usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("AlreadyRegisteredException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Support/Subscription/Registry.php" , line : 106usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("AlreadyRegisteredException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/Support/Subscription/Registry.php" , line : 201usize , placeholders : & ["get_class($backend)"] , has_meaningful_message : true , exception : None , regex : "^Can not determine user count for (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/Support/Subscription/Registry.php" , line : 214usize , placeholders : & ["$userCount" , "$disabledUsersCount"] , has_meaningful_message : true , exception : None , regex : "^Total user count was negative \\(users: (.*), disabled: (.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/Support/Subscription/Registry.php" , line : 242usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^The user limit was reached and the new user was not created$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Support/Subscription/Assertion.php" , line : 52usize , placeholders : & ["$l->t('The user limit has been reached and the user was not created. Check your notifications to learn more.')"] , has_meaningful_message : false , exception : Some ("HintException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Federation/CloudFederationProviderManager.php" , line : 128usize , placeholders : & ["$resourceType"] , has_meaningful_message : false , exception : Some ("ProviderDoesNotExistsException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Federation/CloudFederationProviderManager.php" , line : 153usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Federation/CloudFederationProviderManager.php" , line : 192usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^error while sending notification for federated share: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Federation/CloudIdManager.php" , line : 62usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid cloud id$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Federation/CloudIdManager.php" , line : 89usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid cloud id$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Security/CertificateManager.php" , line : 142usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Security/CertificateManager.php" , line : 185usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Filename is not valid$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Security/RateLimiting/Limiter.php" , line : 58usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("RateLimitExceededException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Security/Certificate.php" , line : 61usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Certificate could not get parsed\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Security/Certificate.php" , line : 66usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Certificate could not get parsed\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Security/Crypto.php" , line : 106usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Encrypting failed\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Security/Crypto.php" , line : 133usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Authenticated ciphertext could not be decoded\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Security/Crypto.php" , line : 156usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^HMAC does not match\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Security/Crypto.php" , line : 161usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Decryption failed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Security/Crypto.php" , line : 169usize , placeholders : & ["$hex"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^String contains non hex chars: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Security/Crypto.php" , line : 172usize , placeholders : & ["$hex"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Hex string is not of even length: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Security/Crypto.php" , line : 177usize , placeholders : & ["$hex"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Hex to bin conversion failed: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Security/VerificationToken/VerificationToken.php" , line : 71usize , placeholders : & ["$code"] , has_meaningful_message : false , exception : Some ("InvalidTokenException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Security/CSRF/TokenStorage/SessionStorage.php" , line : 64usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Session does not contain a requesttoken$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Notice , path : "/lib/private/Security/Bruteforce/Throttler.php" , line : 130usize , placeholders : & ["sprintf(\n\t\t\t\t'Bruteforce attempt from \"%s\" detected for action \"%s\".',\n\t\t\t\t$ip,\n\t\t\t\t$action\n\t\t\t)"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Security/Bruteforce/Throttler.php" , line : 224usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Bruteforce has to use less than 48 hours$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Security/Bruteforce/Throttler.php" , line : 350usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^IP address blocked because it reached the maximum failed attempts in the last 30 minutes \\[action: \\{action\\}, ip: \\{ip\\}\\]$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Security/Bruteforce/Throttler.php" , line : 355usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("MaxDelayReached") , regex : "^Reached maximum delay$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Security/Bruteforce/Throttler.php" , line : 358usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^IP address throttled because it reached the attempts limit in the last 30 minutes \\[action: \\{action\\}, delay: \\{delay\\}, ip: \\{ip\\}\\]$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Security/IdentityProof/Manager.php" , line : 77usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^OpenSSL reported a problem$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Security/IdentityProof/Manager.php" , line : 82usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^OpenSSL reported a problem$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Security/IdentityProof/Manager.php" , line : 158usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^no instance id!$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Critical , path : "/lib/private/Security/IdentityProof/Manager.php" , line : 168usize , placeholders : & ["implode(', ', $errors)"] , has_meaningful_message : true , exception : None , regex : "^Something is wrong with your openssl setup: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/ServerContainer.php" , line : 89usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("QueryException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/ServerContainer.php" , line : 118usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("QueryException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/LDAP/NullLDAPProviderFactory.php" , line : 36usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^No LDAP provider is available$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Emergency , path : "/lib/private/AppFramework/Bootstrap/Coordinator.php" , line : 140usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Error during app service registration: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/AppFramework/Bootstrap/Coordinator.php" , line : 193usize , placeholders : & ["$appId" , "$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Could not boot (.*): (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Emergency , path : "/lib/private/AppFramework/Bootstrap/Coordinator.php" , line : 197usize , placeholders : & ["$appId" , "$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Could not boot (.*): (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/AppFramework/Bootstrap/RegistrationContext.php" , line : 403usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^Only the Talk app is allowed to register a Talk backend$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/AppFramework/Bootstrap/RegistrationContext.php" , line : 406usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^There can only be one Talk backend$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/AppFramework/Bootstrap/RegistrationContext.php" , line : 442usize , placeholders : & ["$appId"] , has_meaningful_message : true , exception : None , regex : "^App (.*) not loaded for the capability registration$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/AppFramework/Bootstrap/RegistrationContext.php" , line : 452usize , placeholders : & ["$appId" , "$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Error during capability registration of (.*): (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/AppFramework/Bootstrap/RegistrationContext.php" , line : 468usize , placeholders : & ["$appId" , "$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Error during crash reporter registration of (.*): (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/AppFramework/Bootstrap/RegistrationContext.php" , line : 484usize , placeholders : & ["$appId" , "$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Error during dashboard registration of (.*): (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/AppFramework/Bootstrap/RegistrationContext.php" , line : 501usize , placeholders : & ["$appId" , "$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Error during event listener registration of (.*): (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/AppFramework/Bootstrap/RegistrationContext.php" , line : 517usize , placeholders : & ["$appId"] , has_meaningful_message : true , exception : None , regex : "^App (.*) not loaded for the container service registration$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/AppFramework/Bootstrap/RegistrationContext.php" , line : 534usize , placeholders : & ["$appId" , "$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Error during service registration of (.*): (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/AppFramework/Bootstrap/RegistrationContext.php" , line : 545usize , placeholders : & ["$appId"] , has_meaningful_message : true , exception : None , regex : "^App (.*) not loaded for the container alias registration$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/AppFramework/Bootstrap/RegistrationContext.php" , line : 558usize , placeholders : & ["$appId" , "$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Error during service alias registration of (.*): (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/AppFramework/Bootstrap/RegistrationContext.php" , line : 569usize , placeholders : & ["$appId"] , has_meaningful_message : true , exception : None , regex : "^App (.*) not loaded for the container parameter registration$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/AppFramework/Bootstrap/RegistrationContext.php" , line : 582usize , placeholders : & ["$appId" , "$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Error during service parameter registration of (.*): (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/AppFramework/Bootstrap/RegistrationContext.php" , line : 598usize , placeholders : & ["$appId"] , has_meaningful_message : true , exception : None , regex : "^App (.*) not loaded for the container middleware registration$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/AppFramework/Bootstrap/RegistrationContext.php" , line : 608usize , placeholders : & ["$appId" , "$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^Error during capability registration of (.*): (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/AppFramework/App.php" , line : 150usize , placeholders : & ["strtolower($app)"] , has_meaningful_message : true , exception : Some ("HintException") , regex : "^App (.*) is not enabled$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/AppFramework/Utility/SimpleContainer.php" , line : 102usize , placeholders : & ["$e2->getMessage()"] , has_meaningful_message : false , exception : Some ("QueryException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/AppFramework/Utility/SimpleContainer.php" , line : 118usize , placeholders : & ["$baseMsg"] , has_meaningful_message : true , exception : Some ("QueryException") , regex : "^(.*) Class can not be instantiated$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/AppFramework/Utility/SimpleContainer.php" , line : 122usize , placeholders : & ["$baseMsg" , "$e->getMessage()"] , has_meaningful_message : false , exception : Some ("QueryException") , regex : "^(.*) (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/AppFramework/Utility/SimpleContainer.php" , line : 140usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : Some ("QueryException") , regex : "^Could not resolve (.*)!$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/AppFramework/Routing/RouteParser.php" , line : 96usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^Invalid route name: use the format foo\\#bar to reference FooController::bar$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/AppFramework/Routing/RouteConfig.php" , line : 133usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^Invalid route name: use the format foo\\#bar to reference FooController::bar$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/AppFramework/Middleware/PublicShare/PublicShareMiddleware.php" , line : 68usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^Link sharing is disabled$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/AppFramework/Middleware/PublicShare/PublicShareMiddleware.php" , line : 74usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/AppFramework/Middleware/PublicShare/PublicShareMiddleware.php" , line : 84usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/AppFramework/Middleware/PublicShare/PublicShareMiddleware.php" , line : 100usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NeedAuthenticationException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/AppFramework/Middleware/PublicShare/PublicShareMiddleware.php" , line : 104usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/AppFramework/Middleware/Security/ReloadExecutionMiddleware.php" , line : 51usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ReloadExecutionException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/AppFramework/Middleware/Security/CORSMiddleware.php" , line : 93usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("SecurityException") , regex : "^CORS requires basic auth$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/AppFramework/Middleware/Security/CORSMiddleware.php" , line : 96usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("SecurityException") , regex : "^Password login forbidden, use token instead$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/AppFramework/Middleware/Security/CORSMiddleware.php" , line : 125usize , placeholders : & ["$msg"] , has_meaningful_message : false , exception : Some ("SecurityException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/AppFramework/Middleware/Security/BruteForceMiddleware.php" , line : 106usize , placeholders : & ["$exception->getMessage()"] , has_meaningful_message : false , exception : Some ("OCSException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/AppFramework/Middleware/Security/PasswordConfirmationMiddleware.php" , line : 88usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotConfirmedException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/AppFramework/Middleware/Security/SameSiteCookieMiddleware.php" , line : 62usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("LaxSameSiteCookieFailedException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/AppFramework/Middleware/Security/SecurityMiddleware.php" , line : 153usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotLoggedInException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/AppFramework/Middleware/Security/SecurityMiddleware.php" , line : 175usize , placeholders : & ["$this->l10n->t('Logged in user must be an admin, a sub admin or gotten special right to access this setting')"] , has_meaningful_message : false , exception : Some ("NotAdminException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/AppFramework/Middleware/Security/SecurityMiddleware.php" , line : 182usize , placeholders : & ["$this->l10n->t('Logged in user must be an admin or sub admin')"] , has_meaningful_message : false , exception : Some ("NotAdminException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/AppFramework/Middleware/Security/SecurityMiddleware.php" , line : 188usize , placeholders : & ["$this->l10n->t('Logged in user must be an admin')"] , has_meaningful_message : false , exception : Some ("NotAdminException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/AppFramework/Middleware/Security/SecurityMiddleware.php" , line : 195usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("StrictCookieMissingException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/AppFramework/Middleware/Security/SecurityMiddleware.php" , line : 215usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("CrossSiteRequestForgeryException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/AppFramework/Middleware/Security/SecurityMiddleware.php" , line : 232usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("AppNotEnabledException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/AppFramework/Middleware/Security/SecurityMiddleware.php" , line : 278usize , placeholders : & ["$exception->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Emergency , path : "/lib/private/AppFramework/ScopedPsrLogger.php" , line : 47usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Alert , path : "/lib/private/AppFramework/ScopedPsrLogger.php" , line : 59usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Critical , path : "/lib/private/AppFramework/ScopedPsrLogger.php" , line : 71usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/AppFramework/ScopedPsrLogger.php" , line : 83usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/AppFramework/ScopedPsrLogger.php" , line : 95usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Notice , path : "/lib/private/AppFramework/ScopedPsrLogger.php" , line : 107usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/AppFramework/ScopedPsrLogger.php" , line : 119usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/AppFramework/ScopedPsrLogger.php" , line : 131usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/lib/private/AppFramework/ScopedPsrLogger.php" , line : 143usize , placeholders : & ["$level"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Emergency , path : "/lib/private/AppFramework/Logger.php" , line : 62usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Alert , path : "/lib/private/AppFramework/Logger.php" , line : 69usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Critical , path : "/lib/private/AppFramework/Logger.php" , line : 76usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Emergency , path : "/lib/private/AppFramework/Logger.php" , line : 83usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/AppFramework/Logger.php" , line : 90usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Notice , path : "/lib/private/AppFramework/Logger.php" , line : 97usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/AppFramework/Logger.php" , line : 104usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/AppFramework/Logger.php" , line : 111usize , placeholders : & ["$message"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/lib/private/AppFramework/Logger.php" , line : 118usize , placeholders : & ["$level"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/AppFramework/DependencyInjection/DIContainer.php" , line : 469usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : Some ("QueryException") , regex : "^Could not resolve (.*)! Class can not be instantiated$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/AppFramework/Http/Dispatcher.php" , line : 141usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Controller \\{class\\}::\\{method\\} created \\{count\\} QueryBuilder objects, please check if they are created inside a loop by accident\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/AppFramework/Http/Dispatcher.php" , line : 149usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Controller \\{class\\}::\\{method\\} executed \\{count\\} queries\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/AppFramework/Http/Request.php" , line : 213usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^You cannot change the contents of the request object$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/AppFramework/Http/Request.php" , line : 221usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^You cannot change the contents of the request object$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/AppFramework/Http/Request.php" , line : 230usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^You cannot change the contents of the request object$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/AppFramework/Http/Request.php" , line : 255usize , placeholders : & ["sprintf('%s cannot be accessed in a %s request.', $name, $this->method)"] , has_meaningful_message : false , exception : Some ("\\LogicException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/AppFramework/Http/Request.php" , line : 292usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^You cannot change the contents of the request object$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/AppFramework/Http/Request.php" , line : 407usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\LogicException") , regex : "^\"put\" can only be accessed once if not application/x\\-www\\-form\\-urlencoded or application/json\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/AppFramework/Http/Request.php" , line : 759usize , placeholders : & ["$requestUri" , "$scriptName"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^The requested uri\\((.*)\\) cannot be processed by the script '(.*)'\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/RedisFactory.php" , line : 59usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Redis Cluster support is not available$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/RedisFactory.php" , line : 90usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Redis cluster config is missing the \"seeds\" attribute$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/RedisFactory.php" , line : 163usize , placeholders : & ["\\sprintf(\n\t\t\t\t\t'php-redis extension must be version %s or higher to support ssl context',\n\t\t\t\t\tself::REDIS_EXTRA_PARAMETERS_MINIMAL_VERSION\n\t\t\t\t)"] , has_meaningful_message : false , exception : Some ("\\UnexpectedValueException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/RedisFactory.php" , line : 175usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Redis support is not available$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Tags.php" , line : 258usize , placeholders : & ["$l10n->t('Could not find category \"%s\"', [$tag])"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/CapabilitiesManager.php" , line : 62usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^CapabilitiesManager$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/CapabilitiesManager.php" , line : 78usize , placeholders : & ["get_class($c)"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^The given Capability \\((.*)\\) does not implement the ICapability interface$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Notice , path : "/lib/private/Profile/ProfileManager.php" , line : 163usize , placeholders : & ["$action->getAppId()" , "$targetUser->getUID()"] , has_meaningful_message : true , exception : None , regex : "^App: (.*) cannot register actions as it is not enabled for the target user: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Notice , path : "/lib/private/Profile/ProfileManager.php" , line : 167usize , placeholders : & ["$action->getAppId()" , "$visitingUser->getUID()"] , has_meaningful_message : true , exception : None , regex : "^App: (.*) cannot register actions as it is not enabled for the visiting user: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Profile/ProfileManager.php" , line : 173usize , placeholders : & ["$action->getId()"] , has_meaningful_message : true , exception : None , regex : "^Cannot register action with ID: (.*), as it is used by a core account property\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Profile/ProfileManager.php" , line : 178usize , placeholders : & ["$action->getId()"] , has_meaningful_message : true , exception : None , regex : "^Cannot register duplicate action: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Route/Router.php" , line : 302usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^not a callable action$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Route/Router.php" , line : 310usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^no action available$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Route/Router.php" , line : 363usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/StreamImage.php" , line : 78usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/StreamImage.php" , line : 82usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/StreamImage.php" , line : 86usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/StreamImage.php" , line : 90usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/StreamImage.php" , line : 106usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/StreamImage.php" , line : 110usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/StreamImage.php" , line : 114usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/StreamImage.php" , line : 118usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/StreamImage.php" , line : 122usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/StreamImage.php" , line : 126usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/StreamImage.php" , line : 130usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/StreamImage.php" , line : 134usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/StreamImage.php" , line : 138usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/StreamImage.php" , line : 142usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/StreamImage.php" , line : 146usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/StreamImage.php" , line : 150usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Not implemented$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/EventDispatcher/GenericEventWrapper.php" , line : 57usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Deprecated event type for \\{name\\}: \\{class\\} is used$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/lib/private/EventDispatcher/GenericEventWrapper.php" , line : 65usize , placeholders : & [] , has_meaningful_message : false , exception : None , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/lib/private/EventDispatcher/GenericEventWrapper.php" , line : 70usize , placeholders : & [] , has_meaningful_message : false , exception : None , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/lib/private/EventDispatcher/GenericEventWrapper.php" , line : 75usize , placeholders : & [] , has_meaningful_message : false , exception : None , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/lib/private/EventDispatcher/GenericEventWrapper.php" , line : 80usize , placeholders : & [] , has_meaningful_message : false , exception : None , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/lib/private/EventDispatcher/GenericEventWrapper.php" , line : 85usize , placeholders : & [] , has_meaningful_message : false , exception : None , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/EventDispatcher/ServiceEventListener.php" , line : 73usize , placeholders : & ["sprintf(\n\t\t\t\t\t\t'Could not load event listener service %s: %s. Make sure the class is auto-loadable by the Nextcloud server container',\n\t\t\t\t\t\t$this->class,\n\t\t\t\t\t\t$e->getMessage()\n\t\t\t\t\t)"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/EventDispatcher/SymfonyAdapter.php" , line : 109usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Deprecated event type for \\{name\\}: \\{class\\}$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Template/TemplateManager.php" , line : 154usize , placeholders : & ["$this->l10n->t('File already exists')"] , has_meaningful_message : false , exception : Some ("GenericFileException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Template/TemplateManager.php" , line : 159usize , placeholders : & ["$this->l10n->t('Invalid path')"] , has_meaningful_message : false , exception : Some ("GenericFileException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Files/Template/TemplateManager.php" , line : 180usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Template/TemplateManager.php" , line : 181usize , placeholders : & ["$this->l10n->t('Failed to create file from template')"] , has_meaningful_message : false , exception : Some ("GenericFileException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Template/TemplateManager.php" , line : 195usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Files/Template/TemplateManager.php" , line : 340usize , placeholders : & ["$userLang" , "$userId"] , has_meaningful_message : true , exception : None , regex : "^Failed to initialize templates directory to user language (.*) for (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/Files/Type/Detection.php" , line : 135usize , placeholders : & ["$fileName" , "json_last_error_msg()"] , has_meaningful_message : true , exception : None , regex : "^Failed to parse (.*): (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Type/Loader.php" , line : 131usize , placeholders : & ["$mimetype"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Failed to get mimetype id for (.*) after trying to store it$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Files/SetupManager.php" , line : 423usize , placeholders : & ["$cachedMount->getMountPoint()"] , has_meaningful_message : true , exception : None , regex : "^mount at (.*) has no provider set, performing full setup$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Files/SetupManager.php" , line : 437usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^mount has no provider set, performing full setup$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Config/CachedMountInfo.php" , line : 65usize , placeholders : & ["$mountProvider"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Mount provider (.*) name exceeds the limit of 128 characters$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Files/Config/UserMountCache.php" , line : 192usize , placeholders : & ["$mount->getMountPoint()"] , has_meaningful_message : true , exception : None , regex : "^Could not get storage info for mount at (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Config/UserMountCache.php" , line : 324usize , placeholders : & ["$fileId"] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^File with id \"(.*)\" not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Config/UserMountCache.php" , line : 477usize , placeholders : & ["$path"] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^No cached mount for path (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Config/MountProviderCollection.php" , line : 162usize , placeholders : & ["$user"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^No home storage configured for user (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFile.php" , line : 33usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFile.php" , line : 37usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFile.php" , line : 41usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFile.php" , line : 45usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFile.php" , line : 52usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFile.php" , line : 57usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFile.php" , line : 64usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFile.php" , line : 72usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFile.php" , line : 80usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFile.php" , line : 88usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFile.php" , line : 96usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFile.php" , line : 104usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFile.php" , line : 112usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFile.php" , line : 120usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFile.php" , line : 125usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFile.php" , line : 129usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFile.php" , line : 136usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFile.php" , line : 141usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFolder.php" , line : 34usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFolder.php" , line : 38usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFolder.php" , line : 42usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFolder.php" , line : 46usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFolder.php" , line : 53usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFolder.php" , line : 58usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFolder.php" , line : 65usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFolder.php" , line : 73usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFolder.php" , line : 81usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFolder.php" , line : 89usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFolder.php" , line : 97usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFolder.php" , line : 105usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFolder.php" , line : 113usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFolder.php" , line : 121usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFolder.php" , line : 126usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFolder.php" , line : 130usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFolder.php" , line : 138usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFolder.php" , line : 142usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFolder.php" , line : 146usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFolder.php" , line : 150usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFolder.php" , line : 154usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFolder.php" , line : 158usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFolder.php" , line : 162usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/NonExistingFolder.php" , line : 169usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/Node.php" , line : 85usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Must be implemented by subclasses$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/Node.php" , line : 97usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidPathException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/Node.php" , line : 104usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/Node.php" , line : 153usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotPermittedException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/Node.php" , line : 160usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^No storage for node$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/Node.php" , line : 397usize , placeholders : & ["$this->path" , "$targetPath"] , has_meaningful_message : true , exception : Some ("NotPermittedException") , regex : "^Could not copy (.*) to (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/Node.php" , line : 404usize , placeholders : & ["$targetPath"] , has_meaningful_message : true , exception : Some ("NotPermittedException") , regex : "^No permission to copy to path (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/Node.php" , line : 431usize , placeholders : & ["$this->path" , "$targetPath"] , has_meaningful_message : true , exception : Some ("NotPermittedException") , regex : "^Could not move (.*) to (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/Node.php" , line : 448usize , placeholders : & ["$targetPath"] , has_meaningful_message : true , exception : Some ("NotPermittedException") , regex : "^No permission to move to path (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/Root.php" , line : 209usize , placeholders : & ["$path"] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/Root.php" , line : 212usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotPermittedException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/Root.php" , line : 224usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotPermittedException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/Root.php" , line : 228usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotPermittedException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/Root.php" , line : 237usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotPermittedException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/Root.php" , line : 245usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotPermittedException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/Root.php" , line : 253usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/Root.php" , line : 346usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Files/Node/Root.php" , line : 369usize , placeholders : & ["sprintf(\n\t\t\t\t\t'Backends provided no user object for %s',\n\t\t\t\t\t$userId\n\t\t\t\t)"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/Root.php" , line : 389usize , placeholders : & ["$userId"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^User folder for (.*) exists as a file$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/Root.php" , line : 460usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^getByIdInPath with non folder$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/File.php" , line : 58usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotPermittedException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/File.php" , line : 72usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("GenericFileException") , regex : "^file_put_contents failed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/File.php" , line : 77usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotPermittedException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/File.php" , line : 118usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotPermittedException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/File.php" , line : 137usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotPermittedException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/Folder.php" , line : 71usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotPermittedException") , regex : "^Invalid path$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/Folder.php" , line : 165usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotPermittedException") , regex : "^Could not create folder$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/Folder.php" , line : 171usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotPermittedException") , regex : "^No create permission for folder$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/Folder.php" , line : 183usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotPermittedException") , regex : "^Could not create as provided path is empty$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/Folder.php" , line : 195usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotPermittedException") , regex : "^Could not create path$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/Folder.php" , line : 201usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotPermittedException") , regex : "^No create permission for path$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/Folder.php" , line : 231usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^searching by owner is only allows on the users home folder$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Node/Folder.php" , line : 394usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotPermittedException") , regex : "^No delete permission for path$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/View.php" , line : 115usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Root can't be null$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/View.php" , line : 118usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/View.php" , line : 494usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\OCP\\Files\\UnseekableException") , regex : "^fseek error$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Files/View.php" , line : 1007usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Trying to open a file with a mode other than \"r\" or \"w\" can cause severe performance issues with some backends$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/View.php" , line : 1135usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidPathException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/Files/View.php" , line : 1431usize , placeholders : & ["$mount->getMountPoint()"] , has_meaningful_message : true , exception : None , regex : "^Storage not valid for mountpoint: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/View.php" , line : 1708usize , placeholders : & ["$path"] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^(.*) not found while trying to get owner$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/View.php" , line : 1712usize , placeholders : & ["$path"] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^(.*) has no owner$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/View.php" , line : 1784usize , placeholders : & ["sprintf('File with id \"%s\" has not been found.', $id)"] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/View.php" , line : 1797usize , placeholders : & ["$pathLen" , "$maxLen" , "$path"] , has_meaningful_message : true , exception : Some ("\\OCP\\Files\\InvalidPathException") , regex : "^Path length\\((.*)\\) exceeds max path length\\((.*)\\): (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/View.php" , line : 1880usize , placeholders : & ["$l->t('File name is a reserved word')"] , has_meaningful_message : false , exception : Some ("InvalidPathException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/View.php" , line : 1883usize , placeholders : & ["$l->t('File name contains at least one invalid character')"] , has_meaningful_message : false , exception : Some ("InvalidPathException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/View.php" , line : 1886usize , placeholders : & ["$l->t('File name is too long')"] , has_meaningful_message : false , exception : Some ("InvalidPathException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/View.php" , line : 1889usize , placeholders : & ["$l->t('Dot files are not allowed')"] , has_meaningful_message : false , exception : Some ("InvalidPathException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/View.php" , line : 1892usize , placeholders : & ["$l->t('Empty filename is not allowed')"] , has_meaningful_message : false , exception : Some ("InvalidPathException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/View.php" , line : 1976usize , placeholders : & ["$this->getPathRelativeToFiles($absolutePath)"] , has_meaningful_message : false , exception : Some ("LockedException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/View.php" , line : 2019usize , placeholders : & ["$this->getPathRelativeToFiles($absolutePath)"] , has_meaningful_message : false , exception : Some ("LockedException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/View.php" , line : 2025usize , placeholders : & ["$absolutePath"] , has_meaningful_message : false , exception : Some ("LockedException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Files/View.php" , line : 2158usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^\\$absolutePath must be relative to \"files\", value is \"%s\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/View.php" , line : 2164usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^\\$absolutePath must be relative to \"files\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/View.php" , line : 2181usize , placeholders : & ["$this->getAbsolutePath($filename)"] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^(.*) not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/View.php" , line : 2190usize , placeholders : & ["$info['fileid']" , "$uid"] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^File with id (.*) not found for user (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Cache/Storage.php" , line : 87usize , placeholders : & ["$this->storageId"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Storage could neither be inserted nor be selected from the database: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Files/Cache/Storage.php" , line : 174usize , placeholders : & ["$this->storageId"] , has_meaningful_message : true , exception : None , regex : "^Storage with (.*) marked as unavailable$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Cache/FailedCache.php" , line : 142usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Invalid cache$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Cache/SearchBuilder.php" , line : 112usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Binary operators inside \"not\" is not supported$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Cache/SearchBuilder.php" , line : 120usize , placeholders : & ["$operator->getType()"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid operator type: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Cache/SearchBuilder.php" , line : 125usize , placeholders : & ["get_class($operator)"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid operator type: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Cache/SearchBuilder.php" , line : 137usize , placeholders : & ["$comparison->getType()"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid operator type: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Cache/SearchBuilder.php" , line : 156usize , placeholders : & ["$value"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Unsupported query value for mimetype: (.*), only values in the format \"mime/type\" or \"mime/%\" are supported$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Cache/SearchBuilder.php" , line : 202usize , placeholders : & ["$operator->getField()"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Unsupported comparison field (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Cache/SearchBuilder.php" , line : 206usize , placeholders : & ["$operator->getField()"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid type for field (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Cache/SearchBuilder.php" , line : 209usize , placeholders : & ["$operator->getField()" , "$operator->getType()"] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Unsupported comparison for field  (.*): (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Cache/QuerySearchHelper.php" , line : 110usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Searching by tag requires the user to be set in the query$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Files/Cache/Scanner.php" , line : 428usize , placeholders : & ["$originalFile" , "$path"] , has_meaningful_message : true , exception : None , regex : "^Scanner: Skipping non\\-normalized file name \"(.*)\" in path \"(.*)\"\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Cache/Cache.php" , line : 344usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^File entry could not be inserted but could also not be selected with getId\\(\\) in order to perform an update\\. Please try again\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Cache/Cache.php" , line : 664usize , placeholders : & ["$sourcePath"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Invalid source storage path: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Cache/Cache.php" , line : 674usize , placeholders : & ["$sourceStorageId"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Invalid source storage id: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Cache/Cache.php" , line : 677usize , placeholders : & ["$targetStorageId"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Invalid target storage id: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Cache/Cache.php" , line : 1076usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Invalid source cache entry on copyFromCache$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Cache/Cache.php" , line : 1087usize , placeholders : & ["$targetPath" , "json_encode($data)"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Failed to copy to (.*) from cache with source data (.*) $" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/Files/Cache/Propagator.php" , line : 142usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Retrying propagation query after retryable exception\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Cache/Propagator.php" , line : 190usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Not in batch$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Lock/LockManager.php" , line : 17usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("PreConditionNotMetException") , regex : "^There is already a registered lock provider$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Lock/LockManager.php" , line : 34usize , placeholders : & ["$this->lockInScope"] , has_meaningful_message : true , exception : Some ("PreConditionNotMetException") , regex : "^Could not obtain lock scope as already in use by (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Lock/LockManager.php" , line : 51usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("PreConditionNotMetException") , regex : "^No lock provider available$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Lock/LockManager.php" , line : 59usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("PreConditionNotMetException") , regex : "^No lock provider available$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Lock/LockManager.php" , line : 67usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("PreConditionNotMetException") , regex : "^No lock provider available$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/Files/Filesystem.php" , line : 216usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Storage wrapper '\\{wrapper\\}' was not registered via the 'OC_Filesystem \\- preSetup' hook which could cause potential problems\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Filesystem.php" , line : 381usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NoUserException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 47usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Missing \"exception\" argument in FailedStorage constructor$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 57usize , placeholders : & ["$this->e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 61usize , placeholders : & ["$this->e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 65usize , placeholders : & ["$this->e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 69usize , placeholders : & ["$this->e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 73usize , placeholders : & ["$this->e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 77usize , placeholders : & ["$this->e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 81usize , placeholders : & ["$this->e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 85usize , placeholders : & ["$this->e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 89usize , placeholders : & ["$this->e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 93usize , placeholders : & ["$this->e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 97usize , placeholders : & ["$this->e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 101usize , placeholders : & ["$this->e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 105usize , placeholders : & ["$this->e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 109usize , placeholders : & ["$this->e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 113usize , placeholders : & ["$this->e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 117usize , placeholders : & ["$this->e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 121usize , placeholders : & ["$this->e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 125usize , placeholders : & ["$this->e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 129usize , placeholders : & ["$this->e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 133usize , placeholders : & ["$this->e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 137usize , placeholders : & ["$this->e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 141usize , placeholders : & ["$this->e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 145usize , placeholders : & ["$this->e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 149usize , placeholders : & ["$this->e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 153usize , placeholders : & ["$this->e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 157usize , placeholders : & ["$this->e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 161usize , placeholders : & ["$this->e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 165usize , placeholders : & ["$this->e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 169usize , placeholders : & ["$this->e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 173usize , placeholders : & ["$this->e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 177usize , placeholders : & ["$this->e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 181usize , placeholders : & ["$this->e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 189usize , placeholders : & ["$this->e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 193usize , placeholders : & ["$this->e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 197usize , placeholders : & ["$this->e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 201usize , placeholders : & ["$this->e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 205usize , placeholders : & ["$this->e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 209usize , placeholders : & ["$this->e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/FailedStorage.php" , line : 213usize , placeholders : & ["$this->e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/Files/Storage/Wrapper/Encryption.php" , line : 451usize , placeholders : & ["$encryptionModuleId"] , has_meaningful_message : true , exception : None , regex : "^Encryption module \"(.*)\" not found, file will be stored unencrypted$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Files/Storage/Wrapper/Encryption.php" , line : 505usize , placeholders : & ["$path"] , has_meaningful_message : true , exception : None , regex : "^Couldn't re\\-calculate unencrypted size for (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Files/Storage/Wrapper/Encryption.php" , line : 532usize , placeholders : & ["$path"] , has_meaningful_message : true , exception : None , regex : "^Could not open (.*)\\. Recalculation of unencrypted size aborted\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Files/Storage/Wrapper/Encryption.php" , line : 798usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Could not find mount point, can't keep encryption keys$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Critical , path : "/lib/private/Files/Storage/Wrapper/Encryption.php" , line : 1005usize , placeholders : & ["$path"] , has_meaningful_message : true , exception : None , regex : "^Encryption module defined in \"(.*)\" not loaded!$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/Wrapper/Availability.php" , line : 93usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/StorageFactory.php" , line : 102usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Invalid result from storage wrapper$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/Files/Storage/Common.php" , line : 240usize , placeholders : & ["$path1" , "$path2"] , has_meaningful_message : true , exception : None , regex : "^Failed to write data while copying (.*) to (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Files/Storage/Common.php" , line : 462usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^External storage not available: stat\\(\\) failed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/Files/Storage/Common.php" , line : 465usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : true , exception : None , regex : "^External storage not available: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/Common.php" , line : 524usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("EmptyFileNameException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/Common.php" , line : 528usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidDirectoryException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/Common.php" , line : 538usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidCharacterInPathException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/Common.php" , line : 545usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("FileNameTooLongException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/Common.php" , line : 561usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ReservedWordException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/Common.php" , line : 573usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidCharacterInPathException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/Common.php" , line : 579usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("InvalidCharacterInPathException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/Common.php" , line : 706usize , placeholders : & ["$path"] , has_meaningful_message : true , exception : Some ("ForbiddenException") , regex : "^Invalid path: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Files/Storage/Common.php" , line : 744usize , placeholders : & ["sprintf(\n\t\t\t\t\t'acquire %s lock on \"%s\" on storage \"%s\"',\n\t\t\t\t\t$typeString,\n\t\t\t\t\t$path,\n\t\t\t\t\t$this->getId()\n\t\t\t\t)"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Files/Storage/Common.php" , line : 776usize , placeholders : & ["sprintf(\n\t\t\t\t\t'release %s lock on \"%s\" on storage \"%s\"',\n\t\t\t\t\t$typeString,\n\t\t\t\t\t$path,\n\t\t\t\t\t$this->getId()\n\t\t\t\t)"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Files/Storage/Common.php" , line : 808usize , placeholders : & ["sprintf(\n\t\t\t\t\t'change lock on \"%s\" to %s on storage \"%s\"',\n\t\t\t\t\t$path,\n\t\t\t\t\t$typeString,\n\t\t\t\t\t$this->getId()\n\t\t\t\t)"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/Common.php" , line : 868usize , placeholders : & ["$path"] , has_meaningful_message : true , exception : Some ("GenericFileException") , regex : "^Failed to open (.*) for writing$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/Common.php" , line : 873usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("GenericFileException") , regex : "^Failed to copy stream$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/Local.php" , line : 72usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^No data directory set for local storage$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/Local.php" , line : 320usize , placeholders : & ["$file->getPathname()"] , has_meaningful_message : true , exception : Some ("ForbiddenException") , regex : "^Invalid path: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/Local.php" , line : 470usize , placeholders : & ["$path"] , has_meaningful_message : true , exception : Some ("ForbiddenException") , regex : "^Invalid path: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/Local.php" , line : 496usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("ForbiddenException") , regex : "^Following symlinks is not allowed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/Local.php" , line : 608usize , placeholders : & ["$path"] , has_meaningful_message : true , exception : Some ("GenericFileException") , regex : "^Failed write stream to (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/DAV.php" , line : 130usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Invalid webdav storage configuration$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/DAV.php" , line : 371usize , placeholders : & ["$path"] , has_meaningful_message : false , exception : Some ("\\OCP\\Lock\\LockedException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/DAV.php" , line : 789usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("StorageNotAvailableException") , regex : "^root is gone$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/DAV.php" , line : 818usize , placeholders : & ["get_class($e)" , "$e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*): (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/DAV.php" , line : 849usize , placeholders : & ["$path"] , has_meaningful_message : false , exception : Some ("\\OCP\\Lock\\LockedException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/DAV.php" , line : 853usize , placeholders : & ["get_class($e)" , "$e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageInvalidException") , regex : "^(.*): (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/DAV.php" , line : 859usize , placeholders : & ["get_class($e)" , "$e->getMessage()"] , has_meaningful_message : false , exception : Some ("ForbiddenException") , regex : "^(.*):(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/DAV.php" , line : 861usize , placeholders : & ["get_class($e)" , "$e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*): (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/DAV.php" , line : 864usize , placeholders : & ["get_class($e)" , "$e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*): (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Storage/DAV.php" , line : 868usize , placeholders : & ["get_class($e)" , "$e->getMessage()"] , has_meaningful_message : false , exception : Some ("StorageNotAvailableException") , regex : "^(.*): (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Files/Mount/RootMountProvider.php" , line : 59usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^No class given for objectstore$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Mount/MountPoint.php" , line : 131usize , placeholders : & ["$mountProvider"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Mount provider (.*) name exceeds the limit of 128 characters$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Mount/MountPoint.php" , line : 174usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^The root storage could not be initialized\\. Please contact your local administrator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Files/Mount/ObjectStorePreviewCacheMountProvider.php" , line : 106usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^No class given for objectstore$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Files/Mount/ObjectStorePreviewCacheMountProvider.php" , line : 135usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^No class given for objectstore$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Mount/Manager.php" , line : 118usize , placeholders : & ["$path" , "implode(\",\", array_keys($this->mounts))"] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^No mount for path (.*) existing mounts: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/AppData/AppData.php" , line : 76usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^no instance id!$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/AppData/AppData.php" , line : 93usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Could not get appdata folder$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/AppData/AppData.php" , line : 117usize , placeholders : & ["$this->appId"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Could not get appdata folder for (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/SimpleFS/SimpleFolder.php" , line : 78usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/SimpleFS/NewSimpleFile.php" , line : 164usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^File does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/SimpleFS/SimpleFile.php" , line : 138usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^File does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/ObjectStore/S3ObjectTrait.php" , line : 137usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\OCA\\DAV\\Connector\\Sabre\\Exception\\BadGateway") , regex : "^Error while uploading to S3 bucket$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/ObjectStore/StorageObjectStore.php" , line : 64usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/ObjectStore/StorageObjectStore.php" , line : 73usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/ObjectStore/ObjectStoreStorage.php" , line : 68usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^missing IObjectStore instance$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/ObjectStore/ObjectStoreStorage.php" , line : 529usize , placeholders : & ["$urn" , "$path"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Object not found after writing \\(urn: (.*), path: (.*)\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/ObjectStore/ObjectStoreStorage.php" , line : 568usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^Source object not found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/ObjectStore/ObjectStoreStorage.php" , line : 599usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Invalid source cache for object store copy$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/ObjectStore/HomeObjectStoreStorage.php" , line : 38usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^missing user object in parameters$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/ObjectStore/AppdataPreviewObjectStoreStorage.php" , line : 35usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^missing id in parameters$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/ObjectStore/Swift.php" , line : 120usize , placeholders : & ["$urn"] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^object (.*) not found in object store$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/ObjectStore/SwiftFactory.php" , line : 82usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("StorageAuthException") , regex : "^Unauthenticated ObjectStore connection$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/ObjectStore/SwiftFactory.php" , line : 162usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("StorageAuthException") , regex : "^Scope has to be defined for V3 requests$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/Files/ObjectStore/SwiftFactory.php" , line : 187usize , placeholders : & ["json_encode($cachedToken)"] , has_meaningful_message : true , exception : None , regex : "^Invalid cached token for swift, no catalog set: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Files/ObjectStore/SwiftFactory.php" , line : 189usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Cached token for swift expired$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Files/ObjectStore/SwiftFactory.php" , line : 203usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Cached token for swift expired$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Files/ObjectStore/SwiftFactory.php" , line : 206usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/ObjectStore/SwiftFactory.php" , line : 217usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("StorageAuthException") , regex : "^Failed to connect to keystone, verify the keystone url$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/ObjectStore/SwiftFactory.php" , line : 221usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("StorageAuthException") , regex : "^Keystone not found, verify the keystone url$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/ObjectStore/SwiftFactory.php" , line : 223usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("StorageAuthException") , regex : "^Precondition failed, verify the keystone url$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/ObjectStore/SwiftFactory.php" , line : 225usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("StorageAuthException") , regex : "^Authentication failed, verify the username, password and possibly tenant$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/ObjectStore/SwiftFactory.php" , line : 227usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("StorageAuthException") , regex : "^Unknown error$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/ObjectStore/SwiftFactory.php" , line : 230usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("StorageAuthException") , regex : "^Connection reset while connecting to keystone, verify the keystone url$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/ObjectStore/SwiftFactory.php" , line : 276usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("StorageNotAvailableException") , regex : "^Invalid response while trying to get container info$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Files/ObjectStore/SwiftFactory.php" , line : 282usize , placeholders : & ["$host"] , has_meaningful_message : true , exception : None , regex : "^Can't connect to object storage server at (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/ObjectStore/SwiftFactory.php" , line : 283usize , placeholders : & ["$host"] , has_meaningful_message : true , exception : Some ("StorageNotAvailableException") , regex : "^Can't connect to object storage server at (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/ObjectStore/S3ConnectionTrait.php" , line : 74usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Bucket has to be configured\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/private/Files/ObjectStore/S3ConnectionTrait.php" , line : 146usize , placeholders : & ["$this->bucket"] , has_meaningful_message : true , exception : None , regex : "^Bucket \"(.*)\" This bucket name is not dns compatible, it may contain invalid characters\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/private/Files/ObjectStore/S3ConnectionTrait.php" , line : 153usize , placeholders : & ["$this->bucket"] , has_meaningful_message : true , exception : None , regex : "^Bucket \"(.*)\" does not exist \\- creating it\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/ObjectStore/S3ConnectionTrait.php" , line : 155usize , placeholders : & ["$this->bucket"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^The bucket will not be created because the name is not dns compatible, please correct it: (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/ObjectStore/S3ConnectionTrait.php" , line : 165usize , placeholders : & ["$this->bucket" , "$e->getMessage()"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Creation of bucket \"(.*)\" failed\\. (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Utils/Scanner.php" , line : 196usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid path to scan$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Utils/Scanner.php" , line : 218usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("ForbiddenException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Utils/Scanner.php" , line : 247usize , placeholders : & ["$dir"] , has_meaningful_message : false , exception : Some ("NotFoundException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Files/Utils/Scanner.php" , line : 264usize , placeholders : & ["$storage->getId()"] , has_meaningful_message : true , exception : None , regex : "^Storage (.*) not available$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Stream/Encryption.php" , line : 249usize , placeholders : & ["$property"] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^Invalid context, \"(.*)\" options not set$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Files/Stream/SeekableHttpStream.php" , line : 105usize , placeholders : & ["get_class($responseHead)"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Failed to get source stream from stream wrapper of (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/URLGenerator.php" , line : 244usize , placeholders : & ["$file" , "\\OC::$WEBROOT" , "\\OC::$SERVERROOT"] , has_meaningful_message : true , exception : Some ("RuntimeException") , regex : "^image not found: image:(.*) webroot:(.*) serverroot:(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Console/Application.php" , line : 115usize , placeholders : & [] , has_meaningful_message : false , exception : Some ("NeedsUpdateException") , regex : "^$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Console/Application.php" , line : 137usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Console/Application.php" , line : 164usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Environment not properly prepared\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Console/Application.php" , line : 223usize , placeholders : & ["$command" , "$e->getMessage()"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Failed to construct console command '(.*)': (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Console/Application.php" , line : 226usize , placeholders : & ["$command"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Console command '(.*)' is unknown and could not be loaded$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DirectEditing/Manager.php" , line : 99usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^No matching editor found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DirectEditing/Manager.php" , line : 131usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^File already exists$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DirectEditing/Manager.php" , line : 134usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Invalid path$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DirectEditing/Manager.php" , line : 149usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^No creator found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DirectEditing/Manager.php" , line : 160usize , placeholders : & ["$editorId"] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Editor (.*) is unknown$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DirectEditing/Manager.php" , line : 172usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^No default editor found for files mimetype$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DirectEditing/Manager.php" , line : 180usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Token has already been used and can only be used for followup requests$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DirectEditing/Manager.php" , line : 197usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^No editor found$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DirectEditing/Manager.php" , line : 210usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Failed to validate the token$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/DirectEditing/Manager.php" , line : 284usize , placeholders : & ["$fileId"] , has_meaningful_message : true , exception : Some ("NotFoundException") , regex : "^File nound found by id (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Memcache/Factory.php" , line : 90usize , placeholders : & ["strtr($missingCacheMessage, [\n\t\t\t\t'{class}' => $localCacheClass, '{use}' => 'local'\n\t\t\t])"] , has_meaningful_message : false , exception : Some ("\\OCP\\HintException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Memcache/Factory.php" , line : 95usize , placeholders : & ["strtr($missingCacheMessage, [\n\t\t\t\t'{class}' => $distributedCacheClass, '{use}' => 'distributed'\n\t\t\t])"] , has_meaningful_message : false , exception : Some ("\\OCP\\HintException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Memcache/Memcached.php" , line : 84usize , placeholders : & ["$options"] , has_meaningful_message : true , exception : Some ("HintException") , regex : "^Expected 'memcached_options' config to be an array, got (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Installer.php" , line : 107usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^App not found in any app directory$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Installer.php" , line : 113usize , placeholders : & ["$appId"] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^The appinfo/database\\.xml file is not longer supported\\. Used in (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Installer.php" , line : 120usize , placeholders : & ["$l->t('App \"%s\" cannot be installed because appinfo file cannot be read.',\n\t\t\t\t\t[$appId]\n\t\t\t\t)"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/private/Installer.php" , line : 196usize , placeholders : & ["$e->getMessage()"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Installer.php" , line : 249usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^Could not validate CRL signature$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Installer.php" , line : 254usize , placeholders : & ["sprintf(\n\t\t\t\t\t\t\t'Certificate \"%s\" has been revoked',\n\t\t\t\t\t\t\t$csn\n\t\t\t\t\t\t)"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Installer.php" , line : 264usize , placeholders : & ["sprintf(\n\t\t\t\t\t\t\t'App with id %s has a certificate not issued by a trusted Code Signing Authority',\n\t\t\t\t\t\t\t$appId\n\t\t\t\t\t\t)"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Installer.php" , line : 275usize , placeholders : & ["sprintf(\n\t\t\t\t\t\t\t'App with id %s has a cert with no CN',\n\t\t\t\t\t\t\t$appId\n\t\t\t\t\t\t)"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Installer.php" , line : 283usize , placeholders : & ["sprintf(\n\t\t\t\t\t\t\t'App with id %s has a cert issued to %s',\n\t\t\t\t\t\t\t$appId,\n\t\t\t\t\t\t\t$certInfo['subject']['CN']\n\t\t\t\t\t\t)"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Installer.php" , line : 319usize , placeholders : & ["$errorMessage"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Installer.php" , line : 326usize , placeholders : & ["sprintf(\n\t\t\t\t\t\t\t\t'Extracted app %s has more than 1 folder',\n\t\t\t\t\t\t\t\t$appId\n\t\t\t\t\t\t\t)"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Installer.php" , line : 343usize , placeholders : & ["sprintf(\n\t\t\t\t\t\t\t\t'App for id %s has a wrong app ID in info.xml: %s',\n\t\t\t\t\t\t\t\t$appId,\n\t\t\t\t\t\t\t\t(string)$xml->id\n\t\t\t\t\t\t\t)"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Installer.php" , line : 356usize , placeholders : & ["sprintf(\n\t\t\t\t\t\t\t\t'App for id %s has version %s and tried to update to lower version %s',\n\t\t\t\t\t\t\t\t$appId,\n\t\t\t\t\t\t\t\t$currentVersion,\n\t\t\t\t\t\t\t\t$newVersion\n\t\t\t\t\t\t\t)"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Installer.php" , line : 379usize , placeholders : & ["sprintf(\n\t\t\t\t\t\t'App with id %s has invalid signature',\n\t\t\t\t\t\t$appId\n\t\t\t\t\t)"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/Installer.php" , line : 388usize , placeholders : & ["sprintf(\n\t\t\t\t'Could not download app %s',\n\t\t\t\t$appId\n\t\t\t)"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/TempManager.php" , line : 106usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Can not create a temporary file in directory \\{dir\\}\\. Check it exists and has correct permissions$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/TempManager.php" , line : 138usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Can not create a temporary folder in directory \\{dir\\}\\. Check it exists and has correct permissions$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/TempManager.php" , line : 164usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Error deleting temporary file/folder: \\{file\\} \\- Reason: \\{error\\}$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/private/TempManager.php" , line : 248usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\UnexpectedValueException") , regex : "^Unable to detect system temporary directory$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Warn , path : "/lib/private/TempManager.php" , line : 266usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Temporary directory \\{dir\\} is not present or writable$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/base.php" , line : 223usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^apps directory not found! Please put the Nextcloud apps folder in the Nextcloud folder\\. You can also configure the location in the config\\.php file\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/base.php" , line : 230usize , placeholders : & ["sprintf('App directory \"%s\" not found! Please put the Nextcloud apps folder in the'\n\t\t\t\t\t. ' Nextcloud folder. You can also configure the location in the config.php file.', $path['path'])"] , has_meaningful_message : false , exception : Some ("\\RuntimeException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/base.php" , line : 282usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("Exception") , regex : "^Not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/base.php" , line : 399usize , placeholders : & ["implode(', ', $incompatibleShippedApps)"] , has_meaningful_message : true , exception : Some ("\\OCP\\HintException") , regex : "^The files of the app (.*) were not replaced correctly\\. Make sure it is a version compatible with the server\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/base.php" , line : 587usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Composer autoloader not found, unable to continue\\. Check the folder \"3rdparty\"\\. Running \"git submodule update \\-\\-init\" will initialize the git submodule that handles the subfolder \"3rdparty\"\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/lib/base.php" , line : 605usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^autoloader$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/base.php" , line : 623usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Could not set timezone to UTC$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Info , path : "/lib/base.php" , line : 798usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Trusted domain error\\. \"\\{remoteAddress\\}\" tried to access using \"\\{host\\}\" as host\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/lib/base.php" , line : 815usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^init$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/public/EventDispatcher/GenericEvent.php" , line : 86usize , placeholders : & ["sprintf('Argument \"%s\" not found.', $key)"] , has_meaningful_message : false , exception : Some ("InvalidArgumentException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/public/BackgroundJob/Job.php" , line : 78usize , placeholders : & ["get_class($this)" , "$this->getId()"] , has_meaningful_message : true , exception : None , regex : "^Run (.*) job with ID (.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Debug , path : "/lib/public/BackgroundJob/Job.php" , line : 82usize , placeholders : & ["get_class($this)" , "$this->getId()" , "$timeTaken"] , has_meaningful_message : true , exception : None , regex : "^Finished (.*) job with ID (.*) in (.*) seconds$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/public/BackgroundJob/TimedJob.php" , line : 79usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Invalid sensitivity$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/public/WorkflowEngine/GenericEntityEvent.php" , line : 50usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^DisplayName must not be empty$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/public/WorkflowEngine/GenericEntityEvent.php" , line : 53usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^EventName must not be empty$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/public/AppFramework/Controller.php" , line : 160usize , placeholders : & ["$format"] , has_meaningful_message : true , exception : Some ("\\DomainException") , regex : "^No responder registered for format (.*)!$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/public/AppFramework/App.php" , line : 145usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\RuntimeException") , regex : "^Can only setup routes with real router$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/public/AppFramework/Http/Template/PublicTemplateResponse.php" , line : 94usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidArgumentException") , regex : "^Actions must be of type IMenuAction$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/public/AppFramework/Http/Template/PublicTemplateResponse.php" , line : 112usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\Exception") , regex : "^No header actions have been set$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Error , path : "/lib/public/AppFramework/Http/Response.php" , line : 215usize , placeholders : & [] , has_meaningful_message : true , exception : None , regex : "^Setting custom header on a 204 or 304 is not supported \\(Header: \\{header\\}\\)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/public/AppFramework/Http/JSONResponse.php" , line : 69usize , placeholders : & ["sprintf('Could not json_encode due to invalid ' .\n\t\t\t\t'non UTF-8 characters in the array: %s', var_export($this->data, true))"] , has_meaningful_message : false , exception : Some ("\\Exception") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/public/AppFramework/Http/ZipResponse.php" , line : 61usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^No resource provided$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/public/AppFramework/Db/Mapper.php" , line : 156usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Entity which should be updated has no id$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/public/AppFramework/Db/Mapper.php" , line : 280usize , placeholders : & ["$msg"] , has_meaningful_message : false , exception : Some ("DoesNotExistException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/public/AppFramework/Db/Mapper.php" , line : 289usize , placeholders : & ["$msg"] , has_meaningful_message : false , exception : Some ("MultipleObjectsReturnedException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/public/AppFramework/Db/QBMapper.php" , line : 194usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Entity which should be updated has no id$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/public/AppFramework/Db/QBMapper.php" , line : 285usize , placeholders : & ["$msg"] , has_meaningful_message : false , exception : Some ("DoesNotExistException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/public/AppFramework/Db/QBMapper.php" , line : 294usize , placeholders : & ["$msg"] , has_meaningful_message : false , exception : Some ("MultipleObjectsReturnedException") , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/public/AppFramework/Db/Entity.php" , line : 136usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : Some ("\\BadFunctionCallException") , regex : "^(.*) is not a valid attribute$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/public/AppFramework/Db/Entity.php" , line : 150usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : Some ("\\BadFunctionCallException") , regex : "^(.*) is not a valid attribute$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/public/AppFramework/Db/Entity.php" , line : 171usize , placeholders : & ["$methodName"] , has_meaningful_message : true , exception : Some ("\\BadFunctionCallException") , regex : "^(.*) does not exist$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/public/AppFramework/Db/Entity.php" , line : 282usize , placeholders : & ["$attributeName"] , has_meaningful_message : true , exception : Some ("\\BadFunctionCallException") , regex : "^(.*) is not a valid attribute$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/public/SystemTag/ManagerEvent.php" , line : 99usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\BadMethodCallException") , regex : "^getTagBefore is only available on the update Event$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/public/SystemTag/SystemTagsEntityEvent.php" , line : 71usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Duplicate entity name \"(.*)\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/public/Collaboration/Collaborators/SearchResultType.php" , line : 64usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Type must not be empty$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/public/Collaboration/Collaborators/SearchResultType.php" , line : 68usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^Provided type is a reserved word$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/public/RichObjectStrings/Definitions.php" , line : 639usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("InvalidObjectExeption") , regex : "^Object type is undefined$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Unknown , path : "/lib/public/Util.php" , line : 141usize , placeholders : & ["$level"] , has_meaningful_message : false , exception : None , regex : "^(.*)$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/public/Files/SimpleFS/InMemoryFile.php" , line : 144usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotPermittedException") , regex : "^Stream reading is unsupported for in memory files$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/public/Files/SimpleFS/InMemoryFile.php" , line : 156usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("NotPermittedException") , regex : "^Stream writing is unsupported for in memory files$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/public/Comments/CommentsEntityEvent.php" , line : 66usize , placeholders : & ["$name"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Duplicate entity name \"(.*)\"$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/composer/composer/InstalledVersions.php" , line : 159usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/composer/composer/InstalledVersions.php" , line : 180usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/composer/composer/InstalledVersions.php" , line : 201usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/composer/composer/InstalledVersions.php" , line : 222usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/composer/composer/InstalledVersions.php" , line : 239usize , placeholders : & ["$packageName"] , has_meaningful_message : true , exception : Some ("\\OutOfBoundsException") , regex : "^Package \"(.*)\" is not installed$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/composer/composer/ClassLoader.php" , line : 252usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/composer/composer/ClassLoader.php" , line : 307usize , placeholders : & [] , has_meaningful_message : true , exception : Some ("\\InvalidArgumentException") , regex : "^A non\\-empty PSR\\-4 prefix must end with a namespace separator\\.$" , }
,
	crate :: LoggingStatement { level : crate :: LogLevel :: Exception , path : "/lib/autoloader.php" , line : 141usize , placeholders : & ["$fullPath"] , has_meaningful_message : false , exception : Some ("AutoloadNotAllowedException") , regex : "^(.*)$" , }
];

